{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../esm2015/projects/swimlane/ngx-charts/src/lib/common/tooltip/position/placement.type.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/injection.service.ts","../../projects/swimlane/ngx-charts/src/lib/utils/throttle.ts","../esm2015/projects/swimlane/ngx-charts/src/lib/common/tooltip/position/position.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.component.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/injection-registery.service.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.service.ts","../projects/swimlane/ngx-charts/src/lib/common/charts/chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/utils/visibility-observer.ts","../../projects/swimlane/ngx-charts/src/lib/common/base-chart.component.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/axis-label.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/trim-label.helper.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/ticks.helper.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/x-axis-ticks.component.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/x-axis.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/shape.helper.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/y-axis-ticks.component.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/y-axis.component.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/style.type.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/alignment.type.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/show.type.ts","../projects/swimlane/ngx-charts/src/lib/common/axes/axes.module.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.directive.ts","../projects/swimlane/ngx-charts/src/lib/common/tooltip/tooltip.module.ts","../../projects/swimlane/ngx-charts/src/lib/common/label.helper.ts","../../projects/swimlane/ngx-charts/src/lib/utils/id.ts","../../projects/swimlane/ngx-charts/src/lib/common/circle-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/circle.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/grid-panel.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/grid-panel-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/svg-linear-gradient.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/svg-radial-gradient.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/area.component.ts","../projects/swimlane/ngx-charts/src/lib/common/count/count.helper.ts","../../../projects/swimlane/ngx-charts/src/lib/events.ts","../projects/swimlane/ngx-charts/src/lib/common/count/count.directive.ts","../../projects/swimlane/ngx-charts/src/lib/common/tooltip-area.component.ts","../projects/swimlane/ngx-charts/src/lib/common/timeline/timeline.component.ts","../projects/swimlane/ngx-charts/src/lib/common/legend/legend.component.ts","../projects/swimlane/ngx-charts/src/lib/common/legend/legend-entry.component.ts","../projects/swimlane/ngx-charts/src/lib/common/legend/scale-legend.component.ts","../projects/swimlane/ngx-charts/src/lib/common/legend/advanced-legend.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/chart-common.module.ts","../../projects/swimlane/ngx-charts/src/lib/common/view-dimensions.helper.ts","../../projects/swimlane/ngx-charts/src/lib/utils/color-sets.ts","../../projects/swimlane/ngx-charts/src/lib/common/color.helper.ts","../../projects/swimlane/ngx-charts/src/lib/common/domain.helper.ts","../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart-normalized.component.ts","../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart-stacked.component.ts","../../projects/swimlane/ngx-charts/src/lib/utils/sort.ts","../../projects/swimlane/ngx-charts/src/lib/area-chart/area-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/area-chart/area-chart.module.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-2d.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-normalized.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-horizontal-stacked.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-2d.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-normalized.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/series-vertical.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-vertical-stacked.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/series-horizontal.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-label.component.ts","../../projects/swimlane/ngx-charts/src/lib/bar-chart/bar-chart.module.ts","../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.utils.ts","../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/bubble-chart/bubble-chart.module.ts","../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map-cell.component.ts","../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map-cell-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map.component.ts","../../projects/swimlane/ngx-charts/src/lib/heat-map/heat-map.module.ts","../../projects/swimlane/ngx-charts/src/lib/line-chart/line.component.ts","../../projects/swimlane/ngx-charts/src/lib/line-chart/line-chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/line-chart/line-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/line-chart/line-chart.module.ts","../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/utils/types.ts","../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/advanced-pie-chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-label.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-arc.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-chart.component.ts","../../projects/swimlane/ngx-charts/src/lib/common/grid-layout.helper.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-grid.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-grid-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/pie-chart/pie-chart.module.ts","../../projects/swimlane/ngx-charts/src/lib/polar-chart/polar-chart.module.ts","../../projects/swimlane/ngx-charts/src/lib/utils/calculate-width.ts","../projects/swimlane/ngx-charts/src/lib/common/constants/font-widths.ts","../../projects/swimlane/ngx-charts/src/lib/number-card/card.component.ts","../../projects/swimlane/ngx-charts/src/lib/utils/color-utils.ts","../../projects/swimlane/ngx-charts/src/lib/number-card/card-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/number-card/number-card.component.ts","../../projects/swimlane/ngx-charts/src/lib/number-card/number-card.module.ts","../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map-cell.component.ts","../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map-cell-series.component.ts","../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map.component.ts","../../projects/swimlane/ngx-charts/src/lib/tree-map/tree-map.module.ts","../../projects/swimlane/ngx-charts/src/lib/gauge/linear-gauge.component.ts","../../projects/swimlane/ngx-charts/src/lib/gauge/gauge.component.ts","../../projects/swimlane/ngx-charts/src/lib/gauge/gauge-arc.component.ts","../../projects/swimlane/ngx-charts/src/lib/gauge/gauge-axis.component.ts","../../projects/swimlane/ngx-charts/src/lib/gauge/gauge.module.ts","../../../projects/swimlane/ngx-charts/src/lib/ngx-charts.module.ts","../../../projects/swimlane/ngx-charts/src/lib/polyfills.ts","../../projects/swimlane/ngx-charts/src/lib/common/tick-format.helper.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","__","this","constructor","create","__values","o","s","Symbol","iterator","m","i","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","PlacementTypes","InjectionService","applicationRef","componentFactoryResolver","injector","setGlobalRootViewContainer","container","globalRootViewContainer","getRootViewContainer","_container","components","Error","setRootViewContainer","getComponentRootNode","component","element","nativeElement","hostView","rootNodes","location","getRootViewContainerNode","projectComponentBindings","bindings","undefined","inputs","bindingKeys","getOwnPropertyNames","bindingKeys_1","bindingKeys_1_1","bindingName","instance","outputs","eventKeys","eventKeys_1","eventKeys_1_1","eventName","appendComponent","componentClass","appendLocation","portalHost","DomPortalHost","portal","ComponentPortal","componentRef","attach","throttle","func","wait","options","context","args","result","timeout","previous","later","leading","Date","apply","now","remaining","clearTimeout","trailing","setTimeout","throttleable","duration","target","key","descriptor","configurable","enumerable","get","defineProperty","Injectable","ApplicationRef","ComponentFactoryResolver","Injector","verticalPosition","elDimensions","popoverDimensions","alignment","top","height","horizontalPosition","left","width","PositionHelper","calculateVerticalAlignment","window","innerHeight","calculateVerticalCaret","caretDimensions","popoverPosition","calculateHorizontalAlignment","innerWidth","calculateHorizontalCaret","shouldFlip","placement","spacing","flip","positionCaret","elmDim","hostDim","right","bottom","positionContent","determinePlacement","TooltipContentComponent","renderer","platformId","clz","type","cssClass","ngAfterViewInit","position","bind","_this","isPlatformBrowser","nativeElm","host","getBoundingClientRect","checkFlip","showCaret","addClass","_a","setStyle","caretElm","onWindowResize","Component","selector","template","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","Inject","PLATFORM_ID","Input","ViewChild","HostBinding","HostListener","decorators","desc","c","getOwnPropertyDescriptor","Reflect","decorate","__decorate","InjectionRegisteryService","injectionService","defaults","Map","getByType","createByType","assignDefaults","injectComponent","register","destroy","compsByType","componentType","idx","indexOf","splice","destroyAll","destroyByType","comps","assign","has","set","TooltipService","_super","ChartComponent","showLegend","animations","legendLabelClick","EventEmitter","legendLabelActivate","legendLabelDeactivate","ngOnChanges","changes","update","legendColumns","legendType","getLegendType","legendOptions","chartColumns","chartWidth","Math","floor","view","legendWidth","scaleType","providers","changeDetection","ChangeDetectionStrategy","OnPush","trigger","transition","style","opacity","animate","Output","VisibilityObserver","zone","visible","isVisible","runCheck","onVisibilityChange","run","emit","check","offsetHeight","offsetWidth","runOutsideAngular","Directive","NgZone","BaseChartComponent","chartElement","cd","scheme","schemeType","select","ngOnInit","isPlatformServer","bindWindowResizeEvent","visibilityObserver","subscribe","ngOnDestroy","unbindEvents","unsubscribe","results","cloneData","dims","getContainerDims","markForCheck","hostElem","parentNode","formatDates","g","label","name","toLocaleDateString","series","j","resizeSubscription","subscription","observableFromEvent","pipe","debounceTime","data","data_1","data_1_1","item","copy","_c","e_2","_d","seriesItem","seriesItemCopy","JSON","parse","stringify","ChangeDetectorRef","AxisLabelComponent","textHeight","margin","strokeWidth","textAnchor","transform","orient","y","offset","x","trimLabel","max","trim","slice","reduceTicks","ticks","maxTicks","reduced","modulus","XAxisTicksComponent","tickArguments","tickStroke","trimTicks","maxTickLength","showGridLines","rotateTicks","dimensionsChanged","verticalSpacing","rotateLabels","innerTickSize","outerTickSize","tickPadding","maxTicksLength","maxAllowedLength","approxHeight","updateDims","parseInt","ticksElement","scale","getTicks","tickFormatting","tickFormat","toLocaleString","angle","getRotationAngle","adjustedScale","bandwidth","textTransform","tick","toString","tickLength","tickTrim","wordWidth","min","baseWidth","maxBaseWidth","cos","PI","abs","sin","getMaxTicks","maxScaleTicks","tickValues","domain","tickWidth","tickTransform","gridLineTransform","XAxisComponent","xOrient","xAxisOffset","xAxisClassName","labelOffset","fill","stroke","padding","xAxisTickCount","emitTicksHeight","newLabelOffset","roundedRect","w","h","_b","tl","tr","bl","br","retval","YAxisTicksComponent","showRefLabels","showRefLines","referenceLineLength","getApproximateAxisWidth","sign","tickSpacing","referenceLines","setReferencelines","y2","y1","dy","x2","x1","refMin","map","refMax","referenceAreaPath","gridLineWidth","tickHeight","t","YAxisComponent","yOrient","yAxisOffset","yAxisClassName","yAxisTickCount","emitTicksWidth","StyleTypes","AlignmentTypes","ShowTypes","NgModule","imports","CommonModule","declarations","exports","TooltipDirective","tooltipService","viewContainerRef","tooltipCssClass","tooltipTitle","tooltipAppendToBody","tooltipSpacing","tooltipDisabled","tooltipShowCaret","tooltipPlacement","tooltipAlignment","center","tooltipType","popover","tooltipCloseOnClickOutside","tooltipCloseOnMouseLeave","tooltipHideTimeout","tooltipShowTimeout","tooltipShowEvent","all","tooltipImmediateExit","show","hide","focus","mouseover","hideTooltip","onFocus","listensForFocus","showTooltip","onBlur","onMouseEnter","listensForHover","onMouseLeave","contains","onMouseClick","immediate","time","navigator","userAgent","match","createBoundOptions","addHideListeners","tooltip","mouseEnterContentEvent","listen","mouseLeaveContentEvent","documentClickEvent","event","destroyFn","title","tooltipTemplate","tooltipContext","ViewContainerRef","formatLabel","escapeLabel","replace","&","'","`","\"","<",">","entryComponents","cache","id","newId","random","pow","CircleSeriesComponent","activate","deactivate","barVisible","gradientId","gradientFill","circle","getActiveCircle","indexActiveDataPoint","findIndex","visibleValue","mapDataPointToCircle","cx","seriesName","tooltipLabel","xScale","Number","color","cy","yScale","d1","range","colors","getColor","classNames","radius","gradientStops","getGradientStops","getTooltipText","getTooltipMinMaxText","onClick","isActive","entry","activeEntries","find","activateCircle","deactivateCircle","CircleComponent","isArray","join","GridPanelSeriesComponent","gridPanels","getGridPanels","className","step","paddingInner","class","SvgLinearGradientComponent","orientation","SvgRadialGradientComponent","endOpacity","stopsInput","stopsDefault","startOpacity","AreaComponent","gradient","initialized","hasGradient","loadAnimation","stops","getGradient","updatePathEl","areaPath","startingPath","node","attr","path","easeOutExpo","count","countFrom","countTo","countDecimals","countDuration","callback","startTime","startVal","endVal","countDown","decimals","dec","runCount","timestamp","frameVal","progress","round","finished","requestAnimationFrame","val","decimalChecker","root","CountUpDirective","countPrefix","countSuffix","countChange","countFinish","_countDecimals","_countTo","_countFrom","parseFloat","start","cancelAnimationFrame","animationReq","valueFormatting","global","MouseEvent","createMouseEvent","bubbles","cancelable","document","createEvent","initEvent","TooltipArea","anchorOpacity","anchorPos","anchorValues","showPercentage","hover","getValues","xVal","group","groupName","d0","toFixed","v","mouseMove","xPos","pageX","closestIndex","findClosestPointIndex","closestPoint","xSet","lastAnchorPos","ev","tooltipAnchor","dispatchEvent","minIndex","maxIndex","minDiff","MAX_VALUE","currentIndex","currentElement","curDiff","getToolTipText","tooltipItem","static","Timeline","onDomainChange","addBrush","getDims","offsetY","xDomain","getXDomain","getXScale","brush","updateBrush","filterId","filter","values","_e","_f","includes","scaleTime","scaleLinear","scalePoint","brushX","extent","on","newDomain","d3selection","invert","LegendComponent","horizontal","labelClick","labelActivate","labelDeactivate","legendEntries","getLegendEntries","items","formattedLabel","this_1","trackBy","index","LegendEntryComponent","toggle","ScaleLegendComponent","sanitizer","gradientValues","gradientString","direction","splits","pairs","reverse","forEach","DomSanitizer","AdvancedLegendComponent","legendItems","labelFormatting","percentageFormatting","percentage","defaultValueFormatting","getTotal","reduce","sum","total","roundedTotal","getLegendItems","_value","displayLabel","origialLabel","COMPONENTS","GridPanelComponent","calculateViewDimensions","margins","showXAxis","showYAxis","xAxisHeight","yAxisWidth","showXLabel","_g","showYLabel","_h","_j","_k","legendPosition","_l","columns","xOffset","chartHeight","AxesModule","TooltipModule","colorSets","selectable","ColorHelper","customColors","cs","colorDomain","generateColorScheme","colorScale","scaleQuantile","scaleOrdinal","points","valueScale","formattedValue_1","found","mapping","toLowerCase","getLinearGradientStops","colorValueScale","scaleBand","endColor","startColor","currentVal","originalOffset","stops_1","stops_1_1","getUniqueXDomainValues","valueSet","Set","results_1","results_1_1","add","from","getScaleType","checkDateType","every","AreaChartComponent","legendTitle","baseValue","curve","curveLinear","trimXAxisTicks","trimYAxisTicks","rotateXAxisTicks","maxXAxisTickLength","maxYAxisTickLength","roundDomains","timelineHeight","timelinePadding","xAxis","yAxis","showXAxisLabel","showYAxisLabel","legend","timeline","filteredDomain","yDomain","getYDomain","seriesDomain","getSeriesDomain","getYScale","updateTimeline","setColors","getLegendOptions","clipPathId","clipPath","timelineWidth","timelineXDomain","timelineXScale","timelineYScale","timelineTransform","xScaleMin","xScaleMax","sort","a","aDate","getTime","bDate","autoScale","yScaleMin","yScaleMax","nice","date","num","values_1","values_1_1","isDate","updateDomain","updateHoveredVertical","hoveredVertical","deactivateAll","hideCircles","opts","updateYAxisWidth","updateXAxisHeight","onActivate","entries","onDeactivate","ContentChild","AreaChartNormalizedComponent","e_1","valueOf","AreaChartStackedComponent","this_2","sortLinear","property","sortByDomain","aVal","bVal","aIdx","bIdx","sortByTime","AreaSeriesComponent","stacked","normalized","currentArea","startingArea","updateGradient","xProperty","area","y0","d0values","d1values","isInactive","ChartCommonModule","BarComponent","roundEdges","noBarWhenZero","hideBar","checkToHideBar","getStartingPath","getPath","getStartOpacity","getRadius","edges","BarHorizontalComponent","barPadding","showDataLabel","dataLabelMaxWidth","negative","positive","rangeRound","onDataLabelMaxWidthChanged","size","fromLegend","BarHorizontal2DComponent","groupPadding","groupDomain","getGroupDomain","innerDomain","getInnerDomain","valuesDomain","getValueDomain","groupScale","getGroupScale","innerScale","getInnerScale","getValueScale","paddingOuter","e_3","e_5","groupTransform","groupIndex","flat","BarHorizontalNormalizedComponent","valueDomain","BarHorizontalStackedComponent","smallest","biggest","smallestSum","biggestSum","BarVerticalComponent","dataLabelMaxHeight","yAxisTicks","some","isNaN","onDataLabelMaxHeightChanged","BarVertical2DComponent","BarVerticalNormalizedComponent","D0Types","BarVerticalStackedComponent","SeriesVerticalComponent","dataLabelHeightChanged","barsForDataLabels","updateTooltipSettings","d0Type","bars","getLabel","bar","offset1","offset0","ariaLabel","tooltipText","dataLabelFormatting","updateDataLabels","section","totalPositive","totalNegative","dataItem","trackDataLabelBy","barLabel","SeriesHorizontal","dataLabelWidthChanged","click","BarLabelComponent","horizontalPadding","verticalPadding","getSize","formatedValue","barX","barWidth","barY","barHeight","getDomain","minVal","maxVal","getScale","BubbleChartComponent","maxRadius","minRadius","bubblePadding","rDomain","getRDomain","rScale","getRScale","setScales","getBubblePadding","yMin","xMin","yMax","xMax","xScaleType","yScaleType","e_4","e_6","Infinity","e_8","BubbleSeriesComponent","circles","getCircles","hasRadius","hasTooltipLabel","hasSeriesName","radiusValue","xAxisLabel","yAxisLabel","HeatMapCellComponent","gradientUrl","animateToCurrentForm","HeatCellSeriesComponent","cells","getCells","row","cell","HeatMapComponent","innerPadding","rects","getRects","getDimension","N","L","split","f","yVal","rx","LineComponent","initialPath","strokeDasharray","strokeDashoffset","LineChartComponent","hasRange","LineSeriesComponent","updateGradients","sortData","lineGen","getLineGenerator","areaGen","getAreaGenerator","getRangeGenerator","outerPath","line","areaGradientStops","twoPI","PolarChartComponent","curveCardinalClosed","rangeFillOpacity","showSeriesOnHover","yAxisMinScale","labelTrim","labelTrimSize","setDims","setTicks","halfWidth","halfHeight","outerRadius","yOffset","yAxisDims","transformYAxis","transformPlot","xValues","getXValues","yAxisScale","xAxisTickFormatting","thetaTicks","startAngle","dd","startPos","innerRadius","endAngle","pos","radiusTicks","getYValues","PolarSeriesComponent","circleRadius","linearScaleType","seriesColor","getAngle","active","inactive","defaultTooltipText","lineRadial","AdvancedPieChartComponent","PieLabelComponent","setTransforms","styleTransform","textX","textY","attrTransform","textTransition","isIE","test","startRadius","explodeSlices","innerPos","arc","centroid","outerPos","midAngle","PieArcComponent","cornerRadius","pointerEvents","dblclick","getPointerEvents","calc","calculateArc","radialGradientId","updateAnimation","selectAll","attrTween","_current","copyOfD","interpolater","interpolate","_timeout","onDblClick","preventDefault","stopPropagation","nativeEvent","PieChartComponent","labels","doughnut","arcWidth","trimLabels","maxLabelLength","hasNoOptionalMarginsSet","translation","gridSize","len","minWidth","rows","cols","ceil","gridLayout","designatedTotal","res","cardWidth","cardHeight","extra","percent","PieGridComponent","getSeries","format","other","PieGridSeriesComponent","layout","pie","arcs","getArcs","PieSeriesComponent","arcData","pieGenerator","calculateLabelPositions","outerArc","pieData","labelPositions","labelVisible","myArc","showLabels","getTooltipTitle","labelText","calculateTextWidth","fontFamilyKey","text","defaultWidth","acc","curr","PieChartModule","LineChartModule","VERDANA_FONT_WIDTHS_16_PX","0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","M","O","P","Q","R","S","T","U","V","W","X","Y","Z","k","l","q","u","z","!","@","#","$","%","^","*","(",")","_","-","+","=",",",".","/",":","|","?",";","CardComponent","textFontSize","bandHeight","textPadding","labelFontSize","scaleTextSSR","hasValue","card","textWidth","cardData","transformBand","paddedValue","setPadding","bandPath","scaleText","startCount","medianSize","repeat","val_1","decs","valueFormatting_1","textEl","availableWidth","availableHeight","resizeScale","invertColor","d3_color.rgb","shadeRGBColor","CardSeriesComponent","emptyColor","sortedLengths","cards","getCards","emptySlots","yPadding","xPadding","valueColor","cardColor","bandColor","textColor","NumberCardComponent","observers","TreeMapCellComponent","cellData","formattedValue","getTextColor","TreeMapCellSeriesComponent","children","depth","x0","valueType","TreeMapComponent","treemap","stratify","parentId","isRoot","LinearGaugeComponent","valueResizeScale","unitsResizeScale","valueTextTransform","valueTranslate","unitsTextTransform","unitsTranslate","hasPreviousValue","previousValue","displayValue","getDisplayValue","transformLine","el","valueTextEl","unitsTextEl","oldScale","resizeScaleWidth","resizeScaleHeight","units","GaugeComponent","bigSegments","smallSegments","showAxis","angleSpan","showText","rotation","availableRadius","radiusPerArc","textRadius","backgroundArc","valueArc","dataMin","dataMax","textValue","availableSpace","GaugeArcComponent","GaugeAxisComponent","rotate","rotationAngle","bigTickSegment","smallTickSegment","big","small","startDistance","textDist","angleDeg","getTextAnchor","skip","getTickPath","smallAngle","lineGenerator","BarChartModule","SVGElement","HTMLDivElement","AreaChartModule","BubbleChartModule","HeatMapModule","PolarChartModule","NumberCardModule","TreeMapModule","GaugeModule","fieldType","groupByType","timeFormat","formatter"],"mappings":"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tF,KAAM,UACN4b,YAAY,EACZhH,MAAO,UACPtP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,OACN4b,YAAY,EACZhH,MAAO,UACPtP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,OACN4b,YAAY,EACZhH,MAAO,UACPtP,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YAExF,CACEtF,KAAM,QACN4b,YAAY,EACZhH,MAAO,aACPtP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,MACN4b,YAAY,EACZhH,MAAO,aACPtP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,OACN4b,YAAY,EACZhH,MAAO,aACPtP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,QACN4b,YAAY,EACZhH,MAAO,UACPtP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,QACN4b,YAAY,EACZhH,MAAO,UACPtP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,SACN4b,YAAY,EACZhH,MAAO,UACPtP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,UACN4b,YAAY,EACZhH,MAAO,UACPtP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,QACN4b,YAAY,EACZhH,MAAO,UACPtP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,SACN4b,YAAY,EACZhH,MAAO,UACPtP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,QACN4b,YAAY,EACZhH,MAAO,UACPtP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAGJ,CACEtF,KAAM,cACN4b,YAAY,EACZhH,MAAO,UACPtP,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,2BChPJ,SAAAuW,EAAYld,EAAQ7G,EAAMwN,EAAQwW,GACV,iBAAXnd,IACTA,EAASgd,GAAUpM,MAAK,SAAAwM,GACtB,OAAOA,EAAG/b,OAASrB,MAGvBpP,KAAKysB,YAAcrd,EAAO2G,OAC1B/V,KAAKwN,UAAYjF,EACjBvI,KAAK+V,OAASA,EACd/V,KAAKusB,aAAeA,EAEpBvsB,KAAKsU,MAAQtU,KAAK0sB,oBAAoBtd,EAAQ7G,EAAMvI,KAAK+V,eAG3DuW,EAAA3sB,UAAA+sB,oBAAA,SAAoBtd,EAAQ7G,EAAMwN,GAMhC,IAAI4W,EACJ,GANsB,iBAAXvd,IACTA,EAASgd,GAAUpM,MAAK,SAAAwM,GACtB,OAAOA,EAAG/b,OAASrB,MAIV,aAAT7G,EACFokB,EAAaC,EAAAA,gBAAgBzN,MAAM/P,EAAO2G,QAAQA,OAAOA,QACpD,GAAa,YAATxN,EACTokB,EAAaE,EAAAA,eAAe1N,MAAM/P,EAAO2G,QAAQA,OAAOA,QACnD,GAAa,WAATxN,EAAmB,CAE5B,IAAMkkB,EAAWnrB,EAAO8N,EAAO2G,QACJ,IAAvB0W,EAAY/rB,SACd+rB,EAAYrrB,KAAKqrB,EAAY,IAC7BzsB,KAAKysB,YAAcA,GAGrB,IAAMK,EAAS3N,EAAAA,MAAM,EAAG,EAAG,EAAMsN,EAAY/rB,QAC7CisB,EAAa3E,EAAAA,cAAcjS,OAAO+W,GAAQ3N,MAAMsN,GAGlD,OAAOE,GAGTL,EAAA3sB,UAAA0f,SAAA,SAASze,GACP,GAAIA,MAAAA,EACF,MAAM,IAAIwB,MAAM,yBAElB,GAAuB,WAAnBpC,KAAKwN,UAAwB,CAC/B,IAAMuf,EAAa/E,EAAAA,cAAcjS,OAAO/V,KAAK+V,QAAQoJ,MAAM,CAAC,EAAG,IAE/D,OAAOnf,KAAKsU,MAAMyY,EAAWnsB,IAE7B,GAAiC,mBAAtBZ,KAAKusB,aACd,OAAOvsB,KAAKusB,aAAa3rB,GAG3B,IAAMosB,EAAiBpsB,EAAMqU,WACzBgY,SAOJ,OANIjtB,KAAKusB,cAAgBvsB,KAAKusB,aAAa7rB,OAAS,IAClDusB,EAAQjtB,KAAKusB,aAAavM,MAAK,SAAAkN,GAC7B,OAAOA,EAAQzc,KAAK0c,gBAAkBH,EAAeG,kBAIrDF,EACKA,EAAMrsB,MAENZ,KAAKsU,MAAM1T,IAKxB0rB,EAAA3sB,UAAAytB,uBAAA,SAAuBxsB,EAAOqjB,gBACdjhB,IAAVihB,IACFA,EAAQjkB,KAAK+V,OAAO,IAGtB,IAAMgX,EAAa/E,EAAAA,cAAcjS,OAAO/V,KAAK+V,QAAQoJ,MAAM,CAAC,EAAG,IAEzDkO,EAAkBC,EAAAA,YAAYvX,OAAO/V,KAAKysB,aAAatN,MAAM,CAAC,EAAG,IAEjEoO,EAAWvtB,KAAKqf,SAASze,GAGzB6hB,EAAWsK,EAAW9I,GACtBuJ,EAAaxtB,KAAKqf,SAAS4E,GAE3BvB,EAASqK,EAAWnsB,GACtBH,EAAI,EACJgtB,EAAahL,EACXhB,EAAQ,GASd,IAPAA,EAAMrgB,KAAK,CACT2d,MAAOyO,EACPhb,OAAQiQ,EACRiL,eAAgBjL,EAChBzU,QAAS,IAGJyf,EAAa/K,GAAUjiB,EAAIT,KAAKysB,YAAY/rB,QAAQ,CACzD,IAAMqe,EAAQ/e,KAAKysB,YAAYhsB,GACzB+R,EAAS6a,EAAgBtO,GAC/B,GAAIvM,GAAUiQ,EACZhiB,QADF,CAKA,GAAI+R,EAAOgT,QAAQ,KAAO9C,EAAS2K,EAAgBvY,aAAa0Q,QAAQ,GACtE,MAGF/D,EAAMrgB,KAAK,CACT2d,MAAKA,EACLvM,OAAMA,EACNxE,QAAS,IAEXyf,EAAajb,EACb/R,KAWF,GARIghB,EAAMA,EAAM/gB,OAAS,GAAG8R,OAAS,KACnCiP,EAAMrgB,KAAK,CACT2d,MAAOwO,EACP/a,OAAQkQ,EACR1U,QAAS,IAIT0U,IAAWD,EACbhB,EAAM,GAAGjP,OAAS,EAClBiP,EAAM,GAAGjP,OAAS,SAGlB,GAAuC,MAAnCiP,EAAMA,EAAM/gB,OAAS,GAAG8R,WAC1B,IAAgB,IAAAmb,EAAAxtB,EAAAshB,GAAKmM,EAAAD,EAAAhtB,QAAAitB,EAAA/sB,KAAA+sB,EAAAD,EAAAhtB,OAAE,CAAlB,IAAMN,EAACutB,EAAAhtB,MACVP,EAAEmS,QAAWnS,EAAEmS,OAASiQ,IAAaC,EAASD,GAAa,sGAKjE,OAAOhB,iBC/IKoM,GAAuB9d,eAC/B+d,EAAW,IAAIC,QACrB,IAAqB,IAAAC,EAAA7tB,EAAA4P,GAAOke,EAAAD,EAAArtB,QAAAstB,EAAAptB,KAAAotB,EAAAD,EAAArtB,OAAE,CAAzB,IAAMiE,EAAMqpB,EAAArtB,UACf,IAAgB,IAAA2Q,GAAAC,OAAA,EAAArR,EAAAyE,EAAO+L,SAAMc,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAA1B,IAAMvB,EAACqS,EAAA7Q,MACVktB,EAASI,IAAI9uB,EAAEqR,2MAGnB,OAAOhR,MAAM0uB,KAAKL,YAOJM,GAAazG,EAAe0G,GAC1C,SAD0C,IAAAA,IAAAA,GAAA,GACtCA,IACe1G,EAAO2G,OAAM,SAAA1tB,GAAS,OAAAA,aAAiBqE,QAEtD,MAAO,OAKX,OADmB0iB,EAAO2G,OAAM,SAAA1tB,GAAS,MAAiB,iBAAVA,KAEvC,SAGF,6BCbT,SAAA2tB,IAAA,IAAA3lB,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YA2IW4I,EAAA4lB,YAAsB,SACtB5lB,EAAAijB,eAAyB,QAIzBjjB,EAAA6lB,UAAiB,OAQjB7lB,EAAA4K,eAAyB,EACzB5K,EAAA8lB,MAAaC,EAAAA,YACb/lB,EAAAmX,cAAuB,GAEvBnX,EAAAgmB,gBAA0B,EAC1BhmB,EAAAimB,gBAA0B,EAC1BjmB,EAAAkmB,kBAA4B,EAC5BlmB,EAAAmmB,mBAA6B,GAC7BnmB,EAAAomB,mBAA6B,GAK7BpmB,EAAAqmB,cAAwB,EACxBrmB,EAAAqR,iBAA2B,EAM1BrR,EAAAmV,SAA8B,IAAIvR,EAAAA,aAClC5D,EAAAoV,WAAgC,IAAIxR,EAAAA,aAkB9C5D,EAAAsJ,OAAS,CAAC,GAAI,GAAI,GAAI,IAEtBtJ,EAAAyiB,YAAsB,EACtBziB,EAAA0iB,WAAqB,EAKrB1iB,EAAAsmB,eAAyB,GAKzBtmB,EAAAumB,gBAA0B,YAnEYrvB,EAAAyuB,EAAApiB,GAqEtCoiB,EAAA5uB,UAAAkN,OAAA,WACEV,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEZA,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,OACdiZ,UAAWnrB,KAAKovB,MAChBhE,UAAWprB,KAAKqvB,MAChBhE,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKsvB,eACjB7D,WAAYzrB,KAAKuvB,eACjBljB,WAAYrM,KAAKwvB,OACjBziB,WAAY/M,KAAKqP,WACjBwc,eAAgB7rB,KAAK6rB,iBAGnB7rB,KAAKyvB,WACPzvB,KAAKiQ,KAAKvJ,QAAU1G,KAAKkvB,eAAiBlvB,KAAKkS,OAAO,GAAKlS,KAAKmvB,iBAGlEnvB,KAAKonB,QAAUpnB,KAAKqnB,aAChBrnB,KAAK0vB,iBACP1vB,KAAKonB,QAAUpnB,KAAK0vB,gBAGtB1vB,KAAK2vB,QAAU3vB,KAAK4vB,aACpB5vB,KAAK6vB,aAAe7vB,KAAK8vB,kBAEzB9vB,KAAK6e,OAAS7e,KAAKsnB,UAAUtnB,KAAKonB,QAASpnB,KAAKiQ,KAAKpJ,OACrD7G,KAAKif,OAASjf,KAAK+vB,UAAU/vB,KAAK2vB,QAAS3vB,KAAKiQ,KAAKvJ,QAErD1G,KAAKgwB,iBAELhwB,KAAKiwB,YACLjwB,KAAKiN,cAAgBjN,KAAKkwB,mBAE1BlwB,KAAKqS,UAAY,aAAarS,KAAKiQ,KAAK+b,QAAO,KAAKhsB,KAAKkS,OAAO,GAAE,IAElElS,KAAKmwB,WAAa,OAASzS,IAAKzI,WAChCjV,KAAKowB,SAAW,QAAQpwB,KAAKmwB,WAAU,KAGzC5B,EAAA5uB,UAAAqwB,eAAA,WACMhwB,KAAKyvB,WACPzvB,KAAKqwB,cAAgBrwB,KAAKiQ,KAAKpJ,MAC/B7G,KAAKswB,gBAAkBtwB,KAAKqnB,aAC5BrnB,KAAKuwB,eAAiBvwB,KAAKsnB,UAAUtnB,KAAKswB,gBAAiBtwB,KAAKqwB,eAChErwB,KAAKwwB,eAAiBxwB,KAAK+vB,UAAU/vB,KAAK2vB,QAAS3vB,KAAKkvB,gBACxDlvB,KAAKywB,kBAAoB,aAAazwB,KAAKiQ,KAAK+b,QAAO,MAAMhsB,KAAKkS,OAAO,GAAE,MAI/Eqc,EAAA5uB,UAAA0nB,WAAA,WACE,IAAIM,EAASkG,GAAuB7tB,KAAK+P,SAEzC/P,KAAKwN,UAAY4gB,GAAazG,GAC9B,IAMItS,EACA1C,EAPAoD,EAAS,GAgCb,MA9BuB,WAAnB/V,KAAKwN,YACPma,EAASA,EAAOrP,KAAI,SAAAmN,GAAK,OAAA3G,OAAO2G,OAKX,SAAnBzlB,KAAKwN,WAA2C,WAAnBxN,KAAKwN,YACpC6H,EAAMrV,KAAK0wB,UAAY1wB,KAAK0wB,UAAYtjB,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAQqmB,IAEpDhV,EAAM3S,KAAK2wB,UAAY3wB,KAAK2wB,UAAYvjB,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAQqmB,KAG/B,SAAnB3nB,KAAKwN,WACPuI,EAAS,CAAC,IAAI9Q,KAAKoQ,GAAM,IAAIpQ,KAAK0N,IAClC3S,KAAKgmB,KAAO1kB,EAAIqmB,GAAQiJ,MAAK,SAACC,EAAGxxB,GAC/B,IAAMyxB,EAAQD,EAAEE,UACVC,EAAQ3xB,EAAE0xB,UAChB,OAAID,EAAQE,EAAc,EACtBA,EAAQF,GAAe,EACpB,MAEmB,WAAnB9wB,KAAKwN,WACduI,EAAS,CAACV,EAAK1C,GAEf3S,KAAKgmB,KAAO1kB,EAAIqmB,GAAQiJ,MAAK,SAACC,EAAGxxB,GAAM,OAAAwxB,EAAIxxB,OAE3C0W,EAAS4R,EACT3nB,KAAKgmB,KAAO2B,GAGP5R,GAGTwY,EAAA5uB,UAAAiwB,WAAA,uBACQ7Z,EAAS,OAEf,IAAsB,IAAAxE,EAAApR,EAAAH,KAAK+P,SAAO0B,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAA/B,IAAMoP,EAAO0B,EAAA7Q,UAChB,IAAgB,IAAAgnB,GAAApW,OAAA,EAAArR,EAAA4P,EAAQY,SAAMkX,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAA3B,IAAMvB,EAACyoB,EAAAjnB,MACLmV,EAAO+R,SAAS1oB,EAAEwB,QACrBmV,EAAO3U,KAAKhC,EAAEwB,4MAKpB,IAAM+mB,EAAMrmB,EAAOyU,GAYnB,OAXK/V,KAAKixB,WACRtJ,EAAOvmB,KAAK,GAES,SAAnBpB,KAAKyuB,WACP9G,EAAOvmB,KAAKpB,KAAKyuB,WAOZ,CAJKzuB,KAAKkxB,UAAYlxB,KAAKkxB,UAAY9jB,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAQqmB,IAE9C3nB,KAAKmxB,UAAYnxB,KAAKmxB,UAAY/jB,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAQqmB,MAK5D4G,EAAA5uB,UAAAmwB,gBAAA,WACE,OAAO9vB,KAAK+P,QAAQuI,KAAI,SAAAlZ,GAAK,OAAAA,EAAEqR,SAGjC8d,EAAA5uB,UAAA2nB,UAAA,SAAUvR,EAAQlP,GAChB,IAAIyN,EAYJ,MAVuB,SAAnBtU,KAAKwN,UACP8G,EAAQyT,EAAAA,YACoB,WAAnB/nB,KAAKwN,UACd8G,EAAQ0T,EAAAA,cACoB,YAAnBhoB,KAAKwN,YACd8G,EAAQ2T,EAAAA,aAAavR,QAAQ,KAG/BpC,EAAM6K,MAAM,CAAC,EAAGtY,IAAQkP,OAAOA,GAExB/V,KAAKivB,aAAe3a,EAAM8c,OAAS9c,GAG5Cia,EAAA5uB,UAAAowB,UAAA,SAAUha,EAAQrP,GAChB,IAAM4N,EAAQ0T,EAAAA,cAAc7I,MAAM,CAACzY,EAAQ,IAAIqP,OAAOA,GACtD,OAAO/V,KAAKivB,aAAe3a,EAAM8c,OAAS9c,GAG5Cia,EAAA5uB,UAAAyuB,aAAA,SAAazG,WACP0J,GAAO,EACPC,GAAM,MACV,IAAoB,IAAAC,EAAApxB,EAAAwnB,GAAM6J,EAAAD,EAAA5wB,QAAA6wB,EAAA3wB,KAAA2wB,EAAAD,EAAA5wB,OAAE,CAAvB,IAAMC,EAAK4wB,EAAA5wB,MACTZ,KAAKyxB,OAAO7wB,KACfywB,GAAO,GAEY,iBAAVzwB,IACT0wB,GAAM,qGAIV,OAAID,EACK,OAGLC,EACK,SAGF,WAGT/C,EAAA5uB,UAAA8xB,OAAA,SAAO7wB,GACL,OAAIA,aAAiBqE,MAOvBspB,EAAA5uB,UAAA+xB,aAAA,SAAa3b,GACX/V,KAAK0vB,eAAiB3Z,EACtB/V,KAAKonB,QAAUpnB,KAAK0vB,eACpB1vB,KAAK6e,OAAS7e,KAAKsnB,UAAUtnB,KAAKonB,QAASpnB,KAAKiQ,KAAKpJ,QAGvD0nB,EAAA5uB,UAAAgyB,sBAAA,SAAsBtgB,GACpBrR,KAAK4xB,gBAAkBvgB,EAAKzQ,MAC5BZ,KAAK6xB,iBAIPtD,EAAA5uB,UAAAmyB,YAAA,WACE9xB,KAAK4xB,gBAAkB,KACvB5xB,KAAK6xB,iBAGPtD,EAAA5uB,UAAAigB,QAAA,SAAQ1O,EAAMP,GACRA,IACFO,EAAKP,OAASA,EAAOF,MAGvBzQ,KAAKsP,OAAOZ,KAAKwC,IAGnBqd,EAAA5uB,UAAAupB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MAGd8d,EAAA5uB,UAAAswB,UAAA,WACE,IAAIla,EAEFA,EADsB,YAApB/V,KAAKqP,WACErP,KAAK6vB,aAEL7vB,KAAK2vB,QAGhB3vB,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQpP,KAAKqP,WAAY0G,EAAQ/V,KAAKusB,eAG3EgC,EAAA5uB,UAAAuwB,iBAAA,WACE,IAAM6B,EAAO,CACXvkB,UAAWxN,KAAKqP,WAChB+P,YAAQpc,EACR+S,OAAQ,GACR4G,WAAO3Z,EACP0F,SAAU1I,KAAK6rB,gBAUjB,MARuB,YAAnBkG,EAAKvkB,WACPukB,EAAKhc,OAAS/V,KAAK6vB,aACnBkC,EAAK3S,OAASpf,KAAKof,OACnB2S,EAAKpV,MAAQ3c,KAAKwuB,cAElBuD,EAAKhc,OAAS/V,KAAK2vB,QACnBoC,EAAK3S,OAASpf,KAAKof,OAAO9K,OAErByd,GAGTxD,EAAA5uB,UAAAqyB,iBAAA,SAAiB5oB,OAAEvC,EAAKuC,EAAAvC,MACtB7G,KAAKsrB,WAAazkB,EAClB7G,KAAK6M,UAGP0hB,EAAA5uB,UAAAsyB,kBAAA,SAAkB7oB,OAAE1C,EAAM0C,EAAA1C,OACxB1G,KAAKqrB,YAAc3kB,EACnB1G,KAAK6M,UAGP0hB,EAAA5uB,UAAAuyB,WAAA,SAAW7gB,GACGrR,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,UAEvC,IAIXZ,KAAK+f,cAAaze,EAAA,CAAI+P,GAASrR,KAAK+f,eACpC/f,KAAK+d,SAASrP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,kBAGlDwO,EAAA5uB,UAAAyyB,aAAA,SAAa/gB,GACX,IAAM5F,EAAMzL,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,SAGlDZ,KAAK+f,cAAcpU,OAAOF,EAAK,GAC/BzL,KAAK+f,cAAaze,EAAOtB,KAAK+f,eAE9B/f,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,iBAGpDwO,EAAA5uB,UAAAkyB,cAAA,mBACE7xB,KAAK+f,cAAaze,EAAOtB,KAAK+f,mBAC9B,IAAoB,IAAA9I,EAAA9W,EAAAH,KAAK+f,eAAaxO,EAAA0F,EAAAtW,QAAA4Q,EAAA1Q,KAAA0Q,EAAA0F,EAAAtW,OAAE,CAAnC,IAAMmf,EAAKvO,EAAA3Q,MACdZ,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOkf,EAAOqS,QAAS,uGAEhDnyB,KAAK+f,cAAgB,OArVe9Q,wBAzIvCzF,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,wBACVC,SAAU,05IAmIVgE,gBAAiBC,EAAAA,wBAAwBC,OAEzCjE,cAAeC,EAAAA,kBAAkBC,2jDAGhCK,EAAAA,2BACAA,EAAAA,8BACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,wBACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,qBACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,kCACAA,EAAAA,mCACAA,EAAAA,mCACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,4BACAA,EAAAA,+BACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,wBAEAgE,EAAAA,2BACAA,EAAAA,gCAEAmkB,EAAAA,aAAY1tB,KAAA,CAAC,kDACb0tB,EAAAA,aAAY1tB,KAAA,CAAC,8CAwNb0F,EAAAA,aAAY1F,KAAA,CAAC,oCCxYhB,SAAA2tB,IAAA,IAAA1pB,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YA4IW4I,EAAA4mB,QAAS,EACT5mB,EAAA4lB,YAAsB,SACtB5lB,EAAAijB,eAAyB,QASzBjjB,EAAA4K,eAAyB,EACzB5K,EAAA8lB,MAAaC,EAAAA,YACb/lB,EAAAmX,cAAuB,GAEvBnX,EAAAgmB,gBAA0B,EAC1BhmB,EAAAimB,gBAA0B,EAC1BjmB,EAAAkmB,kBAA4B,EAC5BlmB,EAAAmmB,mBAA6B,GAC7BnmB,EAAAomB,mBAA6B,GAK7BpmB,EAAAqmB,cAAwB,EACxBrmB,EAAAqR,iBAA2B,EAE1BrR,EAAAmV,SAA8B,IAAIvR,EAAAA,aAClC5D,EAAAoV,WAAgC,IAAIxR,EAAAA,aAiB9C5D,EAAAsJ,OAAS,CAAC,GAAI,GAAI,GAAI,IAGtBtJ,EAAAyiB,YAAsB,EACtBziB,EAAA0iB,WAAqB,EAKrB1iB,EAAAsmB,eAAyB,GAKzBtmB,EAAAumB,gBAA0B,YA5DsBrvB,EAAAwyB,EAAAnmB,GA8DhDmmB,EAAA3yB,UAAAkN,OAAA,WAAA,IAAAjE,EAAA5I,KACEmM,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEZA,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,OACdiZ,UAAWnrB,KAAKovB,MAChBhE,UAAWprB,KAAKqvB,MAChBhE,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKsvB,eACjB7D,WAAYzrB,KAAKuvB,eACjBljB,WAAYrM,KAAKwvB,OACjBziB,WAAY/M,KAAKqP,WACjBwc,eAAgB7rB,KAAK6rB,iBAGnB7rB,KAAKyvB,WACPzvB,KAAKiQ,KAAKvJ,QAAU1G,KAAKkvB,eAAiBlvB,KAAKkS,OAAO,GAAKlS,KAAKmvB,iBAGlEnvB,KAAKonB,QAAUpnB,KAAKqnB,aAChBrnB,KAAK0vB,iBACP1vB,KAAKonB,QAAUpnB,KAAK0vB,gBAGtB1vB,KAAK2vB,QAAU3vB,KAAK4vB,aACpB5vB,KAAK6vB,aAAe7vB,KAAK8vB,kBAEzB9vB,KAAK6e,OAAS7e,KAAKsnB,UAAUtnB,KAAKonB,QAASpnB,KAAKiQ,KAAKpJ,OACrD7G,KAAKif,OAASjf,KAAK+vB,UAAU/vB,KAAK2vB,QAAS3vB,KAAKiQ,KAAKvJ,QAErD,mBAASjG,eACD4iB,EAAM4F,EAAKjD,KAAKvlB,GAClB8kB,EAAK,EAELkF,EAAQ,MACZ,IAAoB,IAAAlZ,GAAAghB,OAAA,EAAApyB,EAAA8oB,EAAKlZ,UAAO0B,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,EAC1BvB,GADGimB,EAAK5T,EAAA7Q,OACE+P,OAAOqP,MAAK,SAAA3O,GAC1B,IAAIwf,EAAIxf,EAAKZ,KACTpR,EAAIgkB,EAKR,MAJuB,SAAnBza,EAAK4E,YACPqjB,EAAIA,EAAE2B,UACNnzB,EAAIA,EAAEmzB,WAED3B,IAAMxxB,QAGborB,GAASrrB,EAAEwB,6GAIf,IAAoB,IAAAgnB,GAAApW,OAAA,EAAArR,EAAA8oB,EAAKlZ,UAAO8X,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAA7B,IAAM0kB,EACLjmB,GAAAA,GADKimB,EAAKwC,EAAAjnB,OACA+P,OAAOqP,MAAK,SAAA3O,GACxB,IAAIwf,EAAIxf,EAAKZ,KACTpR,EAAIgkB,EAKR,MAJuB,SAAnBza,EAAK4E,YACPqjB,EAAIA,EAAE2B,UACNnzB,EAAIA,EAAEmzB,WAED3B,IAAMxxB,OAIbD,EAAEmmB,GAAKA,EACPnmB,EAAE8f,GAAKqG,EAAKnmB,EAAEwB,MACd2kB,GAAMnmB,EAAEwB,QAERxB,EAAI,CACFqR,KAAM4S,EACNziB,MAAO,EACP2kB,GAAEA,EACFrG,GAAIqG,GAENF,EAAM1U,OAAOvP,KAAKhC,IAGhBqrB,EAAQ,GACVrrB,EAAEmmB,GAAa,IAAPnmB,EAAEmmB,GAAYkF,EACtBrrB,EAAE8f,GAAa,IAAP9f,EAAE8f,GAAYuL,IAEtBrrB,EAAEmmB,GAAK,EACPnmB,EAAE8f,GAAK,8GAlDJze,EAAI,EAAGA,EAAIT,KAAKgmB,KAAKtlB,OAAQD,MAA7BA,GAuDTT,KAAKgwB,iBAELhwB,KAAKiwB,YACLjwB,KAAKiN,cAAgBjN,KAAKkwB,mBAE1BlwB,KAAKqS,UAAY,aAAarS,KAAKiQ,KAAK+b,QAAO,MAAMhsB,KAAKkS,OAAO,GAAE,IAEnElS,KAAKmwB,WAAa,OAASzS,IAAKzI,WAChCjV,KAAKowB,SAAW,QAAQpwB,KAAKmwB,WAAU,KAGzCmC,EAAA3yB,UAAAqwB,eAAA,WACMhwB,KAAKyvB,WACPzvB,KAAKqwB,cAAgBrwB,KAAKiQ,KAAKpJ,MAC/B7G,KAAKswB,gBAAkBtwB,KAAKqnB,aAC5BrnB,KAAKuwB,eAAiBvwB,KAAKsnB,UAAUtnB,KAAKswB,gBAAiBtwB,KAAKqwB,eAChErwB,KAAKwwB,eAAiBxwB,KAAK+vB,UAAU/vB,KAAK2vB,QAAS3vB,KAAKkvB,gBACxDlvB,KAAKywB,kBAAoB,aAAazwB,KAAKiQ,KAAK+b,QAAO,MAAMhsB,KAAKkS,OAAO,GAAE,MAI/EogB,EAAA3yB,UAAA0nB,WAAA,WACE,IAAIM,EAASkG,GAAuB7tB,KAAK+P,SAEzC/P,KAAKwN,UAAY4gB,GAAazG,GAC9B,IAAI5R,EAAS,GAEb,GAAuB,SAAnB/V,KAAKwN,UAAsB,CAC7B,IAAM6H,EAAMjI,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAQqmB,IAClBhV,EAAMvF,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAQqmB,IACxB5R,EAAS,CAAC,IAAI9Q,KAAKoQ,GAAM,IAAIpQ,KAAK0N,IAClC3S,KAAKgmB,KAAO1kB,EAAIqmB,GAAQiJ,MAAK,SAACC,EAAGxxB,GAC/B,IAAMyxB,EAAQD,EAAEE,UACVC,EAAQ3xB,EAAE0xB,UAChB,OAAID,EAAQE,EAAc,EACtBA,EAAQF,GAAe,EACpB,UAEJ,GAAuB,WAAnB9wB,KAAKwN,UAAwB,CACtCma,EAASA,EAAOrP,KAAI,SAAAmN,GAAK,OAAA3G,OAAO2G,MAGhC1P,EAAS,CAFHV,EAAMjI,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAQqmB,IAClBhV,EAAMvF,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAQqmB,KAGxB3nB,KAAKgmB,KAAO1kB,EAAIqmB,GAAQiJ,MAAK,SAACC,EAAGxxB,GAAM,OAAAwxB,EAAIxxB,UAE3C0W,EAAS4R,EACT3nB,KAAKgmB,KAAO2B,EAGd,OAAO5R,GAGTuc,EAAA3yB,UAAAiwB,WAAA,WACE,MAAO,CAAC,EAAG,MAGb0C,EAAA3yB,UAAAmwB,gBAAA,WACE,OAAO9vB,KAAK+P,QAAQuI,KAAI,SAAAlZ,GAAK,OAAAA,EAAEqR,SAGjC6hB,EAAA3yB,UAAA2nB,UAAA,SAAUvR,EAAQlP,GAChB,IAAIyN,EAYJ,MAVuB,SAAnBtU,KAAKwN,UACP8G,EAAQyT,EAAAA,YACoB,WAAnB/nB,KAAKwN,UACd8G,EAAQ0T,EAAAA,cACoB,YAAnBhoB,KAAKwN,YACd8G,EAAQ2T,EAAAA,aAAavR,QAAQ,KAG/BpC,EAAM6K,MAAM,CAAC,EAAGtY,IAAQkP,OAAOA,GAExB/V,KAAKivB,aAAe3a,EAAM8c,OAAS9c,GAG5Cge,EAAA3yB,UAAAowB,UAAA,SAAUha,EAAQrP,GAChB,IAAM4N,EAAQ0T,EAAAA,cAAc7I,MAAM,CAACzY,EAAQ,IAAIqP,OAAOA,GACtD,OAAO/V,KAAKivB,aAAe3a,EAAM8c,OAAS9c,GAG5Cge,EAAA3yB,UAAA+xB,aAAA,SAAa3b,GACX/V,KAAK0vB,eAAiB3Z,EACtB/V,KAAKonB,QAAUpnB,KAAK0vB,eACpB1vB,KAAK6e,OAAS7e,KAAKsnB,UAAUtnB,KAAKonB,QAASpnB,KAAKiQ,KAAKpJ,QAGvDyrB,EAAA3yB,UAAAgyB,sBAAA,SAAsBtgB,GACpBrR,KAAK4xB,gBAAkBvgB,EAAKzQ,MAC5BZ,KAAK6xB,iBAIPS,EAAA3yB,UAAAmyB,YAAA,WACE9xB,KAAK4xB,gBAAkB,KACvB5xB,KAAK6xB,iBAGPS,EAAA3yB,UAAAigB,QAAA,SAAQ1O,EAAMP,GACRA,IACFO,EAAKP,OAASA,EAAOF,MAGvBzQ,KAAKsP,OAAOZ,KAAKwC,IAGnBohB,EAAA3yB,UAAAupB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MAGd6hB,EAAA3yB,UAAAswB,UAAA,WACE,IAAIla,EAEFA,EADsB,YAApB/V,KAAKqP,WACErP,KAAK6vB,aAEL7vB,KAAK2vB,QAGhB3vB,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQpP,KAAKqP,WAAY0G,EAAQ/V,KAAKusB,eAG3E+F,EAAA3yB,UAAAuwB,iBAAA,WACE,IAAM6B,EAAO,CACXvkB,UAAWxN,KAAKqP,WAChB+P,YAAQpc,EACR+S,OAAQ,GACR4G,WAAO3Z,EACP0F,SAAU1I,KAAK6rB,gBAUjB,MARuB,YAAnBkG,EAAKvkB,WACPukB,EAAKhc,OAAS/V,KAAK6vB,aACnBkC,EAAK3S,OAASpf,KAAKof,OACnB2S,EAAKpV,MAAQ3c,KAAKwuB,cAElBuD,EAAKhc,OAAS/V,KAAK2vB,QACnBoC,EAAK3S,OAASpf,KAAKof,OAAO9K,OAErByd,GAGTO,EAAA3yB,UAAAqyB,iBAAA,SAAiB5oB,OAAEvC,EAAKuC,EAAAvC,MACtB7G,KAAKsrB,WAAazkB,EAClB7G,KAAK6M,UAGPylB,EAAA3yB,UAAAsyB,kBAAA,SAAkB7oB,OAAE1C,EAAM0C,EAAA1C,OACxB1G,KAAKqrB,YAAc3kB,EACnB1G,KAAK6M,UAGPylB,EAAA3yB,UAAAuyB,WAAA,SAAW7gB,GACGrR,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,UAEvC,IAIXZ,KAAK+f,cAAaze,EAAA,CAAI+P,GAASrR,KAAK+f,eACpC/f,KAAK+d,SAASrP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,kBAGlDuS,EAAA3yB,UAAAyyB,aAAA,SAAa/gB,GACX,IAAM5F,EAAMzL,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,SAGlDZ,KAAK+f,cAAcpU,OAAOF,EAAK,GAC/BzL,KAAK+f,cAAaze,EAAOtB,KAAK+f,eAE9B/f,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,iBAGpDuS,EAAA3yB,UAAAkyB,cAAA,mBACE7xB,KAAK+f,cAAaze,EAAOtB,KAAK+f,mBAC9B,IAAoB,IAAA9I,EAAA9W,EAAAH,KAAK+f,eAAaxO,EAAA0F,EAAAtW,QAAA4Q,EAAA1Q,KAAA0Q,EAAA0F,EAAAtW,OAAE,CAAnC,IAAMmf,EAAKvO,EAAA3Q,MACdZ,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOkf,EAAOqS,QAAS,uGAEhDnyB,KAAK+f,cAAgB,OAzUyB9Q,wBA3IjDzF,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,mCACVC,SAAU,q9IAqIVgE,gBAAiBC,EAAAA,wBAAwBC,OAEzCjE,cAAeC,EAAAA,kBAAkBC,2jDAGhCK,EAAAA,2BACAA,EAAAA,8BACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,wBACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,qBACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,kCACAA,EAAAA,mCACAA,EAAAA,mCACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,4BACAA,EAAAA,+BACAA,EAAAA,wBAEAgE,EAAAA,2BACAA,EAAAA,gCAEAmkB,EAAAA,aAAY1tB,KAAA,CAAC,kDACb0tB,EAAAA,aAAY1tB,KAAA,CAAC,8CAmNb0F,EAAAA,aAAY1F,KAAA,CAAC,oCC9XhB,SAAA8tB,IAAA,IAAA7pB,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YA2IW4I,EAAA4mB,QAAS,EACT5mB,EAAA4lB,YAAsB,SACtB5lB,EAAAijB,eAAyB,QASzBjjB,EAAA4K,eAAyB,EACzB5K,EAAA8lB,MAAaC,EAAAA,YACb/lB,EAAAmX,cAAuB,GAEvBnX,EAAAgmB,gBAA0B,EAC1BhmB,EAAAimB,gBAA0B,EAC1BjmB,EAAAkmB,kBAA4B,EAC5BlmB,EAAAmmB,mBAA6B,GAC7BnmB,EAAAomB,mBAA6B,GAK7BpmB,EAAAqmB,cAAwB,EACxBrmB,EAAAqR,iBAA2B,EAM1BrR,EAAAmV,SAA8B,IAAIvR,EAAAA,aAClC5D,EAAAoV,WAAgC,IAAIxR,EAAAA,aAiB9C5D,EAAAsJ,OAAS,CAAC,GAAI,GAAI,GAAI,IAEtBtJ,EAAAyiB,YAAsB,EACtBziB,EAAA0iB,WAAqB,EAKrB1iB,EAAAsmB,eAAyB,GAKzBtmB,EAAAumB,gBAA0B,YA/DmBrvB,EAAA2yB,EAAAtmB,GAiE7CsmB,EAAA9yB,UAAAkN,OAAA,WAAA,IAAAjE,EAAA5I,KACEmM,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEZA,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,OACdiZ,UAAWnrB,KAAKovB,MAChBhE,UAAWprB,KAAKqvB,MAChBhE,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKsvB,eACjB7D,WAAYzrB,KAAKuvB,eACjBljB,WAAYrM,KAAKwvB,OACjBziB,WAAY/M,KAAKqP,WACjBwc,eAAgB7rB,KAAK6rB,iBAGnB7rB,KAAKyvB,WACPzvB,KAAKiQ,KAAKvJ,QAAU1G,KAAKkvB,eAAiBlvB,KAAKkS,OAAO,GAAKlS,KAAKmvB,iBAGlEnvB,KAAKonB,QAAUpnB,KAAKqnB,aAChBrnB,KAAK0vB,iBACP1vB,KAAKonB,QAAUpnB,KAAK0vB,gBAGtB1vB,KAAK2vB,QAAU3vB,KAAK4vB,aACpB5vB,KAAK6vB,aAAe7vB,KAAK8vB,kBAEzB9vB,KAAK6e,OAAS7e,KAAKsnB,UAAUtnB,KAAKonB,QAASpnB,KAAKiQ,KAAKpJ,OACrD7G,KAAKif,OAASjf,KAAK+vB,UAAU/vB,KAAK2vB,QAAS3vB,KAAKiQ,KAAKvJ,QAErD,mBAASjG,WACD4iB,EAAM4F,EAAKjD,KAAKvlB,GAClB8kB,EAAK,MACT,IAAoB,IAAAtO,GAAAsb,OAAA,EAAApyB,EAAA8oB,EAAKlZ,UAAOwB,EAAA0F,EAAAtW,QAAA4Q,EAAA1Q,KAAA0Q,EAAA0F,EAAAtW,OAAE,CAA7B,IAAM0kB,EAAK9T,EAAA3Q,MACVxB,EAAIimB,EAAM1U,OAAOqP,MAAK,SAAA3O,GACxB,IAAIwf,EAAIxf,EAAKZ,KACTpR,EAAIgkB,EAKR,MAJuB,SAAnBza,EAAK4E,YACPqjB,EAAIA,EAAE2B,UACNnzB,EAAIA,EAAEmzB,WAED3B,IAAMxxB,KAGXD,GACFA,EAAEmmB,GAAKA,EACPnmB,EAAE8f,GAAKqG,EAAKnmB,EAAEwB,MACd2kB,GAAMnmB,EAAEwB,QAERxB,EAAI,CACFqR,KAAM4S,EACNziB,MAAO,EACP2kB,GAAEA,EACFrG,GAAIqG,GAENF,EAAM1U,OAAOvP,KAAKhC,+GAzBfqB,EAAI,EAAGA,EAAIT,KAAKgmB,KAAKtlB,OAAQD,MAA7BA,GA8BTT,KAAKgwB,iBAELhwB,KAAKiwB,YACLjwB,KAAKiN,cAAgBjN,KAAKkwB,mBAE1BlwB,KAAKqS,UAAY,aAAarS,KAAKiQ,KAAK+b,QAAO,MAAMhsB,KAAKkS,OAAO,GAAE,IAEnElS,KAAKmwB,WAAa,OAASzS,IAAKzI,WAChCjV,KAAKowB,SAAW,QAAQpwB,KAAKmwB,WAAU,KAGzCsC,EAAA9yB,UAAAqwB,eAAA,WACMhwB,KAAKyvB,WACPzvB,KAAKqwB,cAAgBrwB,KAAKiQ,KAAKpJ,MAC/B7G,KAAKswB,gBAAkBtwB,KAAKqnB,aAC5BrnB,KAAKuwB,eAAiBvwB,KAAKsnB,UAAUtnB,KAAKswB,gBAAiBtwB,KAAKqwB,eAChErwB,KAAKwwB,eAAiBxwB,KAAK+vB,UAAU/vB,KAAK2vB,QAAS3vB,KAAKkvB,gBACxDlvB,KAAKywB,kBAAoB,aAAazwB,KAAKiQ,KAAK+b,QAAO,MAAMhsB,KAAKkS,OAAO,GAAE,MAI/EugB,EAAA9yB,UAAA0nB,WAAA,WACE,IAAIM,EAASkG,GAAuB7tB,KAAK+P,SAEzC/P,KAAKwN,UAAY4gB,GAAazG,GAC9B,IAMItS,EACA1C,EAPAoD,EAAS,GAgCb,MA9BuB,WAAnB/V,KAAKwN,YACPma,EAASA,EAAOrP,KAAI,SAAAmN,GAAK,OAAA3G,OAAO2G,OAKX,SAAnBzlB,KAAKwN,WAA2C,WAAnBxN,KAAKwN,YACpC6H,EAAMrV,KAAK0wB,UAAY1wB,KAAK0wB,UAAYtjB,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAQqmB,IAEpDhV,EAAM3S,KAAK2wB,UAAY3wB,KAAK2wB,UAAYvjB,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAQqmB,KAG/B,SAAnB3nB,KAAKwN,WACPuI,EAAS,CAAC,IAAI9Q,KAAKoQ,GAAM,IAAIpQ,KAAK0N,IAClC3S,KAAKgmB,KAAO1kB,EAAIqmB,GAAQiJ,MAAK,SAACC,EAAGxxB,GAC/B,IAAMyxB,EAAQD,EAAEE,UACVC,EAAQ3xB,EAAE0xB,UAChB,OAAID,EAAQE,EAAc,EACtBA,EAAQF,GAAe,EACpB,MAEmB,WAAnB9wB,KAAKwN,WACduI,EAAS,CAACV,EAAK1C,GAEf3S,KAAKgmB,KAAO1kB,EAAIqmB,GAAQiJ,MAAK,SAACC,EAAGxxB,GAAM,OAAAwxB,EAAIxxB,OAE3C0W,EAAS4R,EACT3nB,KAAKgmB,KAAO2B,GAGP5R,GAGT0c,EAAA9yB,UAAAiwB,WAAA,WAGE,IAHF,IAAAhnB,EAAA5I,KACQ+V,EAAS,cAENtV,WACD4iB,EAAMqP,EAAK1M,KAAKvlB,GAClB+pB,EAAM,MACV,IAAoB,IAAAvT,GAAAzF,OAAA,EAAArR,EAAAuyB,EAAK3iB,UAAOwB,EAAA0F,EAAAtW,QAAA4Q,EAAA1Q,KAAA0Q,EAAA0F,EAAAtW,OAAE,CAA7B,IACGvB,EADQmS,EAAA3Q,MACE+P,OAAOqP,MAAK,SAAA3O,GAC1B,IAAIwf,EAAIxf,EAAKZ,KACTpR,EAAIgkB,EAKR,MAJuB,SAAnBza,EAAK4E,YACPqjB,EAAIA,EAAE2B,UACNnzB,EAAIA,EAAEmzB,WAED3B,IAAMxxB,KAGXD,IACForB,GAAOprB,EAAEwB,yGAIbmV,EAAO3U,KAAKopB,WAnBL/pB,EAAI,EAAGA,EAAIT,KAAKgmB,KAAKtlB,OAAQD,MAA7BA,GAyBT,MAAO,CAHKT,KAAKkxB,UAAYlxB,KAAKkxB,UAAY9jB,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAA,CAAK,GAAMyU,IAEjD/V,KAAKmxB,UAAYnxB,KAAKmxB,UAAY/jB,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAQyU,MAI5D0c,EAAA9yB,UAAAmwB,gBAAA,WACE,OAAO9vB,KAAK+P,QAAQuI,KAAI,SAAAlZ,GAAK,OAAAA,EAAEqR,SAGjCgiB,EAAA9yB,UAAA2nB,UAAA,SAAUvR,EAAQlP,GAChB,IAAIyN,EAYJ,MAVuB,SAAnBtU,KAAKwN,UACP8G,EAAQyT,EAAAA,YACoB,WAAnB/nB,KAAKwN,UACd8G,EAAQ0T,EAAAA,cACoB,YAAnBhoB,KAAKwN,YACd8G,EAAQ2T,EAAAA,aAAavR,QAAQ,KAG/BpC,EAAM6K,MAAM,CAAC,EAAGtY,IAAQkP,OAAOA,GAExB/V,KAAKivB,aAAe3a,EAAM8c,OAAS9c,GAG5Cme,EAAA9yB,UAAAowB,UAAA,SAAUha,EAAQrP,GAChB,IAAM4N,EAAQ0T,EAAAA,cAAc7I,MAAM,CAACzY,EAAQ,IAAIqP,OAAOA,GACtD,OAAO/V,KAAKivB,aAAe3a,EAAM8c,OAAS9c,GAG5Cme,EAAA9yB,UAAA+xB,aAAA,SAAa3b,GACX/V,KAAK0vB,eAAiB3Z,EACtB/V,KAAKonB,QAAUpnB,KAAK0vB,eACpB1vB,KAAK6e,OAAS7e,KAAKsnB,UAAUtnB,KAAKonB,QAASpnB,KAAKiQ,KAAKpJ,QAGvD4rB,EAAA9yB,UAAAgyB,sBAAA,SAAsBtgB,GACpBrR,KAAK4xB,gBAAkBvgB,EAAKzQ,MAC5BZ,KAAK6xB,iBAIPY,EAAA9yB,UAAAmyB,YAAA,WACE9xB,KAAK4xB,gBAAkB,KACvB5xB,KAAK6xB,iBAGPY,EAAA9yB,UAAAigB,QAAA,SAAQ1O,EAAMP,GACRA,IACFO,EAAKP,OAASA,EAAOF,MAGvBzQ,KAAKsP,OAAOZ,KAAKwC,IAGnBuhB,EAAA9yB,UAAAupB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MAGdgiB,EAAA9yB,UAAAswB,UAAA,WACE,IAAIla,EAEFA,EADsB,YAApB/V,KAAKqP,WACErP,KAAK6vB,aAEL7vB,KAAK2vB,QAGhB3vB,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQpP,KAAKqP,WAAY0G,EAAQ/V,KAAKusB,eAG3EkG,EAAA9yB,UAAAuwB,iBAAA,WACE,IAAM6B,EAAO,CACXvkB,UAAWxN,KAAKqP,WAChB+P,YAAQpc,EACR+S,OAAQ,GACR4G,WAAO3Z,EACP0F,SAAU1I,KAAK6rB,gBAUjB,MARuB,YAAnBkG,EAAKvkB,WACPukB,EAAKhc,OAAS/V,KAAK6vB,aACnBkC,EAAK3S,OAASpf,KAAKof,OACnB2S,EAAKpV,MAAQ3c,KAAKwuB,cAElBuD,EAAKhc,OAAS/V,KAAK2vB,QACnBoC,EAAK3S,OAASpf,KAAKof,OAAO9K,OAErByd,GAGTU,EAAA9yB,UAAAqyB,iBAAA,SAAiB5oB,OAAEvC,EAAKuC,EAAAvC,MACtB7G,KAAKsrB,WAAazkB,EAClB7G,KAAK6M,UAGP4lB,EAAA9yB,UAAAsyB,kBAAA,SAAkB7oB,OAAE1C,EAAM0C,EAAA1C,OACxB1G,KAAKqrB,YAAc3kB,EACnB1G,KAAK6M,UAGP4lB,EAAA9yB,UAAAuyB,WAAA,SAAW7gB,GACGrR,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,UAEvC,IAIXZ,KAAK+f,cAAaze,EAAA,CAAI+P,GAASrR,KAAK+f,eACpC/f,KAAK+d,SAASrP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,kBAGlD0S,EAAA9yB,UAAAyyB,aAAA,SAAa/gB,GACX,IAAM5F,EAAMzL,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,SAGlDZ,KAAK+f,cAAcpU,OAAOF,EAAK,GAC/BzL,KAAK+f,cAAaze,EAAOtB,KAAK+f,eAE9B/f,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,iBAGpD0S,EAAA9yB,UAAAkyB,cAAA,mBACE7xB,KAAK+f,cAAaze,EAAOtB,KAAK+f,mBAC9B,IAAoB,IAAA9I,EAAA9W,EAAAH,KAAK+f,eAAaxO,EAAA0F,EAAAtW,QAAA4Q,EAAA1Q,KAAA0Q,EAAA0F,EAAAtW,OAAE,CAAnC,IAAMmf,EAAKvO,EAAA3Q,MACdZ,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOkf,EAAOqS,QAAS,uGAEhDnyB,KAAK+f,cAAgB,OArVsB9Q,YC9J/B0jB,GAAWzhB,EAAM0hB,EAAUlJ,GACzC,YADyC,IAAAA,IAAAA,EAAA,OAClCxY,EAAK0f,MAAK,SAACC,EAAGxxB,GACnB,MAAkB,QAAdqqB,EACKmH,EAAE+B,GAAYvzB,EAAEuzB,GAEhBvzB,EAAEuzB,GAAY/B,EAAE+B,eAKbC,GAAa3hB,EAAM0hB,EAAUlJ,EAAmB3T,GAC9D,YAD2C,IAAA2T,IAAAA,EAAA,OACpCxY,EAAK0f,MAAK,SAACC,EAAGxxB,GACnB,IAAMyzB,EAAOjC,EAAE+B,GACTG,EAAO1zB,EAAEuzB,GAETI,EAAOjd,EAAOrK,QAAQonB,GACtBG,EAAOld,EAAOrK,QAAQqnB,GAE5B,MAAkB,QAAdrJ,EACKsJ,EAAOC,EAEPA,EAAOD,cAKJE,GAAWhiB,EAAM0hB,EAAUlJ,GACzC,YADyC,IAAAA,IAAAA,EAAA,OAClCxY,EAAK0f,MAAK,SAACC,EAAGxxB,GACnB,IAAMyxB,EAAQD,EAAE+B,GAAU7B,UACpBC,EAAQ3xB,EAAEuzB,GAAU7B,UAE1B,MAAkB,QAAdrH,EACEoH,EAAQE,EAAc,EACtBA,EAAQF,GAAe,EACpB,EAEHA,EAAQE,GAAe,EACvBA,EAAQF,EAAc,EACnB,0BDlBZtnB,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,gCACVC,SAAU,07IAoIVgE,gBAAiBC,EAAAA,wBAAwBC,OAEzCjE,cAAeC,EAAAA,kBAAkBC,2jDAGhCK,EAAAA,2BACAA,EAAAA,8BACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,wBACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,qBACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,kCACAA,EAAAA,mCACAA,EAAAA,mCACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,4BACAA,EAAAA,+BACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,wBAEAgE,EAAAA,2BACAA,EAAAA,gCAEAmkB,EAAAA,aAAY1tB,KAAA,CAAC,kDACb0tB,EAAAA,aAAY1tB,KAAA,CAAC,8CA2Nb0F,EAAAA,aAAY1F,KAAA,CAAC,mCEhZhB,SAAAwuB,IAwBWnzB,KAAAyuB,UAAiB,OAGjBzuB,KAAAozB,SAAmB,EACnBpzB,KAAAqzB,YAAsB,EAItBrzB,KAAAsM,YAAsB,EAErBtM,KAAAsP,OAAS,IAAI9C,EAAAA,oBASvB2mB,EAAAxzB,UAAAgN,YAAA,SAAYC,GACV5M,KAAK6M,UAGPsmB,EAAAxzB,UAAAkN,OAAA,WAAA,IAGMymB,EACAC,EAJN3qB,EAAA5I,KACEA,KAAKwzB,iBAKL,IAAMC,EAAY,SAAAr0B,GAChB,IAAMoR,EAAQpR,EAAEqR,KAChB,OAAO7H,EAAKiW,OAAOrO,IAGjBxQ,KAAKozB,SAAWpzB,KAAKqzB,YACvBC,EAAcI,EAAAA,OACXjhB,EAAEghB,GACFE,IAAG,SAACv0B,EAAGqB,GAAM,OAAAmI,EAAKqW,OAAO7f,EAAEmmB,OAC3BtN,IAAG,SAAC7Y,EAAGqB,GAAM,OAAAmI,EAAKqW,OAAO7f,EAAE8f,OAE9BqU,EAAeG,EAAAA,OACZjhB,EAAEghB,GACFE,IAAG,SAAAv0B,GAAK,OAAAwJ,EAAKqW,OAAOE,QAAQ,MAC5BlH,IAAG,SAAA7Y,GAAK,OAAAwJ,EAAKqW,OAAOE,QAAQ,QAE/BmU,EAAcI,EAAAA,OACXjhB,EAAEghB,GACFE,IAAG,WAAM,MAAoB,SAAnB/qB,EAAK6lB,UAAuB7lB,EAAKqW,OAAOE,QAAQ,GAAKvW,EAAKqW,OAAOrW,EAAK6lB,cAChFxW,IAAG,SAAA7Y,GAAK,OAAAwJ,EAAKqW,OAAO7f,EAAEwB,UAEzB2yB,EAAeG,EAAAA,OACZjhB,EAAEghB,GACFE,IAAG,SAAAv0B,GAAK,MAAoB,SAAnBwJ,EAAK6lB,UAAuB7lB,EAAKqW,OAAOE,QAAQ,GAAKvW,EAAKqW,OAAOrW,EAAK6lB,cAC/ExW,IAAG,SAAA7Y,GAAK,MAAoB,SAAnBwJ,EAAK6lB,UAAuB7lB,EAAKqW,OAAOE,QAAQ,GAAKvW,EAAKqW,OAAOrW,EAAK6lB,eAGpF6E,EAAY5E,MAAM1uB,KAAK0uB,OACvB6E,EAAa7E,MAAM1uB,KAAK0uB,OAExB1uB,KAAKgO,QAAU,GAEf,IAAIkD,EAAOlR,KAAKkR,KAAKP,OAEnBO,EADqB,WAAnBlR,KAAKwN,UACAmlB,GAAWzhB,EAAM,QACI,SAAnBlR,KAAKwN,UACP0lB,GAAWhiB,EAAM,QAEjB2hB,GAAa3hB,EAAM,OAAQ,MAAOlR,KAAK6e,OAAO9I,UAGvD/V,KAAKgiB,KAAOsR,EAAYpiB,GACxBlR,KAAK6hB,aAAe0R,EAAariB,IAGnCiiB,EAAAxzB,UAAA6zB,eAAA,WACE,GAA8B,WAA1BxzB,KAAKof,OAAO5R,UAEd,GADAxN,KAAKuhB,aAAc,EACfvhB,KAAKozB,SAAWpzB,KAAKqzB,WAAY,CACnC,IAAMO,EAAW5zB,KAAKkR,KAAKP,OAAO2H,KAAI,SAAAlZ,GAAK,OAAAA,EAAEmmB,MACvCsO,EAAW7zB,KAAKkR,KAAKP,OAAO2H,KAAI,SAAAlZ,GAAK,OAAAA,EAAE8f,MACvCvM,EAAMvF,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAQuyB,IAClBxe,EAAMjI,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAQsyB,IACxB5zB,KAAKwf,cAAgBxf,KAAKof,OAAOgO,uBAAuBza,EAAK0C,OACxD,CACL,IAAMsS,EAAS3nB,KAAKkR,KAAKP,OAAO2H,KAAI,SAAAlZ,GAAK,OAAAA,EAAEwB,SACrC+R,EAAMvF,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAQqmB,IACxB3nB,KAAKwf,cAAgBxf,KAAKof,OAAOgO,uBAAuBza,QAG1D3S,KAAKuhB,aAAc,EACnBvhB,KAAKwf,mBAAgBxc,GAIzBmwB,EAAAxzB,UAAAkgB,SAAA,SAASC,GACP,QAAK9f,KAAK+f,oBAIM/c,IAHHhD,KAAK+f,cAAcC,MAAK,SAAA5gB,GACnC,OAAO0gB,EAAMrP,OAASrR,EAAEqR,SAK5B0iB,EAAAxzB,UAAAm0B,WAAA,SAAWhU,GACT,SAAK9f,KAAK+f,eAA+C,IAA9B/f,KAAK+f,cAAcrf,cAI9BsC,IAHHhD,KAAK+f,cAAcC,MAAK,SAAA5gB,GACnC,OAAO0gB,EAAMrP,OAASrR,EAAEqR,mCAjI7BjH,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,4BACVC,SAAU,gaAgBVgE,gBAAiBC,EAAAA,wBAAwBC,0CAGxC1D,EAAAA,sBACAA,EAAAA,sBACAA,EAAAA,yBACAA,EAAAA,sBACAA,EAAAA,yBACAA,EAAAA,uBACAA,EAAAA,0BACAA,EAAAA,wBACAA,EAAAA,qBACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,sBAEAgE,EAAAA,iBCnCH,kCALCmL,EAAAA,SAAQ1U,KAAA,CAAC,CACR2U,QAAS,CAACya,IACVva,aAAc,CAAC+U,GAAoB+D,GAA8BG,GAA2BU,IAC5F1Z,QAAS,CAAC8U,GAAoB+D,GAA8BG,GAA2BU,0BC2DvF,SAAAa,EAAYxxB,GAtBHxC,KAAAi0B,YAAsB,EACtBj0B,KAAAqhB,UAAoB,EACpBrhB,KAAAwS,OAAS,EACTxS,KAAA6f,UAAoB,EAEpB7f,KAAAsM,YAAsB,EAEtBtM,KAAAk0B,eAAyB,EAExBl0B,KAAAsP,OAAS,IAAI9C,EAAAA,aACbxM,KAAA+d,SAAW,IAAIvR,EAAAA,aACfxM,KAAAge,WAAa,IAAIxR,EAAAA,aAQ3BxM,KAAAuhB,aAAuB,EACvBvhB,KAAAm0B,SAAmB,EAGjBn0B,KAAKwC,QAAUA,EAAQC,qBAGzBuxB,EAAAr0B,UAAAgN,YAAA,SAAYC,GACNA,EAAQqnB,YACVj0B,KAAKwhB,gBAEPxhB,KAAK6M,UAGPmnB,EAAAr0B,UAAAkN,OAAA,WACE7M,KAAKke,WAAa,OAASR,IAAKzI,WAChCjV,KAAKme,aAAe,QAAQne,KAAKke,WAAU,IAEvCle,KAAKqhB,UAAYrhB,KAAKyhB,OACxBzhB,KAAKwf,cAAgBxf,KAAK0hB,cAC1B1hB,KAAKuhB,aAAc,GAEnBvhB,KAAKuhB,aAAc,EAGrBvhB,KAAK2hB,eACL3hB,KAAKo0B,kBAGPJ,EAAAr0B,UAAA6hB,cAAA,WACExhB,KAAKgiB,KAAOhiB,KAAKq0B,kBACjB9uB,WAAWvF,KAAK6M,OAAOlE,KAAK3I,MAAO,MAGrCg0B,EAAAr0B,UAAAgiB,aAAA,WACE,IAAMG,EAAOxS,EAAAA,OAAOtP,KAAKwC,SAAS8M,OAAO,QACnC0S,EAAOhiB,KAAKs0B,UACdt0B,KAAKsM,WACPwV,EAAKhU,aAAarI,SAAS,KAAKsc,KAAK,IAAKC,GAE1CF,EAAKC,KAAK,IAAKC,IAInBgS,EAAAr0B,UAAA+hB,YAAA,WACE,OAAI1hB,KAAKyhB,MACAzhB,KAAKyhB,MAGP,CACL,CACEjP,OAAQ,EACRuM,MAAO/e,KAAKwW,KACZxI,QAAShO,KAAKu0B,mBAEhB,CACE/hB,OAAQ,IACRuM,MAAO/e,KAAKwW,KACZxI,QAAS,KAKfgmB,EAAAr0B,UAAA00B,gBAAA,WACE,IAAKr0B,KAAKsM,WACR,OAAOtM,KAAKs0B,UAGd,IACItS,EADAzC,EAASvf,KAAKw0B,YAmBlB,OAhBIx0B,KAAKi0B,WACkB,aAArBj0B,KAAK8gB,aACPvB,EAASnS,KAAKiI,IAAIrV,KAAK0G,OAAQ6Y,GAC/ByC,EAAOlL,EAAY9W,KAAKyS,EAAGzS,KAAKuS,EAAIvS,KAAK0G,OAAQ1G,KAAK6G,MAAO,EAAG,EAAG7G,KAAKy0B,QAC1C,eAArBz0B,KAAK8gB,cACdvB,EAASnS,KAAKiI,IAAIrV,KAAK6G,MAAO0Y,GAC9ByC,EAAOlL,EAAY9W,KAAKyS,EAAGzS,KAAKuS,EAAG,EAAGvS,KAAK0G,OAAQ,EAAG1G,KAAKy0B,QAGpC,aAArBz0B,KAAK8gB,YACPkB,EAAOlL,EAAY9W,KAAKyS,EAAGzS,KAAKuS,EAAIvS,KAAK0G,OAAQ1G,KAAK6G,MAAO,EAAG,EAAG7G,KAAKy0B,OAC1C,eAArBz0B,KAAK8gB,cACdkB,EAAOlL,EAAY9W,KAAKyS,EAAGzS,KAAKuS,EAAG,EAAGvS,KAAK0G,OAAQ,EAAG1G,KAAKy0B,QAIxDzS,GAGTgS,EAAAr0B,UAAA20B,QAAA,WACE,IACItS,EADAzC,EAASvf,KAAKw0B,YAelB,OAZIx0B,KAAKi0B,WACkB,aAArBj0B,KAAK8gB,aACPvB,EAASnS,KAAKiI,IAAIrV,KAAK0G,OAAQ6Y,GAC/ByC,EAAOlL,EAAY9W,KAAKyS,EAAGzS,KAAKuS,EAAGvS,KAAK6G,MAAO7G,KAAK0G,OAAQ6Y,EAAQvf,KAAKy0B,QAC3C,eAArBz0B,KAAK8gB,cACdvB,EAASnS,KAAKiI,IAAIrV,KAAK6G,MAAO0Y,GAC9ByC,EAAOlL,EAAY9W,KAAKyS,EAAGzS,KAAKuS,EAAGvS,KAAK6G,MAAO7G,KAAK0G,OAAQ6Y,EAAQvf,KAAKy0B,QAG3EzS,EAAOlL,EAAY9W,KAAKyS,EAAGzS,KAAKuS,EAAGvS,KAAK6G,MAAO7G,KAAK0G,OAAQ6Y,EAAQvf,KAAKy0B,OAGpEzS,GAGTgS,EAAAr0B,UAAA60B,UAAA,WACE,IAAIjV,EAAS,EAMb,OAJIvf,KAAKi0B,YAAcj0B,KAAK0G,OAAS,GAAK1G,KAAK6G,MAAQ,IACrD0Y,EAASnS,KAAKC,MAAMD,KAAKiI,IAAI,EAAGrV,KAAK0G,OAAS,EAAG1G,KAAK6G,MAAQ,KAGzD0Y,GAGTyU,EAAAr0B,UAAA40B,gBAAA,WACE,OAAIv0B,KAAKi0B,WACA,GAEA,IAIX30B,OAAA0G,eAAIguB,EAAAr0B,UAAA,QAAK,KAAT,WACE,IAAI80B,EAAQ,EAAC,GAAO,GAAO,GAAO,GAgBlC,OAfIz0B,KAAKi0B,aACkB,aAArBj0B,KAAK8gB,YAEL2T,EADEz0B,KAAKkR,KAAKtQ,MAAQ,EACZ,EAAC,GAAM,GAAM,GAAO,GAEpB,EAAC,GAAO,GAAO,GAAM,GAED,eAArBZ,KAAK8gB,cAEZ2T,EADEz0B,KAAKkR,KAAKtQ,MAAQ,EACZ,EAAC,GAAO,GAAM,GAAO,GAErB,EAAC,GAAM,GAAO,GAAM,KAI3B6zB,mCAITT,EAAAr0B,UAAA6b,aAAA,WACExb,KAAK+d,SAASrP,KAAK1O,KAAKkR,OAI1B8iB,EAAAr0B,UAAA+b,aAAA,WACE1b,KAAKge,WAAWtP,KAAK1O,KAAKkR,OAGpB8iB,EAAAr0B,UAAAy0B,eAAA,WACNp0B,KAAKm0B,QACHn0B,KAAKk0B,gBACkB,aAArBl0B,KAAK8gB,aAA8C,IAAhB9gB,KAAK0G,QAClB,eAArB1G,KAAK8gB,aAA+C,IAAf9gB,KAAK6G,kCAjNlD2C,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,oBACVC,SAAU,ifAiBVgE,gBAAiBC,EAAAA,wBAAwBC,qDA/BzC9D,EAAAA,6CAkCCI,EAAAA,oBACAA,EAAAA,qBACAA,EAAAA,sBACAA,EAAAA,iBACAA,EAAAA,iBACAA,EAAAA,2BACAA,EAAAA,0BACAA,EAAAA,wBACAA,EAAAA,sBACAA,EAAAA,wBACAA,EAAAA,qBACAA,EAAAA,0BACAA,EAAAA,yBACAA,EAAAA,6BACAA,EAAAA,sBAEAgE,EAAAA,yBACAA,EAAAA,2BACAA,EAAAA,6BA2JA7D,EAAAA,aAAY1F,KAAA,CAAC,oCAKb0F,EAAAA,aAAY1F,KAAA,CAAC,oCC1MhB,SAAA+vB,IAAA,IAAA9rB,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YAwEW4I,EAAA4mB,QAAS,EACT5mB,EAAA4lB,YAAsB,SACtB5lB,EAAAijB,eAAyB,QAOzBjjB,EAAAqR,iBAA2B,EAE3BrR,EAAA4K,eAAyB,EACzB5K,EAAAmX,cAAuB,GAEvBnX,EAAAgmB,gBAA0B,EAC1BhmB,EAAAimB,gBAA0B,EAC1BjmB,EAAAkmB,kBAA4B,EAC5BlmB,EAAAmmB,mBAA6B,GAC7BnmB,EAAAomB,mBAA6B,GAK7BpmB,EAAA+rB,WAAa,EACb/rB,EAAAqmB,cAAwB,EACxBrmB,EAAAqrB,YAAsB,EAGtBrrB,EAAAgsB,eAAyB,EAEzBhsB,EAAAsrB,eAAyB,EAExBtrB,EAAAmV,SAA8B,IAAIvR,EAAAA,aAClC5D,EAAAoV,WAAgC,IAAIxR,EAAAA,aAW9C5D,EAAAsJ,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBtJ,EAAAyiB,YAAsB,EACtBziB,EAAA0iB,WAAqB,EAErB1iB,EAAAisB,kBAAyB,CAAEC,SAAU,EAAGC,SAAU,YAjDRj1B,EAAA40B,EAAAvoB,GAmD1CuoB,EAAA/0B,UAAAkN,OAAA,WACEV,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEPA,KAAK40B,gBACR50B,KAAK60B,kBAAoB,CAAEC,SAAU,EAAGC,SAAU,IAGpD/0B,KAAKkS,OAAS,CAAC,GAAI,GAAKlS,KAAK60B,kBAAkBE,SAAU,GAAI,GAAK/0B,KAAK60B,kBAAkBC,UAEzF90B,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,OACdiZ,UAAWnrB,KAAKovB,MAChBhE,UAAWprB,KAAKqvB,MAChBhE,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKsvB,eACjB7D,WAAYzrB,KAAKuvB,eACjBljB,WAAYrM,KAAKwvB,OACjBziB,WAAY/M,KAAKqP,WACjBwc,eAAgB7rB,KAAK6rB,iBAGvB7rB,KAAKsQ,cAELtQ,KAAK6e,OAAS7e,KAAKsnB,YACnBtnB,KAAKif,OAASjf,KAAK+vB,YAEnB/vB,KAAKiwB,YACLjwB,KAAKiN,cAAgBjN,KAAKkwB,mBAE1BlwB,KAAKqS,UAAY,aAAarS,KAAKiQ,KAAK+b,QAAO,MAAMhsB,KAAKkS,OAAO,GAAE,KAGrEwiB,EAAA/0B,UAAA2nB,UAAA,WACEtnB,KAAKonB,QAAUpnB,KAAKqnB,aAEpB,IAAM/S,EAAQ0T,EAAAA,cAAc7I,MAAM,CAAC,EAAGnf,KAAKiQ,KAAKpJ,QAAQkP,OAAO/V,KAAKonB,SAEpE,OAAOpnB,KAAKivB,aAAe3a,EAAM8c,OAAS9c,GAG5CogB,EAAA/0B,UAAAowB,UAAA,WACE/vB,KAAK2vB,QAAU3vB,KAAK4vB,aACpB,IAAMloB,EAAU1H,KAAK2vB,QAAQjvB,QAAUV,KAAKiQ,KAAKvJ,OAAS1G,KAAK20B,WAAa,GAE5E,OAAOrH,EAAAA,YAAY0H,WAAW,CAAC,EAAGh1B,KAAKiQ,KAAKvJ,SAASia,aAAajZ,GAASqO,OAAO/V,KAAK2vB,UAGzF+E,EAAA/0B,UAAA0nB,WAAA,WACE,IAAMM,EAAS3nB,KAAK+P,QAAQuI,KAAI,SAAAlZ,GAAK,OAAAA,EAAEwB,SAIvC,MAAO,CAHKZ,KAAK0wB,UAAYtjB,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAA,CAAKtB,KAAK0wB,WAAc/I,IAAUva,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAA,CAAK,GAAMqmB,IAEtE3nB,KAAK2wB,UAAYvjB,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAA,CAAKtB,KAAK2wB,WAAchJ,IAAUva,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAA,CAAK,GAAMqmB,MAIpF+M,EAAA/0B,UAAAiwB,WAAA,WACE,OAAO5vB,KAAK+P,QAAQuI,KAAI,SAAAlZ,GAAK,OAAAA,EAAEoR,UAGjCkkB,EAAA/0B,UAAAigB,QAAA,SAAQ1O,GACNlR,KAAKsP,OAAOZ,KAAKwC,IAGnBwjB,EAAA/0B,UAAAswB,UAAA,WACE,IAAIla,EAEFA,EADsB,YAApB/V,KAAKqP,WACErP,KAAK2vB,QAEL3vB,KAAKonB,QAGhBpnB,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQpP,KAAKqP,WAAY0G,EAAQ/V,KAAKusB,eAG3EmI,EAAA/0B,UAAAuwB,iBAAA,WACE,IAAM6B,EAAO,CACXvkB,UAAWxN,KAAKqP,WAChB+P,YAAQpc,EACR+S,OAAQ,GACR4G,WAAO3Z,EACP0F,SAAU1I,KAAK6rB,gBAWjB,MATuB,YAAnBkG,EAAKvkB,WACPukB,EAAKhc,OAAS/V,KAAK2vB,QACnBoC,EAAK3S,OAASpf,KAAKof,OACnB2S,EAAKpV,MAAQ3c,KAAKwuB,cAElBuD,EAAKhc,OAAS/V,KAAKonB,QACnB2K,EAAK3S,OAASpf,KAAKof,OAAO9K,OAGrByd,GAGT2C,EAAA/0B,UAAAqyB,iBAAA,SAAiB5oB,OAAEvC,EAAKuC,EAAAvC,MACtB7G,KAAKsrB,WAAazkB,EAClB7G,KAAK6M,UAGP6nB,EAAA/0B,UAAAsyB,kBAAA,SAAkB7oB,OAAE1C,EAAM0C,EAAA1C,OACxB1G,KAAKqrB,YAAc3kB,EACnB1G,KAAK6M,UAGP6nB,EAAA/0B,UAAAs1B,2BAAA,SAA2BxY,GAA3B,IAAA7T,EAAA5I,KACMyc,EAAMyY,KAAKJ,SACb90B,KAAK60B,kBAAkBC,SAAW1nB,KAAKuF,IAAI3S,KAAK60B,kBAAkBC,SAAUrY,EAAMyY,KAAKruB,OAEvF7G,KAAK60B,kBAAkBE,SAAW3nB,KAAKuF,IAAI3S,KAAK60B,kBAAkBE,SAAUtY,EAAMyY,KAAKruB,OAErF4V,EAAM0M,QAAUnpB,KAAK+P,QAAQrP,OAAS,GACxC6E,YAAW,WAAM,OAAAqD,EAAKiE,aAI1B6nB,EAAA/0B,UAAAuyB,WAAA,SAAW7gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACf9jB,EAAOrR,KAAK+P,QAAQiQ,MAAK,SAAA5gB,GACvB,OAAI+1B,EACK/1B,EAAEoR,QAAUa,EAAKZ,KAEjBrR,EAAEqR,OAASY,EAAKZ,QAIfzQ,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,OAASxB,EAAEuR,SAAWU,EAAKV,WAElE,IAIX3Q,KAAK+f,cAAaze,EAAA,CAAI+P,GAASrR,KAAK+f,eACpC/f,KAAK+d,SAASrP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,kBAGlD2U,EAAA/0B,UAAAyyB,aAAA,SAAa/gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACjB9jB,EAAOrR,KAAK+P,QAAQiQ,MAAK,SAAA5gB,GACvB,OAAI+1B,EACK/1B,EAAEoR,QAAUa,EAAKZ,KAEjBrR,EAAEqR,OAASY,EAAKZ,QAI3B,IAAMhF,EAAMzL,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,OAASxB,EAAEuR,SAAWU,EAAKV,UAG7E3Q,KAAK+f,cAAcpU,OAAOF,EAAK,GAC/BzL,KAAK+f,cAAaze,EAAOtB,KAAK+f,eAE9B/f,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,oBA7MV9Q,wBAvE3CzF,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,4BACVC,SAAU,4wEAiEVgE,gBAAiBC,EAAAA,wBAAwBC,OAEzCjE,cAAeC,EAAAA,kBAAkBC,2jDAGhCK,EAAAA,2BACAA,EAAAA,8BACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,+BACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,kCACAA,EAAAA,mCACAA,EAAAA,mCACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,4BACAA,EAAAA,0BACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,6BACAA,EAAAA,mCACAA,EAAAA,6BACAA,EAAAA,wBAEAgE,EAAAA,2BACAA,EAAAA,gCAEAmkB,EAAAA,aAAY1tB,KAAA,CAAC,yCCzGhB,SAAAywB,IAAA,IAAAxsB,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YAkGW4I,EAAA4mB,QAAS,EACT5mB,EAAA4lB,YAAsB,SACtB5lB,EAAAijB,eAAyB,QAOzBjjB,EAAAqR,iBAA2B,EAE3BrR,EAAA4K,eAAyB,EACzB5K,EAAAmX,cAAuB,GAEvBnX,EAAAgmB,gBAA0B,EAC1BhmB,EAAAimB,gBAA0B,EAC1BjmB,EAAAkmB,kBAA4B,EAC5BlmB,EAAAmmB,mBAA6B,GAC7BnmB,EAAAomB,mBAA6B,GAK7BpmB,EAAAysB,aAAe,GACfzsB,EAAA+rB,WAAa,EACb/rB,EAAAqmB,cAAwB,EACxBrmB,EAAAqrB,YAAsB,EAEtBrrB,EAAAgsB,eAAyB,EAEzBhsB,EAAAsrB,eAAyB,EAExBtrB,EAAAmV,SAA8B,IAAIvR,EAAAA,aAClC5D,EAAAoV,WAAgC,IAAIxR,EAAAA,aAa9C5D,EAAAsJ,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBtJ,EAAAyiB,YAAsB,EACtBziB,EAAA0iB,WAAqB,EAErB1iB,EAAAisB,kBAAyB,CAAEC,SAAU,EAAGC,SAAU,YAnDNj1B,EAAAs1B,EAAAjpB,GAqD5CipB,EAAAz1B,UAAAkN,OAAA,WACEV,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEPA,KAAK40B,gBACR50B,KAAK60B,kBAAoB,CAAEC,SAAU,EAAGC,SAAU,IAGpD/0B,KAAKkS,OAAS,CAAC,GAAI,GAAKlS,KAAK60B,kBAAkBE,SAAU,GAAI,GAAK/0B,KAAK60B,kBAAkBC,UAEzF90B,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,OACdiZ,UAAWnrB,KAAKovB,MAChBhE,UAAWprB,KAAKqvB,MAChBhE,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKsvB,eACjB7D,WAAYzrB,KAAKuvB,eACjBljB,WAAYrM,KAAKwvB,OACjBziB,WAAY/M,KAAKqP,WACjBwc,eAAgB7rB,KAAK6rB,iBAGvB7rB,KAAKsQ,cAELtQ,KAAKs1B,YAAct1B,KAAKu1B,iBACxBv1B,KAAKw1B,YAAcx1B,KAAKy1B,iBACxBz1B,KAAK01B,aAAe11B,KAAK21B,iBAEzB31B,KAAK41B,WAAa51B,KAAK61B,gBACvB71B,KAAK81B,WAAa91B,KAAK+1B,gBACvB/1B,KAAK+sB,WAAa/sB,KAAKg2B,gBAEvBh2B,KAAKiwB,YACLjwB,KAAKiN,cAAgBjN,KAAKkwB,mBAE1BlwB,KAAKqS,UAAY,aAAarS,KAAKiQ,KAAK+b,QAAO,MAAMhsB,KAAKkS,OAAO,GAAE,KAGrEkjB,EAAAz1B,UAAAk2B,cAAA,WACE,IAAMnuB,EAAU1H,KAAKs1B,YAAY50B,QAAUV,KAAKiQ,KAAKvJ,OAAS1G,KAAKq1B,aAAe,GAElF,OAAO/H,EAAAA,YACJ0H,WAAW,CAAC,EAAGh1B,KAAKiQ,KAAKvJ,SACzBia,aAAajZ,GACbuuB,aAAavuB,EAAU,GACvBqO,OAAO/V,KAAKs1B,cAGjBF,EAAAz1B,UAAAo2B,cAAA,WACE,IAAMrvB,EAAS1G,KAAK41B,WAAW9gB,YACzBpN,EAAU1H,KAAKw1B,YAAY90B,QAAUgG,EAAS1G,KAAK20B,WAAa,GAEtE,OAAOrH,EAAAA,YAAY0H,WAAW,CAAC,EAAGtuB,IAASia,aAAajZ,GAASqO,OAAO/V,KAAKw1B,cAG/EJ,EAAAz1B,UAAAq2B,cAAA,WACE,IAAM1hB,EAAQ0T,EAAAA,cAAc7I,MAAM,CAAC,EAAGnf,KAAKiQ,KAAKpJ,QAAQkP,OAAO/V,KAAK01B,cAEpE,OAAO11B,KAAKivB,aAAe3a,EAAM8c,OAAS9c,GAG5C8gB,EAAAz1B,UAAA41B,eAAA,mBACQxf,EAAS,OAEf,IAAoB,IAAAkB,EAAA9W,EAAAH,KAAK+P,SAAOwB,EAAA0F,EAAAtW,QAAA4Q,EAAA1Q,KAAA0Q,EAAA0F,EAAAtW,OAAE,CAA7B,IAAM0kB,EAAK9T,EAAA3Q,MACTmV,EAAO+R,SAASzC,EAAM7U,QACzBuF,EAAO3U,KAAKikB,EAAM7U,yGAItB,OAAOuF,GAGTqf,EAAAz1B,UAAA81B,eAAA,uBACQ1f,EAAS,OAEf,IAAoB,IAAAxE,EAAApR,EAAAH,KAAK+P,SAAO0B,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAA7B,IAAM0kB,EAAK5T,EAAA7Q,UACd,IAAgB,IAAAgnB,GAAAsO,OAAA,EAAA/1B,EAAAklB,EAAM1U,SAAMkX,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAAzB,IAAMvB,EAACyoB,EAAAjnB,MACLmV,EAAO+R,SAAS1oB,EAAEoR,QACrBuF,EAAO3U,KAAKhC,EAAEoR,4MAKpB,OAAOuF,GAGTqf,EAAAz1B,UAAAg2B,eAAA,uBACQ5f,EAAS,OAEf,IAAoB,IAAAxE,EAAApR,EAAAH,KAAK+P,SAAO0B,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAA7B,IAAM0kB,EAAK5T,EAAA7Q,UACd,IAAgB,IAAAgnB,GAAAuO,OAAA,EAAAh2B,EAAAklB,EAAM1U,SAAMkX,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAAzB,IAAMvB,EAACyoB,EAAAjnB,MACLmV,EAAO+R,SAAS1oB,EAAEwB,QACrBmV,EAAO3U,KAAKhC,EAAEwB,4MAOpB,MAAO,CAFKwM,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAA,CAAK,GAAMyU,IACf/V,KAAK2wB,UAAYvjB,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAA,CAAKtB,KAAK2wB,WAAc5a,IAAU3I,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAA,CAAK,GAAMyU,MAIpFqf,EAAAz1B,UAAAy2B,eAAA,SAAe/Q,GACb,MAAO,gBAAgBrlB,KAAK41B,WAAWvQ,EAAM7U,OAAM,KAGrD4kB,EAAAz1B,UAAAigB,QAAA,SAAQ1O,EAAMmU,GACRA,IACFnU,EAAKP,OAAS0U,EAAM5U,MAGtBzQ,KAAKsP,OAAOZ,KAAKwC,IAGnBkkB,EAAAz1B,UAAAupB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MAGd2kB,EAAAz1B,UAAAswB,UAAA,WACE,IAAIla,EAEFA,EADsB,YAApB/V,KAAKqP,WACErP,KAAKw1B,YAELx1B,KAAK01B,aAGhB11B,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQpP,KAAKqP,WAAY0G,EAAQ/V,KAAKusB,eAG3E6I,EAAAz1B,UAAAuwB,iBAAA,WACE,IAAM6B,EAAO,CACXvkB,UAAWxN,KAAKqP,WAChB+P,YAAQpc,EACR+S,OAAQ,GACR4G,WAAO3Z,EACP0F,SAAU1I,KAAK6rB,gBAWjB,MATuB,YAAnBkG,EAAKvkB,WACPukB,EAAKhc,OAAS/V,KAAKw1B,YACnBzD,EAAK3S,OAASpf,KAAKof,OACnB2S,EAAKpV,MAAQ3c,KAAKwuB,cAElBuD,EAAKhc,OAAS/V,KAAK01B,aACnB3D,EAAK3S,OAASpf,KAAKof,OAAO9K,OAGrByd,GAGTqD,EAAAz1B,UAAAqyB,iBAAA,SAAiB5oB,OAAEvC,EAAKuC,EAAAvC,MACtB7G,KAAKsrB,WAAazkB,EAClB7G,KAAK6M,UAGPuoB,EAAAz1B,UAAAsyB,kBAAA,SAAkB7oB,OAAE1C,EAAM0C,EAAA1C,OACxB1G,KAAKqrB,YAAc3kB,EACnB1G,KAAK6M,UAGPuoB,EAAAz1B,UAAAs1B,2BAAA,SAA2BxY,EAAO4Z,GAAlC,IAAAztB,EAAA5I,KACMyc,EAAMyY,KAAKJ,SACb90B,KAAK60B,kBAAkBC,SAAW1nB,KAAKuF,IAAI3S,KAAK60B,kBAAkBC,SAAUrY,EAAMyY,KAAKruB,OAEvF7G,KAAK60B,kBAAkBE,SAAW3nB,KAAKuF,IAAI3S,KAAK60B,kBAAkBE,SAAUtY,EAAMyY,KAAKruB,OAErFwvB,IAAer2B,KAAK+P,QAAQrP,OAAS,GACvC6E,YAAW,WAAM,OAAAqD,EAAKiE,aAI1BuoB,EAAAz1B,UAAAuyB,WAAA,SAAWzV,EAAO4I,EAAO8P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAO/R,OAAOyM,OAAO,GAAI0Q,GAC3B4I,IACFhU,EAAKV,OAAS0U,EAAM5U,MAGtB,IAAMsY,EAAQ/oB,KAAK+P,QAChBuI,KAAI,SAAA/H,GAAK,OAAAA,EAAEI,UACX2lB,OACA5O,QAAO,SAAAjnB,GACN,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,KAEjBhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,UAIvD3Q,KAAK+f,cAAaze,EAAOynB,GACzB/oB,KAAK+d,SAASrP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,iBAGlDqV,EAAAz1B,UAAAyyB,aAAA,SAAa3V,EAAO4I,EAAO8P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAO/R,OAAOyM,OAAO,GAAI0Q,GAC3B4I,IACFhU,EAAKV,OAAS0U,EAAM5U,MAGtBzQ,KAAK+f,cAAgB/f,KAAK+f,cAAc2H,QAAO,SAAAjnB,GAC7C,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,OAEfhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,WAIvD3Q,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,oBArQR9Q,wBAjG7CzF,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,+BACVC,SAAU,u1FAgFVgE,gBAAiBC,EAAAA,wBAAwBC,OAEzCjE,cAAeC,EAAAA,kBAAkBC,KACjCyC,WAAY,CACVuB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACTqE,UAAW,MAEbpE,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAGqE,UAAW,ykDAMjDnI,EAAAA,2BACAA,EAAAA,8BACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,+BACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,kCACAA,EAAAA,mCACAA,EAAAA,mCACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,4BACAA,EAAAA,0BACAA,EAAAA,4BACAA,EAAAA,0BACAA,EAAAA,yBACAA,EAAAA,6BACAA,EAAAA,mCACAA,EAAAA,6BACAA,EAAAA,wBAEAgE,EAAAA,2BACAA,EAAAA,gCAEAmkB,EAAAA,aAAY1tB,KAAA,CAAC,yCCrIhB,SAAA4xB,IAAA,IAAA3tB,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YAsFW4I,EAAA4mB,QAAS,EACT5mB,EAAA4lB,YAAsB,SACtB5lB,EAAAijB,eAAyB,QAOzBjjB,EAAAqR,iBAA2B,EAE3BrR,EAAA4K,eAAyB,EACzB5K,EAAAmX,cAAuB,GAEvBnX,EAAAgmB,gBAA0B,EAC1BhmB,EAAAimB,gBAA0B,EAC1BjmB,EAAAkmB,kBAA4B,EAC5BlmB,EAAAmmB,mBAA6B,GAC7BnmB,EAAAomB,mBAA6B,GAK7BpmB,EAAA+rB,WAAa,EACb/rB,EAAAqmB,cAAwB,EACxBrmB,EAAAsrB,eAAyB,EAExBtrB,EAAAmV,SAA8B,IAAIvR,EAAAA,aAClC5D,EAAAoV,WAAgC,IAAIxR,EAAAA,aAY9C5D,EAAAsJ,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBtJ,EAAAyiB,YAAsB,EACtBziB,EAAA0iB,WAAqB,WA3C+BxrB,EAAAy2B,EAAApqB,GA8CpDoqB,EAAA52B,UAAAkN,OAAA,WACEV,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEZA,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,OACdiZ,UAAWnrB,KAAKovB,MAChBhE,UAAWprB,KAAKqvB,MAChBhE,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKsvB,eACjB7D,WAAYzrB,KAAKuvB,eACjBljB,WAAYrM,KAAKwvB,OACjBziB,WAAY/M,KAAKqP,WACjBwc,eAAgB7rB,KAAK6rB,iBAGvB7rB,KAAKsQ,cAELtQ,KAAKs1B,YAAct1B,KAAKu1B,iBACxBv1B,KAAKw1B,YAAcx1B,KAAKy1B,iBACxBz1B,KAAKw2B,YAAcx2B,KAAK21B,iBAExB31B,KAAK6e,OAAS7e,KAAKsnB,YACnBtnB,KAAKif,OAASjf,KAAK+vB,YAEnB/vB,KAAKiwB,YACLjwB,KAAKiN,cAAgBjN,KAAKkwB,mBAE1BlwB,KAAKqS,UAAY,aAAarS,KAAKiQ,KAAK+b,QAAO,MAAMhsB,KAAKkS,OAAO,GAAE,KAGrEqkB,EAAA52B,UAAA41B,eAAA,mBACQxf,EAAS,OAEf,IAAoB,IAAAkB,EAAA9W,EAAAH,KAAK+P,SAAOwB,EAAA0F,EAAAtW,QAAA4Q,EAAA1Q,KAAA0Q,EAAA0F,EAAAtW,OAAE,CAA7B,IAAM0kB,EAAK9T,EAAA3Q,MACTmV,EAAO+R,SAASzC,EAAM7U,QACzBuF,EAAO3U,KAAKikB,EAAM7U,yGAItB,OAAOuF,GAGTwgB,EAAA52B,UAAA81B,eAAA,uBACQ1f,EAAS,OAEf,IAAoB,IAAAxE,EAAApR,EAAAH,KAAK+P,SAAO0B,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAA7B,IAAM0kB,EAAK5T,EAAA7Q,UACd,IAAgB,IAAAgnB,GAAAsO,OAAA,EAAA/1B,EAAAklB,EAAM1U,SAAMkX,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAAzB,IAAMvB,EAACyoB,EAAAjnB,MACLmV,EAAO+R,SAAS1oB,EAAEoR,QACrBuF,EAAO3U,KAAKhC,EAAEoR,4MAKpB,OAAOuF,GAGTwgB,EAAA52B,UAAAg2B,eAAA,WACE,MAAO,CAAC,EAAG,MAGbY,EAAA52B,UAAAowB,UAAA,WACE,IAAMroB,EAAU1H,KAAKs1B,YAAY50B,QAAUV,KAAKiQ,KAAKvJ,OAAS1G,KAAK20B,WAAa,GAEhF,OAAOrH,EAAAA,YAAY0H,WAAW,CAAC,EAAGh1B,KAAKiQ,KAAKvJ,SAASia,aAAajZ,GAASqO,OAAO/V,KAAKs1B,cAGzFiB,EAAA52B,UAAA2nB,UAAA,WACE,IAAMhT,EAAQ0T,EAAAA,cAAc7I,MAAM,CAAC,EAAGnf,KAAKiQ,KAAKpJ,QAAQkP,OAAO/V,KAAKw2B,aACpE,OAAOx2B,KAAKivB,aAAe3a,EAAM8c,OAAS9c,GAG5CiiB,EAAA52B,UAAAy2B,eAAA,SAAe/Q,GACb,MAAO,gBAAgBrlB,KAAKif,OAAOoG,EAAM5U,MAAK,KAGhD8lB,EAAA52B,UAAAigB,QAAA,SAAQ1O,EAAMmU,GACRA,IACFnU,EAAKP,OAAS0U,EAAM5U,MAGtBzQ,KAAKsP,OAAOZ,KAAKwC,IAGnBqlB,EAAA52B,UAAAupB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MAGd8lB,EAAA52B,UAAAswB,UAAA,WACE,IAAIla,EAEFA,EADsB,YAApB/V,KAAKqP,WACErP,KAAKw1B,YAELx1B,KAAKw2B,YAGhBx2B,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQpP,KAAKqP,WAAY0G,EAAQ/V,KAAKusB,eAG3EgK,EAAA52B,UAAAuwB,iBAAA,WACE,IAAM6B,EAAO,CACXvkB,UAAWxN,KAAKqP,WAChB+P,YAAQpc,EACR+S,OAAQ,GACR4G,WAAO3Z,EACP0F,SAAU1I,KAAK6rB,gBAWjB,MATuB,YAAnBkG,EAAKvkB,WACPukB,EAAKhc,OAAS/V,KAAKw1B,YACnBzD,EAAK3S,OAASpf,KAAKof,OACnB2S,EAAKpV,MAAQ3c,KAAKwuB,cAElBuD,EAAKhc,OAAS/V,KAAKw2B,YACnBzE,EAAK3S,OAASpf,KAAKof,OAAO9K,OAGrByd,GAGTwE,EAAA52B,UAAAqyB,iBAAA,SAAiB5oB,OAAEvC,EAAKuC,EAAAvC,MACtB7G,KAAKsrB,WAAazkB,EAClB7G,KAAK6M,UAGP0pB,EAAA52B,UAAAsyB,kBAAA,SAAkB7oB,OAAE1C,EAAM0C,EAAA1C,OACxB1G,KAAKqrB,YAAc3kB,EACnB1G,KAAK6M,UAGP0pB,EAAA52B,UAAAuyB,WAAA,SAAWzV,EAAO4I,EAAO8P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAO/R,OAAOyM,OAAO,GAAI0Q,GAC3B4I,IACFhU,EAAKV,OAAS0U,EAAM5U,MAGtB,IAAMsY,EAAQ/oB,KAAK+P,QAChBuI,KAAI,SAAA/H,GAAK,OAAAA,EAAEI,UACX2lB,OACA5O,QAAO,SAAAjnB,GACN,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,KAEjBhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,UAIvD3Q,KAAK+f,cAAaze,EAAOynB,GACzB/oB,KAAK+d,SAASrP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,iBAGlDwW,EAAA52B,UAAAyyB,aAAA,SAAa3V,EAAO4I,EAAO8P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAO/R,OAAOyM,OAAO,GAAI0Q,GAC3B4I,IACFhU,EAAKV,OAAS0U,EAAM5U,MAGtBzQ,KAAK+f,cAAgB/f,KAAK+f,cAAc2H,QAAO,SAAAjnB,GAC7C,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,OAEfhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,WAIvD3Q,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,oBApNA9Q,wBArFrDzF,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,uCACVC,SAAU,81EAoEVgE,gBAAiBC,EAAAA,wBAAwBC,OAEzCjE,cAAeC,EAAAA,kBAAkBC,KACjCyC,WAAY,CACVuB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACTqE,UAAW,MAEbpE,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAGqE,UAAW,ykDAMjDnI,EAAAA,2BACAA,EAAAA,8BACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,+BACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,kCACAA,EAAAA,mCACAA,EAAAA,mCACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,4BACAA,EAAAA,6BACAA,EAAAA,wBAEAgE,EAAAA,2BACAA,EAAAA,gCAEAmkB,EAAAA,aAAY1tB,KAAA,CAAC,yCCpHhB,SAAA8xB,IAAA,IAAA7tB,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YA0FW4I,EAAA4mB,QAAS,EACT5mB,EAAA4lB,YAAsB,SACtB5lB,EAAAijB,eAAyB,QAOzBjjB,EAAAqR,iBAA2B,EAE3BrR,EAAA4K,eAAyB,EACzB5K,EAAAmX,cAAuB,GAEvBnX,EAAAgmB,gBAA0B,EAC1BhmB,EAAAimB,gBAA0B,EAC1BjmB,EAAAkmB,kBAA4B,EAC5BlmB,EAAAmmB,mBAA6B,GAC7BnmB,EAAAomB,mBAA6B,GAK7BpmB,EAAA+rB,WAAa,EACb/rB,EAAAqmB,cAAwB,EAExBrmB,EAAAgsB,eAAyB,EAEzBhsB,EAAAsrB,eAAyB,EAExBtrB,EAAAmV,SAA8B,IAAIvR,EAAAA,aAClC5D,EAAAoV,WAAgC,IAAIxR,EAAAA,aAY9C5D,EAAAsJ,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBtJ,EAAAyiB,YAAsB,EACtBziB,EAAA0iB,WAAqB,EAErB1iB,EAAAisB,kBAAyB,CAAEC,SAAU,EAAGC,SAAU,YAhDDj1B,EAAA22B,EAAAtqB,GAkDjDsqB,EAAA92B,UAAAkN,OAAA,WACEV,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEPA,KAAK40B,gBACR50B,KAAK60B,kBAAoB,CAAEC,SAAU,EAAGC,SAAU,IAGpD/0B,KAAKkS,OAAS,CAAC,GAAI,GAAKlS,KAAK60B,kBAAkBE,SAAU,GAAI,GAAK/0B,KAAK60B,kBAAkBC,UAEzF90B,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,OACdiZ,UAAWnrB,KAAKovB,MAChBhE,UAAWprB,KAAKqvB,MAChBhE,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKsvB,eACjB7D,WAAYzrB,KAAKuvB,eACjBljB,WAAYrM,KAAKwvB,OACjBziB,WAAY/M,KAAKqP,WACjBwc,eAAgB7rB,KAAK6rB,iBAGvB7rB,KAAKsQ,cAELtQ,KAAKs1B,YAAct1B,KAAKu1B,iBACxBv1B,KAAKw1B,YAAcx1B,KAAKy1B,iBACxBz1B,KAAKw2B,YAAcx2B,KAAK21B,iBAExB31B,KAAK6e,OAAS7e,KAAKsnB,YACnBtnB,KAAKif,OAASjf,KAAK+vB,YAEnB/vB,KAAKiwB,YACLjwB,KAAKiN,cAAgBjN,KAAKkwB,mBAE1BlwB,KAAKqS,UAAY,aAAarS,KAAKiQ,KAAK+b,QAAO,MAAMhsB,KAAKkS,OAAO,GAAE,KAGrEukB,EAAA92B,UAAA41B,eAAA,mBACQxf,EAAS,OAEf,IAAoB,IAAAkB,EAAA9W,EAAAH,KAAK+P,SAAOwB,EAAA0F,EAAAtW,QAAA4Q,EAAA1Q,KAAA0Q,EAAA0F,EAAAtW,OAAE,CAA7B,IAAM0kB,EAAK9T,EAAA3Q,MACTmV,EAAO+R,SAASzC,EAAM7U,QACzBuF,EAAO3U,KAAKikB,EAAM7U,yGAItB,OAAOuF,GAGT0gB,EAAA92B,UAAA81B,eAAA,uBACQ1f,EAAS,OAEf,IAAoB,IAAAxE,EAAApR,EAAAH,KAAK+P,SAAO0B,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAA7B,IAAM0kB,EAAK5T,EAAA7Q,UACd,IAAgB,IAAAgnB,GAAAsO,OAAA,EAAA/1B,EAAAklB,EAAM1U,SAAMkX,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAAzB,IAAMvB,EAACyoB,EAAAjnB,MACLmV,EAAO+R,SAAS1oB,EAAEoR,QACrBuF,EAAO3U,KAAKhC,EAAEoR,4MAKpB,OAAOuF,GAGT0gB,EAAA92B,UAAAg2B,eAAA,uBACQ5f,EAAS,GACX2gB,EAAW,EACXC,EAAU,MACd,IAAoB,IAAAplB,EAAApR,EAAAH,KAAK+P,SAAO0B,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAA7B,IAAM0kB,EAAK5T,EAAA7Q,MACVg2B,EAAc,EACdC,EAAa,MACjB,IAAgB,IAAAjP,GAAAuO,OAAA,EAAAh2B,EAAAklB,EAAM1U,SAAMkX,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAAzB,IAAMvB,EAACyoB,EAAAjnB,MACNxB,EAAEwB,MAAQ,EACZg2B,GAAex3B,EAAEwB,MAEjBi2B,GAAcz3B,EAAEwB,MAElB81B,EAAWt3B,EAAEwB,MAAQ81B,EAAWt3B,EAAEwB,MAAQ81B,EAC1CC,EAAUv3B,EAAEwB,MAAQ+1B,EAAUv3B,EAAEwB,MAAQ+1B,oGAE1C5gB,EAAO3U,KAAKw1B,GACZ7gB,EAAO3U,KAAKy1B,qGAOd,OALA9gB,EAAO3U,KAAKs1B,GACZ3gB,EAAO3U,KAAKu1B,GAIL,CAFKvpB,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAA,CAAK,GAAMyU,IACf/V,KAAK2wB,UAAYvjB,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAA,CAAKtB,KAAK2wB,WAAc5a,IAAU3I,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAQyU,MAIjF0gB,EAAA92B,UAAAowB,UAAA,WACE,IAAMroB,EAAU1H,KAAKs1B,YAAY50B,QAAUV,KAAKiQ,KAAKvJ,OAAS1G,KAAK20B,WAAa,GAEhF,OAAOrH,EAAAA,YAAY0H,WAAW,CAAC,EAAGh1B,KAAKiQ,KAAKvJ,SAASia,aAAajZ,GAASqO,OAAO/V,KAAKs1B,cAGzFmB,EAAA92B,UAAA2nB,UAAA,WACE,IAAMhT,EAAQ0T,EAAAA,cAAc7I,MAAM,CAAC,EAAGnf,KAAKiQ,KAAKpJ,QAAQkP,OAAO/V,KAAKw2B,aACpE,OAAOx2B,KAAKivB,aAAe3a,EAAM8c,OAAS9c,GAG5CmiB,EAAA92B,UAAAy2B,eAAA,SAAe/Q,GACb,MAAO,gBAAgBrlB,KAAKif,OAAOoG,EAAM5U,MAAK,KAGhDgmB,EAAA92B,UAAAigB,QAAA,SAAQ1O,EAAMmU,GACRA,IACFnU,EAAKP,OAAS0U,EAAM5U,MAGtBzQ,KAAKsP,OAAOZ,KAAKwC,IAGnBulB,EAAA92B,UAAAupB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MAGdgmB,EAAA92B,UAAAswB,UAAA,WACE,IAAIla,EAEFA,EADsB,YAApB/V,KAAKqP,WACErP,KAAKw1B,YAELx1B,KAAKw2B,YAGhBx2B,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQpP,KAAKqP,WAAY0G,EAAQ/V,KAAKusB,eAG3EkK,EAAA92B,UAAAuwB,iBAAA,WACE,IAAM6B,EAAO,CACXvkB,UAAWxN,KAAKqP,WAChB+P,YAAQpc,EACR+S,OAAQ,GACR4G,WAAO3Z,EACP0F,SAAU1I,KAAK6rB,gBAWjB,MATuB,YAAnBkG,EAAKvkB,WACPukB,EAAKhc,OAAS/V,KAAKw1B,YACnBzD,EAAK3S,OAASpf,KAAKof,OACnB2S,EAAKpV,MAAQ3c,KAAKwuB,cAElBuD,EAAKhc,OAAS/V,KAAKw2B,YACnBzE,EAAK3S,OAASpf,KAAKof,OAAO9K,OAGrByd,GAGT0E,EAAA92B,UAAAqyB,iBAAA,SAAiB5oB,OAAEvC,EAAKuC,EAAAvC,MACtB7G,KAAKsrB,WAAazkB,EAClB7G,KAAK6M,UAGP4pB,EAAA92B,UAAAsyB,kBAAA,SAAkB7oB,OAAE1C,EAAM0C,EAAA1C,OACxB1G,KAAKqrB,YAAc3kB,EACnB1G,KAAK6M,UAGP4pB,EAAA92B,UAAAs1B,2BAAA,SAA2BxY,EAAO4Z,GAAlC,IAAAztB,EAAA5I,KACMyc,EAAMyY,KAAKJ,SACb90B,KAAK60B,kBAAkBC,SAAW1nB,KAAKuF,IAAI3S,KAAK60B,kBAAkBC,SAAUrY,EAAMyY,KAAKruB,OAEvF7G,KAAK60B,kBAAkBE,SAAW3nB,KAAKuF,IAAI3S,KAAK60B,kBAAkBE,SAAUtY,EAAMyY,KAAKruB,OAErFwvB,IAAer2B,KAAK+P,QAAQrP,OAAS,GACvC6E,YAAW,WAAM,OAAAqD,EAAKiE,aAI1B4pB,EAAA92B,UAAAuyB,WAAA,SAAWzV,EAAO4I,EAAO8P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAO/R,OAAOyM,OAAO,GAAI0Q,GAC3B4I,IACFhU,EAAKV,OAAS0U,EAAM5U,MAGtB,IAAMsY,EAAQ/oB,KAAK+P,QAChBuI,KAAI,SAAA/H,GAAK,OAAAA,EAAEI,UACX2lB,OACA5O,QAAO,SAAAjnB,GACN,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,KAEjBhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,UAIvD3Q,KAAK+f,cAAaze,EAAOynB,GACzB/oB,KAAK+d,SAASrP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,iBAGlD0W,EAAA92B,UAAAyyB,aAAA,SAAa3V,EAAO4I,EAAO8P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAO/R,OAAOyM,OAAO,GAAI0Q,GAC3B4I,IACFhU,EAAKV,OAAS0U,EAAM5U,MAGtBzQ,KAAK+f,cAAgB/f,KAAK+f,cAAc2H,QAAO,SAAAjnB,GAC7C,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,OAEfhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,WAIvD3Q,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,oBAhQH9Q,wBAzFlDzF,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,oCACVC,SAAU,2lFAwEVgE,gBAAiBC,EAAAA,wBAAwBC,OAEzCjE,cAAeC,EAAAA,kBAAkBC,KACjCyC,WAAY,CACVuB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACTqE,UAAW,MAEbpE,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAGqE,UAAW,ykDAMjDnI,EAAAA,2BACAA,EAAAA,8BACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,+BACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,kCACAA,EAAAA,mCACAA,EAAAA,mCACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,4BACAA,EAAAA,yBACAA,EAAAA,6BACAA,EAAAA,mCACAA,EAAAA,6BACAA,EAAAA,wBAEAgE,EAAAA,2BACAA,EAAAA,gCAEAmkB,EAAAA,aAAY1tB,KAAA,CAAC,yCC5HhB,SAAAmyB,IAAA,IAAAluB,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YAwEW4I,EAAA4mB,QAAS,EACT5mB,EAAA4lB,YAAsB,SACtB5lB,EAAAijB,eAAyB,QAOzBjjB,EAAAqR,iBAA2B,EAE3BrR,EAAA4K,eAAyB,EACzB5K,EAAAmX,cAAuB,GAEvBnX,EAAAgmB,gBAA0B,EAC1BhmB,EAAAimB,gBAA0B,EAC1BjmB,EAAAkmB,kBAA4B,EAC5BlmB,EAAAmmB,mBAA6B,GAC7BnmB,EAAAomB,mBAA6B,GAK7BpmB,EAAA+rB,WAAa,EACb/rB,EAAAqmB,cAAwB,EACxBrmB,EAAAqrB,YAAsB,EAGtBrrB,EAAAgsB,eAAyB,EAEzBhsB,EAAAsrB,eAAyB,EAExBtrB,EAAAmV,SAA8B,IAAIvR,EAAAA,aAClC5D,EAAAoV,WAAgC,IAAIxR,EAAAA,aAW9C5D,EAAAsJ,OAAgB,CAAC,GAAI,GAAI,GAAI,IAC7BtJ,EAAAyiB,YAAsB,EACtBziB,EAAA0iB,WAAqB,EAErB1iB,EAAAmuB,mBAA0B,CAAEjC,SAAU,EAAGC,SAAU,YAjDXj1B,EAAAg3B,EAAA3qB,GAmDxC2qB,EAAAn3B,UAAAkN,OAAA,WACEV,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEPA,KAAK40B,gBACR50B,KAAK+2B,mBAAqB,CAAEjC,SAAU,EAAGC,SAAU,IAErD/0B,KAAKkS,OAAS,CAAC,GAAKlS,KAAK+2B,mBAAmBhC,SAAU,GAAI,GAAK/0B,KAAK+2B,mBAAmBjC,SAAU,IAEjG90B,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,OACdiZ,UAAWnrB,KAAKovB,MAChBhE,UAAWprB,KAAKqvB,MAChBhE,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKsvB,eACjB7D,WAAYzrB,KAAKuvB,eACjBljB,WAAYrM,KAAKwvB,OACjBziB,WAAY/M,KAAKqP,WACjBwc,eAAgB7rB,KAAK6rB,iBAGvB7rB,KAAKsQ,cAEDtQ,KAAK40B,gBACP50B,KAAKiQ,KAAKvJ,QAAU1G,KAAK+2B,mBAAmBjC,UAE9C90B,KAAK6e,OAAS7e,KAAKsnB,YACnBtnB,KAAKif,OAASjf,KAAK+vB,YAEnB/vB,KAAKiwB,YACLjwB,KAAKiN,cAAgBjN,KAAKkwB,mBAE1BlwB,KAAKqS,UAAY,aAAarS,KAAKiQ,KAAK+b,QAAO,OAAMhsB,KAAKkS,OAAO,GAAKlS,KAAK+2B,mBAAmBjC,UAAQ,KAGxGgC,EAAAn3B,UAAA2nB,UAAA,WACEtnB,KAAKonB,QAAUpnB,KAAKqnB,aACpB,IAAM3f,EAAU1H,KAAKonB,QAAQ1mB,QAAUV,KAAKiQ,KAAKpJ,MAAQ7G,KAAK20B,WAAa,GAC3E,OAAOrH,EAAAA,YAAYnO,MAAM,CAAC,EAAGnf,KAAKiQ,KAAKpJ,QAAQ8Z,aAAajZ,GAASqO,OAAO/V,KAAKonB,UAGnF0P,EAAAn3B,UAAAowB,UAAA,WACE/vB,KAAK2vB,QAAU3vB,KAAK4vB,aACpB,IAAMtb,EAAQ0T,EAAAA,cAAc7I,MAAM,CAACnf,KAAKiQ,KAAKvJ,OAAQ,IAAIqP,OAAO/V,KAAK2vB,SACrE,OAAO3vB,KAAKivB,aAAe3a,EAAM8c,OAAS9c,GAG5CwiB,EAAAn3B,UAAA0nB,WAAA,WACE,OAAOrnB,KAAK+P,QAAQuI,KAAI,SAAAlZ,GAAK,OAAAA,EAAEoR,UAGjCsmB,EAAAn3B,UAAAiwB,WAAA,WACE,IAAMjI,EAAS3nB,KAAK+P,QAAQuI,KAAI,SAAAlZ,GAAK,OAAAA,EAAEwB,SAEnCyU,EAAMrV,KAAKkxB,UAAY9jB,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAA,CAAKtB,KAAKkxB,WAAcvJ,IAAUva,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAA,CAAK,GAAMqmB,IAC5E3nB,KAAKg3B,aAAeh3B,KAAKg3B,WAAWC,KAAKC,SAC3C7hB,EAAMjI,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAA,CAAK+T,GAAQrV,KAAKg3B,cAG9B,IAAIrkB,EAAM3S,KAAKmxB,UAAY/jB,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAA,CAAKtB,KAAKmxB,WAAcxJ,IAAUva,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAA,CAAK,GAAMqmB,IAIhF,OAHI3nB,KAAKg3B,aAAeh3B,KAAKg3B,WAAWC,KAAKC,SAC3CvkB,EAAMvF,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAA,CAAKqR,GAAQ3S,KAAKg3B,cAEvB,CAAC3hB,EAAK1C,IAGfmkB,EAAAn3B,UAAAigB,QAAA,SAAQ1O,GACNlR,KAAKsP,OAAOZ,KAAKwC,IAGnB4lB,EAAAn3B,UAAAswB,UAAA,WACE,IAAIla,EAEFA,EADsB,YAApB/V,KAAKqP,WACErP,KAAKonB,QAELpnB,KAAK2vB,QAGhB3vB,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQpP,KAAKqP,WAAY0G,EAAQ/V,KAAKusB,eAG3EuK,EAAAn3B,UAAAuwB,iBAAA,WACE,IAAM6B,EAAO,CACXvkB,UAAWxN,KAAKqP,WAChB+P,YAAQpc,EACR+S,OAAQ,GACR4G,WAAO3Z,EACP0F,SAAU1I,KAAK6rB,gBAUjB,MARuB,YAAnBkG,EAAKvkB,WACPukB,EAAKhc,OAAS/V,KAAKonB,QACnB2K,EAAK3S,OAASpf,KAAKof,OACnB2S,EAAKpV,MAAQ3c,KAAKwuB,cAElBuD,EAAKhc,OAAS/V,KAAK2vB,QACnBoC,EAAK3S,OAASpf,KAAKof,OAAO9K,OAErByd,GAGT+E,EAAAn3B,UAAAqyB,iBAAA,SAAiB5oB,OAAEvC,EAAKuC,EAAAvC,MACtB7G,KAAKsrB,WAAazkB,EAClB7G,KAAK6M,UAGPiqB,EAAAn3B,UAAAsyB,kBAAA,SAAkB7oB,OAAE1C,EAAM0C,EAAA1C,OACxB1G,KAAKqrB,YAAc3kB,EACnB1G,KAAK6M,UAGPiqB,EAAAn3B,UAAAw3B,4BAAA,SAA4B1a,GAA5B,IAAA7T,EAAA5I,KACMyc,EAAMyY,KAAKJ,SACb90B,KAAK+2B,mBAAmBjC,SAAW1nB,KAAKuF,IAAI3S,KAAK+2B,mBAAmBjC,SAAUrY,EAAMyY,KAAKxuB,QAEzF1G,KAAK+2B,mBAAmBhC,SAAW3nB,KAAKuF,IAAI3S,KAAK+2B,mBAAmBhC,SAAUtY,EAAMyY,KAAKxuB,QAEvF+V,EAAM0M,QAAUnpB,KAAK+P,QAAQrP,OAAS,GACxC6E,YAAW,WAAM,OAAAqD,EAAKiE,aAI1BiqB,EAAAn3B,UAAAuyB,WAAA,SAAW7gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACf9jB,EAAOrR,KAAK+P,QAAQiQ,MAAK,SAAA5gB,GACvB,OAAI+1B,EACK/1B,EAAEoR,QAAUa,EAAKZ,KAEjBrR,EAAEqR,OAASY,EAAKZ,QAIfzQ,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,OAASxB,EAAEuR,SAAWU,EAAKV,WAElE,IAIX3Q,KAAK+f,cAAaze,EAAA,CAAI+P,GAASrR,KAAK+f,eACpC/f,KAAK+d,SAASrP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,kBAGlD+W,EAAAn3B,UAAAyyB,aAAA,SAAa/gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACjB9jB,EAAOrR,KAAK+P,QAAQiQ,MAAK,SAAA5gB,GACvB,OAAI+1B,EACK/1B,EAAEoR,QAAUa,EAAKZ,KAEjBrR,EAAEqR,OAASY,EAAKZ,QAI3B,IAAMhF,EAAMzL,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,OAASxB,EAAEuR,SAAWU,EAAKV,UAG7E3Q,KAAK+f,cAAcpU,OAAOF,EAAK,GAC/BzL,KAAK+f,cAAaze,EAAOtB,KAAK+f,eAE9B/f,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,oBAlNZ9Q,wBAvEzCzF,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,0BACVC,SAAU,6wEAiEVgE,gBAAiBC,EAAAA,wBAAwBC,OAEzCjE,cAAeC,EAAAA,kBAAkBC,2jDAGhCK,EAAAA,2BACAA,EAAAA,8BACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,+BACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,kCACAA,EAAAA,mCACAA,EAAAA,mCACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,4BACAA,EAAAA,0BACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,6BACAA,EAAAA,mCACAA,EAAAA,6BACAA,EAAAA,wBAEAgE,EAAAA,2BACAA,EAAAA,gCAEAmkB,EAAAA,aAAY1tB,KAAA,CAAC,yCC3GhB,SAAAyyB,IAAA,IAAAxuB,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YA+FW4I,EAAA4mB,QAAS,EACT5mB,EAAA4lB,YAAsB,SACtB5lB,EAAAijB,eAAyB,QAOzBjjB,EAAAqR,iBAA2B,EAC3BrR,EAAA4E,UAAY,UAEZ5E,EAAA4K,eAAyB,EACzB5K,EAAAmX,cAAuB,GAEvBnX,EAAAgmB,gBAA0B,EAC1BhmB,EAAAimB,gBAA0B,EAC1BjmB,EAAAkmB,kBAA4B,EAC5BlmB,EAAAmmB,mBAA6B,GAC7BnmB,EAAAomB,mBAA6B,GAK7BpmB,EAAAysB,aAAe,GACfzsB,EAAA+rB,WAAa,EACb/rB,EAAAqmB,cAAwB,EACxBrmB,EAAAqrB,YAAsB,EAEtBrrB,EAAAgsB,eAAyB,EAEzBhsB,EAAAsrB,eAAyB,EAExBtrB,EAAAmV,SAA8B,IAAIvR,EAAAA,aAClC5D,EAAAoV,WAAgC,IAAIxR,EAAAA,aAa9C5D,EAAAsJ,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBtJ,EAAAyiB,YAAsB,EACtBziB,EAAA0iB,WAAqB,EAErB1iB,EAAAmuB,mBAA0B,CAAEjC,SAAU,EAAGC,SAAU,YApDTj1B,EAAAs3B,EAAAjrB,GAsD1CirB,EAAAz3B,UAAAkN,OAAA,WACEV,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEPA,KAAK40B,gBACR50B,KAAK+2B,mBAAqB,CAAEjC,SAAU,EAAGC,SAAU,IAErD/0B,KAAKkS,OAAS,CAAC,GAAKlS,KAAK+2B,mBAAmBhC,SAAU,GAAI,GAAK/0B,KAAK+2B,mBAAmBjC,SAAU,IAEjG90B,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,OACdiZ,UAAWnrB,KAAKovB,MAChBhE,UAAWprB,KAAKqvB,MAChBhE,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKsvB,eACjB7D,WAAYzrB,KAAKuvB,eACjBljB,WAAYrM,KAAKwvB,OACjBziB,WAAY/M,KAAKqP,WACjBwc,eAAgB7rB,KAAK6rB,iBAGnB7rB,KAAK40B,gBACP50B,KAAKiQ,KAAKvJ,QAAU1G,KAAK+2B,mBAAmBjC,UAG9C90B,KAAKsQ,cAELtQ,KAAKs1B,YAAct1B,KAAKu1B,iBACxBv1B,KAAKw1B,YAAcx1B,KAAKy1B,iBACxBz1B,KAAK01B,aAAe11B,KAAK21B,iBAEzB31B,KAAK41B,WAAa51B,KAAK61B,gBACvB71B,KAAK81B,WAAa91B,KAAK+1B,gBACvB/1B,KAAK+sB,WAAa/sB,KAAKg2B,gBAEvBh2B,KAAKiwB,YACLjwB,KAAKiN,cAAgBjN,KAAKkwB,mBAC1BlwB,KAAKqS,UAAY,aAAarS,KAAKiQ,KAAK+b,QAAO,OAAMhsB,KAAKkS,OAAO,GAAKlS,KAAK+2B,mBAAmBjC,UAAQ,KAGxGsC,EAAAz3B,UAAAw3B,4BAAA,SAA4B1a,EAAO4Z,GAAnC,IAAAztB,EAAA5I,KACMyc,EAAMyY,KAAKJ,SACb90B,KAAK+2B,mBAAmBjC,SAAW1nB,KAAKuF,IAAI3S,KAAK+2B,mBAAmBjC,SAAUrY,EAAMyY,KAAKxuB,QAEzF1G,KAAK+2B,mBAAmBhC,SAAW3nB,KAAKuF,IAAI3S,KAAK+2B,mBAAmBhC,SAAUtY,EAAMyY,KAAKxuB,QAEvF2vB,IAAer2B,KAAK+P,QAAQrP,OAAS,GACvC6E,YAAW,WAAM,OAAAqD,EAAKiE,aAI1BuqB,EAAAz3B,UAAAk2B,cAAA,WACE,IAAMnuB,EAAU1H,KAAKs1B,YAAY50B,QAAUV,KAAKiQ,KAAKvJ,OAAS1G,KAAKq1B,aAAe,GAElF,OAAO/H,EAAAA,YACJ0H,WAAW,CAAC,EAAGh1B,KAAKiQ,KAAKpJ,QACzB8Z,aAAajZ,GACbuuB,aAAavuB,EAAU,GACvBqO,OAAO/V,KAAKs1B,cAGjB8B,EAAAz3B,UAAAo2B,cAAA,WACE,IAAMlvB,EAAQ7G,KAAK41B,WAAW9gB,YACxBpN,EAAU1H,KAAKw1B,YAAY90B,QAAUmG,EAAQ7G,KAAK20B,WAAa,GACrE,OAAOrH,EAAAA,YAAY0H,WAAW,CAAC,EAAGnuB,IAAQ8Z,aAAajZ,GAASqO,OAAO/V,KAAKw1B,cAG9E4B,EAAAz3B,UAAAq2B,cAAA,WACE,IAAM1hB,EAAQ0T,EAAAA,cAAc7I,MAAM,CAACnf,KAAKiQ,KAAKvJ,OAAQ,IAAIqP,OAAO/V,KAAK01B,cACrE,OAAO11B,KAAKivB,aAAe3a,EAAM8c,OAAS9c,GAG5C8iB,EAAAz3B,UAAA41B,eAAA,mBACQxf,EAAS,OACf,IAAoB,IAAAkB,EAAA9W,EAAAH,KAAK+P,SAAOwB,EAAA0F,EAAAtW,QAAA4Q,EAAA1Q,KAAA0Q,EAAA0F,EAAAtW,OAAE,CAA7B,IAAM0kB,EAAK9T,EAAA3Q,MACTmV,EAAO+R,SAASzC,EAAM7U,QACzBuF,EAAO3U,KAAKikB,EAAM7U,yGAItB,OAAOuF,GAGTqhB,EAAAz3B,UAAA81B,eAAA,uBACQ1f,EAAS,OACf,IAAoB,IAAAxE,EAAApR,EAAAH,KAAK+P,SAAO0B,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAA7B,IAAM0kB,EAAK5T,EAAA7Q,UACd,IAAgB,IAAAgnB,GAAAsO,OAAA,EAAA/1B,EAAAklB,EAAM1U,SAAMkX,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAAzB,IAAMvB,EAACyoB,EAAAjnB,MACLmV,EAAO+R,SAAS1oB,EAAEoR,QACrBuF,EAAO3U,KAAKhC,EAAEoR,4MAKpB,OAAOuF,GAGTqhB,EAAAz3B,UAAAg2B,eAAA,uBACQ5f,EAAS,OACf,IAAoB,IAAAxE,EAAApR,EAAAH,KAAK+P,SAAO0B,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAA7B,IAAM0kB,EAAK5T,EAAA7Q,UACd,IAAgB,IAAAgnB,GAAAuO,OAAA,EAAAh2B,EAAAklB,EAAM1U,SAAMkX,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAAzB,IAAMvB,EAACyoB,EAAAjnB,MACLmV,EAAO+R,SAAS1oB,EAAEwB,QACrBmV,EAAO3U,KAAKhC,EAAEwB,4MAQpB,MAAO,CAHKwM,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAA,CAAK,GAAMyU,IACf/V,KAAKmxB,UAAY/jB,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAA,CAAKtB,KAAKmxB,WAAcpb,IAAU3I,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAA,CAAK,GAAMyU,MAKpFqhB,EAAAz3B,UAAAy2B,eAAA,SAAe/Q,GACb,MAAO,aAAarlB,KAAK41B,WAAWvQ,EAAM7U,OAAM,QAGlD4mB,EAAAz3B,UAAAigB,QAAA,SAAQ1O,EAAMmU,GACRA,IACFnU,EAAKP,OAAS0U,EAAM5U,MAGtBzQ,KAAKsP,OAAOZ,KAAKwC,IAGnBkmB,EAAAz3B,UAAAupB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MAGd2mB,EAAAz3B,UAAAswB,UAAA,WACE,IAAIla,EAEFA,EADsB,YAApB/V,KAAKqP,WACErP,KAAKw1B,YAELx1B,KAAK01B,aAGhB11B,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQpP,KAAKqP,WAAY0G,EAAQ/V,KAAKusB,eAG3E6K,EAAAz3B,UAAAuwB,iBAAA,WACE,IAAM6B,EAAO,CACXvkB,UAAWxN,KAAKqP,WAChB+P,YAAQpc,EACR+S,OAAQ,GACR4G,WAAO3Z,EACP0F,SAAU1I,KAAK6rB,gBAWjB,MATuB,YAAnBkG,EAAKvkB,WACPukB,EAAKhc,OAAS/V,KAAKw1B,YACnBzD,EAAK3S,OAASpf,KAAKof,OACnB2S,EAAKpV,MAAQ3c,KAAKwuB,cAElBuD,EAAKhc,OAAS/V,KAAK01B,aACnB3D,EAAK3S,OAASpf,KAAKof,OAAO9K,OAGrByd,GAGTqF,EAAAz3B,UAAAqyB,iBAAA,SAAiB5oB,OAAEvC,EAAKuC,EAAAvC,MACtB7G,KAAKsrB,WAAazkB,EAClB7G,KAAK6M,UAGPuqB,EAAAz3B,UAAAsyB,kBAAA,SAAkB7oB,OAAE1C,EAAM0C,EAAA1C,OACxB1G,KAAKqrB,YAAc3kB,EACnB1G,KAAK6M,UAGPuqB,EAAAz3B,UAAAuyB,WAAA,SAAWzV,EAAO4I,EAAO8P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAO/R,OAAOyM,OAAO,GAAI0Q,GAC3B4I,IACFhU,EAAKV,OAAS0U,EAAM5U,MAGtB,IAAMsY,EAAQ/oB,KAAK+P,QAChBuI,KAAI,SAAA/H,GAAK,OAAAA,EAAEI,UACX2lB,OACA5O,QAAO,SAAAjnB,GACN,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,KAEjBhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,UAIvD3Q,KAAK+f,cAAaze,EAAOynB,GACzB/oB,KAAK+d,SAASrP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,iBAGlDqX,EAAAz3B,UAAAyyB,aAAA,SAAa3V,EAAO4I,EAAO8P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAO/R,OAAOyM,OAAO,GAAI0Q,GAC3B4I,IACFhU,EAAKV,OAAS0U,EAAM5U,MAGtBzQ,KAAK+f,cAAgB/f,KAAK+f,cAAc2H,QAAO,SAAAjnB,GAC7C,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,OAEfhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,WAIvD3Q,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,oBApQV9Q,wBA9F3CzF,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,6BACVC,SAAU,6vFA8EVC,cAAeC,EAAAA,kBAAkBC,KACjC6D,gBAAiBC,EAAAA,wBAAwBC,OACzCtB,WAAY,CACVuB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACTqE,UAAW,MAEbpE,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAGqE,UAAW,ykDAMjDnI,EAAAA,2BACAA,EAAAA,8BACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,+BACAA,EAAAA,yBACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,kCACAA,EAAAA,mCACAA,EAAAA,mCACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,4BACAA,EAAAA,0BACAA,EAAAA,4BACAA,EAAAA,0BACAA,EAAAA,yBACAA,EAAAA,6BACAA,EAAAA,mCACAA,EAAAA,6BACAA,EAAAA,wBAEAgE,EAAAA,2BACAA,EAAAA,gCAEAmkB,EAAAA,aAAY1tB,KAAA,CAAC,yCCnIhB,SAAA0yB,IAAA,IAAAzuB,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YAsFW4I,EAAA4mB,QAAS,EACT5mB,EAAA4lB,YAAsB,SACtB5lB,EAAAijB,eAAyB,QAOzBjjB,EAAAqR,iBAA2B,EAE3BrR,EAAA4K,eAAyB,EACzB5K,EAAAmX,cAAuB,GAEvBnX,EAAAgmB,gBAA0B,EAC1BhmB,EAAAimB,gBAA0B,EAC1BjmB,EAAAkmB,kBAA4B,EAC5BlmB,EAAAmmB,mBAA6B,GAC7BnmB,EAAAomB,mBAA6B,GAK7BpmB,EAAA+rB,WAAa,EACb/rB,EAAAqmB,cAAwB,EACxBrmB,EAAAsrB,eAAyB,EAExBtrB,EAAAmV,SAA8B,IAAIvR,EAAAA,aAClC5D,EAAAoV,WAAgC,IAAIxR,EAAAA,aAY9C5D,EAAAsJ,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBtJ,EAAAyiB,YAAsB,EACtBziB,EAAA0iB,WAAqB,WA3C6BxrB,EAAAu3B,EAAAlrB,GA8ClDkrB,EAAA13B,UAAAkN,OAAA,WACEV,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEZA,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,OACdiZ,UAAWnrB,KAAKovB,MAChBhE,UAAWprB,KAAKqvB,MAChBhE,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKsvB,eACjB7D,WAAYzrB,KAAKuvB,eACjBljB,WAAYrM,KAAKwvB,OACjBziB,WAAY/M,KAAKqP,WACjBwc,eAAgB7rB,KAAK6rB,iBAGvB7rB,KAAKsQ,cAELtQ,KAAKs1B,YAAct1B,KAAKu1B,iBACxBv1B,KAAKw1B,YAAcx1B,KAAKy1B,iBACxBz1B,KAAKw2B,YAAcx2B,KAAK21B,iBAExB31B,KAAK6e,OAAS7e,KAAKsnB,YACnBtnB,KAAKif,OAASjf,KAAK+vB,YAEnB/vB,KAAKiwB,YACLjwB,KAAKiN,cAAgBjN,KAAKkwB,mBAE1BlwB,KAAKqS,UAAY,aAAarS,KAAKiQ,KAAK+b,QAAO,MAAMhsB,KAAKkS,OAAO,GAAE,KAGrEmlB,EAAA13B,UAAA41B,eAAA,mBACQxf,EAAS,OACf,IAAoB,IAAAkB,EAAA9W,EAAAH,KAAK+P,SAAOwB,EAAA0F,EAAAtW,QAAA4Q,EAAA1Q,KAAA0Q,EAAA0F,EAAAtW,OAAE,CAA7B,IAAM0kB,EAAK9T,EAAA3Q,MACTmV,EAAO+R,SAASzC,EAAM7U,QACzBuF,EAAO3U,KAAKikB,EAAM7U,yGAItB,OAAOuF,GAGTshB,EAAA13B,UAAA81B,eAAA,uBACQ1f,EAAS,OACf,IAAoB,IAAAxE,EAAApR,EAAAH,KAAK+P,SAAO0B,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAA7B,IAAM0kB,EAAK5T,EAAA7Q,UACd,IAAgB,IAAAgnB,GAAAsO,OAAA,EAAA/1B,EAAAklB,EAAM1U,SAAMkX,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAAzB,IAAMvB,EAACyoB,EAAAjnB,MACLmV,EAAO+R,SAAS1oB,EAAEoR,QACrBuF,EAAO3U,KAAKhC,EAAEoR,4MAKpB,OAAOuF,GAGTshB,EAAA13B,UAAAg2B,eAAA,WACE,MAAO,CAAC,EAAG,MAGb0B,EAAA13B,UAAA2nB,UAAA,WACE,IAAM5f,EAAU1H,KAAKs1B,YAAY50B,QAAUV,KAAKiQ,KAAKpJ,MAAQ7G,KAAK20B,WAAa,GAE/E,OAAOrH,EAAAA,YAAY0H,WAAW,CAAC,EAAGh1B,KAAKiQ,KAAKpJ,QAAQ8Z,aAAajZ,GAASqO,OAAO/V,KAAKs1B,cAGxF+B,EAAA13B,UAAAowB,UAAA,WACE,IAAMzb,EAAQ0T,EAAAA,cAAc7I,MAAM,CAACnf,KAAKiQ,KAAKvJ,OAAQ,IAAIqP,OAAO/V,KAAKw2B,aACrE,OAAOx2B,KAAKivB,aAAe3a,EAAM8c,OAAS9c,GAG5C+iB,EAAA13B,UAAAy2B,eAAA,SAAe/Q,GACb,MAAO,aAAarlB,KAAK6e,OAAOwG,EAAM5U,MAAK,QAG7C4mB,EAAA13B,UAAAigB,QAAA,SAAQ1O,EAAMmU,GACRA,IACFnU,EAAKP,OAAS0U,EAAM5U,MAGtBzQ,KAAKsP,OAAOZ,KAAKwC,IAGnBmmB,EAAA13B,UAAAupB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MAGd4mB,EAAA13B,UAAAswB,UAAA,WACE,IAAIla,EAEFA,EADsB,YAApB/V,KAAKqP,WACErP,KAAKw1B,YAELx1B,KAAKw2B,YAGhBx2B,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQpP,KAAKqP,WAAY0G,EAAQ/V,KAAKusB,eAG3E8K,EAAA13B,UAAAuwB,iBAAA,WACE,IAAM6B,EAAO,CACXvkB,UAAWxN,KAAKqP,WAChB+P,YAAQpc,EACR+S,OAAQ,GACR4G,WAAO3Z,EACP0F,SAAU1I,KAAK6rB,gBAWjB,MATuB,YAAnBkG,EAAKvkB,WACPukB,EAAKhc,OAAS/V,KAAKw1B,YACnBzD,EAAK3S,OAASpf,KAAKof,OACnB2S,EAAKpV,MAAQ3c,KAAKwuB,cAElBuD,EAAKhc,OAAS/V,KAAKw2B,YACnBzE,EAAK3S,OAASpf,KAAKof,OAAO9K,OAGrByd,GAGTsF,EAAA13B,UAAAqyB,iBAAA,SAAiB5oB,OAAEvC,EAAKuC,EAAAvC,MACtB7G,KAAKsrB,WAAazkB,EAClB7G,KAAK6M,UAGPwqB,EAAA13B,UAAAsyB,kBAAA,SAAkB7oB,OAAE1C,EAAM0C,EAAA1C,OACxB1G,KAAKqrB,YAAc3kB,EACnB1G,KAAK6M,UAGPwqB,EAAA13B,UAAAuyB,WAAA,SAAWzV,EAAO4I,EAAO8P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAO/R,OAAOyM,OAAO,GAAI0Q,GAC3B4I,IACFhU,EAAKV,OAAS0U,EAAM5U,MAGtB,IAAMsY,EAAQ/oB,KAAK+P,QAChBuI,KAAI,SAAA/H,GAAK,OAAAA,EAAEI,UACX2lB,OACA5O,QAAO,SAAAjnB,GACN,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,KAEjBhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,UAIvD3Q,KAAK+f,cAAaze,EAAOynB,GACzB/oB,KAAK+d,SAASrP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,iBAGlDsX,EAAA13B,UAAAyyB,aAAA,SAAa3V,EAAO4I,EAAO8P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAO/R,OAAOyM,OAAO,GAAI0Q,GAC3B4I,IACFhU,EAAKV,OAAS0U,EAAM5U,MAGtBzQ,KAAK+f,cAAgB/f,KAAK+f,cAAc2H,QAAO,SAAAjnB,GAC7C,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,OAEfhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,WAIvD3Q,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,oBAlNF9Q,wBArFnDzF,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,qCACVC,SAAU,41EAqEVC,cAAeC,EAAAA,kBAAkBC,KACjC6D,gBAAiBC,EAAAA,wBAAwBC,OACzCtB,WAAY,CACVuB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACTqE,UAAW,MAEbpE,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAGqE,UAAW,ykDAMjDnI,EAAAA,2BACAA,EAAAA,8BACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,+BACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,kCACAA,EAAAA,mCACAA,EAAAA,mCACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,4BACAA,EAAAA,6BACAA,EAAAA,wBAEAgE,EAAAA,2BACAA,EAAAA,gCAEAmkB,EAAAA,aAAY1tB,KAAA,CAAC,0BChIJ2yB,kBCYZ,SAAAC,IAAA,IAAA3uB,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YA0FW4I,EAAA4mB,QAAS,EACT5mB,EAAA4lB,YAAsB,SACtB5lB,EAAAijB,eAAyB,QAOzBjjB,EAAAqR,iBAA2B,EAE3BrR,EAAA4K,eAAyB,EACzB5K,EAAAmX,cAAuB,GAEvBnX,EAAAgmB,gBAA0B,EAC1BhmB,EAAAimB,gBAA0B,EAC1BjmB,EAAAkmB,kBAA4B,EAC5BlmB,EAAAmmB,mBAA6B,GAC7BnmB,EAAAomB,mBAA6B,GAK7BpmB,EAAA+rB,WAAa,EACb/rB,EAAAqmB,cAAwB,EAExBrmB,EAAAgsB,eAAyB,EAEzBhsB,EAAAsrB,eAAyB,EAExBtrB,EAAAmV,SAA8B,IAAIvR,EAAAA,aAClC5D,EAAAoV,WAAgC,IAAIxR,EAAAA,aAa9C5D,EAAAsJ,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBtJ,EAAAyiB,YAAsB,EACtBziB,EAAA0iB,WAAqB,EAErB1iB,EAAAmuB,mBAA0B,CAAEjC,SAAU,EAAGC,SAAU,YAjDJj1B,EAAAy3B,EAAAprB,GAmD/CorB,EAAA53B,UAAAkN,OAAA,WACEV,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEPA,KAAK40B,gBACR50B,KAAK+2B,mBAAqB,CAAEjC,SAAU,EAAGC,SAAU,IAErD/0B,KAAKkS,OAAS,CAAC,GAAKlS,KAAK+2B,mBAAmBhC,SAAU,GAAI,GAAK/0B,KAAK+2B,mBAAmBjC,SAAU,IAEjG90B,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,OACdiZ,UAAWnrB,KAAKovB,MAChBhE,UAAWprB,KAAKqvB,MAChBhE,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKsvB,eACjB7D,WAAYzrB,KAAKuvB,eACjBljB,WAAYrM,KAAKwvB,OACjBziB,WAAY/M,KAAKqP,WACjBwc,eAAgB7rB,KAAK6rB,iBAGnB7rB,KAAK40B,gBACP50B,KAAKiQ,KAAKvJ,QAAU1G,KAAK+2B,mBAAmBjC,UAG9C90B,KAAKsQ,cAELtQ,KAAKs1B,YAAct1B,KAAKu1B,iBACxBv1B,KAAKw1B,YAAcx1B,KAAKy1B,iBACxBz1B,KAAKw2B,YAAcx2B,KAAK21B,iBAExB31B,KAAK6e,OAAS7e,KAAKsnB,YACnBtnB,KAAKif,OAASjf,KAAK+vB,YAEnB/vB,KAAKiwB,YACLjwB,KAAKiN,cAAgBjN,KAAKkwB,mBAE1BlwB,KAAKqS,UAAY,aAAarS,KAAKiQ,KAAK+b,QAAO,OAAMhsB,KAAKkS,OAAO,GAAKlS,KAAK+2B,mBAAmBjC,UAAQ,KAGxGyC,EAAA53B,UAAA41B,eAAA,mBACQxf,EAAS,OACf,IAAoB,IAAAkB,EAAA9W,EAAAH,KAAK+P,SAAOwB,EAAA0F,EAAAtW,QAAA4Q,EAAA1Q,KAAA0Q,EAAA0F,EAAAtW,OAAE,CAA7B,IAAM0kB,EAAK9T,EAAA3Q,MACTmV,EAAO+R,SAASzC,EAAM7U,QACzBuF,EAAO3U,KAAKikB,EAAM7U,yGAGtB,OAAOuF,GAGTwhB,EAAA53B,UAAA81B,eAAA,uBACQ1f,EAAS,OACf,IAAoB,IAAAxE,EAAApR,EAAAH,KAAK+P,SAAO0B,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAA7B,IAAM0kB,EAAK5T,EAAA7Q,UACd,IAAgB,IAAAgnB,GAAAsO,OAAA,EAAA/1B,EAAAklB,EAAM1U,SAAMkX,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAAzB,IAAMvB,EAACyoB,EAAAjnB,MACLmV,EAAO+R,SAAS1oB,EAAEoR,QACrBuF,EAAO3U,KAAKhC,EAAEoR,4MAIpB,OAAOuF,GAGTwhB,EAAA53B,UAAAg2B,eAAA,uBACQ5f,EAAS,GACX2gB,EAAW,EACXC,EAAU,MACd,IAAoB,IAAAplB,EAAApR,EAAAH,KAAK+P,SAAO0B,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAA7B,IAAM0kB,EAAK5T,EAAA7Q,MACVg2B,EAAc,EACdC,EAAa,MACjB,IAAgB,IAAAjP,GAAAuO,OAAA,EAAAh2B,EAAAklB,EAAM1U,SAAMkX,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAAzB,IAAMvB,EAACyoB,EAAAjnB,MACNxB,EAAEwB,MAAQ,EACZg2B,GAAex3B,EAAEwB,MAEjBi2B,GAAcz3B,EAAEwB,MAElB81B,EAAWt3B,EAAEwB,MAAQ81B,EAAWt3B,EAAEwB,MAAQ81B,EAC1CC,EAAUv3B,EAAEwB,MAAQ+1B,EAAUv3B,EAAEwB,MAAQ+1B,oGAE1C5gB,EAAO3U,KAAKw1B,GACZ7gB,EAAO3U,KAAKy1B,qGAOd,OALA9gB,EAAO3U,KAAKs1B,GACZ3gB,EAAO3U,KAAKu1B,GAIL,CAFKvpB,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAA,CAAK,GAAMyU,IACf/V,KAAKmxB,UAAY/jB,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAA,CAAKtB,KAAKmxB,WAAcpb,IAAU3I,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAQyU,MAIjFwhB,EAAA53B,UAAA2nB,UAAA,WACE,IAAM5f,EAAU1H,KAAKs1B,YAAY50B,QAAUV,KAAKiQ,KAAKpJ,MAAQ7G,KAAK20B,WAAa,GAC/E,OAAOrH,EAAAA,YAAY0H,WAAW,CAAC,EAAGh1B,KAAKiQ,KAAKpJ,QAAQ8Z,aAAajZ,GAASqO,OAAO/V,KAAKs1B,cAGxFiC,EAAA53B,UAAAowB,UAAA,WACE,IAAMzb,EAAQ0T,EAAAA,cAAc7I,MAAM,CAACnf,KAAKiQ,KAAKvJ,OAAQ,IAAIqP,OAAO/V,KAAKw2B,aACrE,OAAOx2B,KAAKivB,aAAe3a,EAAM8c,OAAS9c,GAG5CijB,EAAA53B,UAAAw3B,4BAAA,SAA4B1a,EAAO4Z,GAAnC,IAAAztB,EAAA5I,KACMyc,EAAMyY,KAAKJ,SACb90B,KAAK+2B,mBAAmBjC,SAAW1nB,KAAKuF,IAAI3S,KAAK+2B,mBAAmBjC,SAAUrY,EAAMyY,KAAKxuB,QAEzF1G,KAAK+2B,mBAAmBhC,SAAW3nB,KAAKuF,IAAI3S,KAAK+2B,mBAAmBhC,SAAUtY,EAAMyY,KAAKxuB,QAEvF2vB,IAAer2B,KAAK+P,QAAQrP,OAAS,GACvC6E,YAAW,WAAM,OAAAqD,EAAKiE,aAI1B0qB,EAAA53B,UAAAy2B,eAAA,SAAe/Q,GACb,MAAO,cAAarlB,KAAK6e,OAAOwG,EAAM5U,OAAS,GAAC,QAGlD8mB,EAAA53B,UAAAigB,QAAA,SAAQ1O,EAAMmU,GACRA,IACFnU,EAAKP,OAAS0U,EAAM5U,MAGtBzQ,KAAKsP,OAAOZ,KAAKwC,IAGnBqmB,EAAA53B,UAAAupB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MAGd8mB,EAAA53B,UAAAswB,UAAA,WACE,IAAIla,EAEFA,EADsB,YAApB/V,KAAKqP,WACErP,KAAKw1B,YAELx1B,KAAKw2B,YAGhBx2B,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQpP,KAAKqP,WAAY0G,EAAQ/V,KAAKusB,eAG3EgL,EAAA53B,UAAAuwB,iBAAA,WACE,IAAM6B,EAAO,CACXvkB,UAAWxN,KAAKqP,WAChB+P,YAAQpc,EACR+S,OAAQ,GACR4G,WAAO3Z,EACP0F,SAAU1I,KAAK6rB,gBAWjB,MATuB,YAAnBkG,EAAKvkB,WACPukB,EAAKhc,OAAS/V,KAAKw1B,YACnBzD,EAAK3S,OAASpf,KAAKof,OACnB2S,EAAKpV,MAAQ3c,KAAKwuB,cAElBuD,EAAKhc,OAAS/V,KAAKw2B,YACnBzE,EAAK3S,OAASpf,KAAKof,OAAO9K,OAGrByd,GAGTwF,EAAA53B,UAAAqyB,iBAAA,SAAiB5oB,OAAEvC,EAAKuC,EAAAvC,MACtB7G,KAAKsrB,WAAazkB,EAClB7G,KAAK6M,UAGP0qB,EAAA53B,UAAAsyB,kBAAA,SAAkB7oB,OAAE1C,EAAM0C,EAAA1C,OACxB1G,KAAKqrB,YAAc3kB,EACnB1G,KAAK6M,UAGP0qB,EAAA53B,UAAAuyB,WAAA,SAAWzV,EAAO4I,EAAO8P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAO/R,OAAOyM,OAAO,GAAI0Q,GAC3B4I,IACFhU,EAAKV,OAAS0U,EAAM5U,MAGtB,IAAMsY,EAAQ/oB,KAAK+P,QAChBuI,KAAI,SAAA/H,GAAK,OAAAA,EAAEI,UACX2lB,OACA5O,QAAO,SAAAjnB,GACN,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,KAEjBhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,UAIvD3Q,KAAK+f,cAAaze,EAAOynB,GACzB/oB,KAAK+d,SAASrP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,iBAGlDwX,EAAA53B,UAAAyyB,aAAA,SAAa3V,EAAO4I,EAAO8P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAO/R,OAAOyM,OAAO,GAAI0Q,GAC3B4I,IACFhU,EAAKV,OAAS0U,EAAM5U,MAGtBzQ,KAAK+f,cAAgB/f,KAAK+f,cAAc2H,QAAO,SAAAjnB,GAC7C,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,OAEfhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,WAIvD3Q,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,oBA/PL9Q,wBAzFhDzF,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,kCACVC,SAAU,4lFAyEVC,cAAeC,EAAAA,kBAAkBC,KACjC6D,gBAAiBC,EAAAA,wBAAwBC,OACzCtB,WAAY,CACVuB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACTqE,UAAW,MAEbpE,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAGqE,UAAW,ykDAMjDnI,EAAAA,2BACAA,EAAAA,8BACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,+BACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,kCACAA,EAAAA,mCACAA,EAAAA,mCACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,4BACAA,EAAAA,yBACAA,EAAAA,6BACAA,EAAAA,mCACAA,EAAAA,6BACAA,EAAAA,wBAEAgE,EAAAA,2BACAA,EAAAA,gCAEAmkB,EAAAA,aAAY1tB,KAAA,CAAC,uBDvIJ2yB,GAAAA,EAAAA,UAAAA,EAAAA,QAAO,KACjB,SAAA,WACAA,GAAA,SAAA,6BAGF,SAAAE,IA8DWx3B,KAAAuI,KAAO,WAQPvI,KAAAia,iBAA2B,EAG3Bja,KAAAsM,YAAsB,EACtBtM,KAAA40B,eAAyB,EAEzB50B,KAAAk0B,eAAyB,EAExBl0B,KAAAsP,OAAS,IAAI9C,EAAAA,aACbxM,KAAA+d,SAAW,IAAIvR,EAAAA,aACfxM,KAAAge,WAAa,IAAIxR,EAAAA,aACjBxM,KAAAy3B,uBAAyB,IAAIjrB,EAAAA,aAQvCxM,KAAA03B,kBAAmH,UAEnHF,EAAA73B,UAAAgN,YAAA,SAAYC,GACV5M,KAAK6M,UAGP2qB,EAAA73B,UAAAkN,OAAA,iBAEMhG,EAFN+B,EAAA5I,KACEA,KAAK23B,wBAED33B,KAAK2Q,OAAOjQ,SACdmG,EAAQ7G,KAAK6e,OAAO/J,aAEtBjO,EAAQuG,KAAK8V,MAAMrc,GACnB,IAQI4jB,EAREyG,EAAY9jB,KAAKuF,IAAI3S,KAAKif,OAAOlJ,SAAS,GAAI,GAE9CwP,IAAEnc,EAAA,IACLkuB,EAAAA,QAAQvC,UAAW,EACpB3rB,EAACkuB,EAAAA,QAAQxC,UAAW,KAElB8C,EAASN,EAAAA,QAAQvC,SAGH,eAAd/0B,KAAKuI,OACPkiB,EAAQzqB,KAAK2Q,OAAO2H,KAAI,SAAAlZ,GAAK,OAAAA,EAAEwB,SAAO2pB,QAAO,SAACC,EAAKprB,GAAM,OAAAorB,EAAMprB,IAAG,IAGpEY,KAAK63B,KAAO73B,KAAK2Q,OAAO2H,KAAI,SAAClZ,EAAG+pB,GAC9B,IAAIvoB,EAAQxB,EAAEwB,MACR4P,EAAQ5H,EAAKkvB,SAAS14B,GACtB4pB,EAAiBjM,EAAYvM,GAC7ByjB,EAAarrB,EAAKqrB,WACxB2D,EAASh3B,EAAQ,EAAI02B,EAAAA,QAAQvC,SAAWuC,EAAAA,QAAQxC,SAEhD,IAAMiD,EAAW,CACfn3B,MAAKA,EACL4P,MAAKA,EACLyjB,WAAUA,EACV/iB,KAAM9R,EACNyH,MAAKA,EACLmiB,eAAcA,EACdtiB,OAAQ,EACR+L,EAAG,EACHF,EAAG,GAGL,GAAkB,aAAd3J,EAAKL,KACPwvB,EAAIrxB,OAAS0G,KAAKsI,IAAI9M,EAAKqW,OAAOre,GAASgI,EAAKqW,OAAOiS,IACvD6G,EAAItlB,EAAI7J,EAAKiW,OAAOrO,GAGlBunB,EAAIxlB,EADF3R,EAAQ,EACFgI,EAAKqW,OAAO,GAEZrW,EAAKqW,OAAOre,QAEjB,GAAkB,YAAdgI,EAAKL,KAAoB,CAClC,IACMyvB,GADAC,EAAU1S,EAAGqS,IACOh3B,EAC1B2kB,EAAGqS,IAAWh3B,EAEdm3B,EAAIrxB,OAASkC,EAAKqW,OAAOgZ,GAAWrvB,EAAKqW,OAAO+Y,GAChDD,EAAItlB,EAAI,EACRslB,EAAIxlB,EAAI3J,EAAKqW,OAAO+Y,GACpBD,EAAIE,QAAUA,EACdF,EAAIC,QAAUA,OACT,GAAkB,eAAdpvB,EAAKL,KAAuB,CACrC,IAAI0vB,EACAD,GADAC,EAAU1S,EAAGqS,IACOh3B,EACxB2kB,EAAGqS,IAAWh3B,EAEV6pB,EAAQ,GACVwN,EAAqB,IAAVA,EAAiBxN,EAC5BuN,EAAqB,IAAVA,EAAiBvN,IAE5BwN,EAAU,EACVD,EAAU,GAGZD,EAAIrxB,OAASkC,EAAKqW,OAAOgZ,GAAWrvB,EAAKqW,OAAO+Y,GAChDD,EAAItlB,EAAI,EACRslB,EAAIxlB,EAAI3J,EAAKqW,OAAO+Y,GACpBD,EAAIE,QAAUA,EACdF,EAAIC,QAAUA,EACdp3B,GAASo3B,EAAUC,GAASzS,QAAQ,GAAK,IAGb,YAA1B5c,EAAKwW,OAAO5R,UACduqB,EAAIhZ,MAAQnW,EAAKwW,OAAOC,SAAS7O,GAEf,aAAd5H,EAAKL,MACPwvB,EAAIhZ,MAAQnW,EAAKwW,OAAOC,SAASze,GACjCm3B,EAAIvY,cAAgB5W,EAAKwW,OAAOgO,uBAAuBxsB,KAEvDm3B,EAAIhZ,MAAQnW,EAAKwW,OAAOC,SAAS0Y,EAAIC,SACrCD,EAAIvY,cAAgB5W,EAAKwW,OAAOgO,uBAAuB2K,EAAIC,QAASD,EAAIE,UAI5E,IAAIrZ,EAAeoK,EAiBnB,OAhBA+O,EAAIG,UAAYlP,EAAiB,IAAMpoB,EAAM8T,iBACzC9L,EAAK+V,aACPC,EAAkBhW,EAAK+V,WAAU,MAAMqK,EACvC+O,EAAI7mB,KAAKP,OAAS/H,EAAK+V,WACvBoZ,EAAIG,UAAYtvB,EAAK+V,WAAa,IAAMoZ,EAAIG,WAG9CH,EAAII,YAAcvvB,EAAKqR,qBACnBjX,EACA,yCAC4Bga,EAAY4B,GAAa,+CAErDhW,EAAKwvB,oBAAsBxvB,EAAKwvB,oBAAoBx3B,GAASA,EAAM8T,kBACrE,kBAGKqjB,KAGT/3B,KAAKq4B,oBAGPb,EAAA73B,UAAA04B,iBAAA,WAAA,IAAAzvB,EAAA5I,KACE,GAAkB,YAAdA,KAAKuI,KAAoB,CAC3BvI,KAAK03B,kBAAoB,GACzB,IAAMY,EAAe,GACrBA,EAAQ3nB,OAAS3Q,KAAK2e,WACtB,IAAM4Z,EAAgBv4B,KAAK2Q,OAAO2H,KAAI,SAAAlZ,GAAK,OAAAA,EAAEwB,SAAO2pB,QAAO,SAACC,EAAKprB,GAAM,OAACA,EAAI,EAAIorB,EAAMprB,EAAIorB,IAAM,GAC1FgO,EAAgBx4B,KAAK2Q,OAAO2H,KAAI,SAAAlZ,GAAK,OAAAA,EAAEwB,SAAO2pB,QAAO,SAACC,EAAKprB,GAAM,OAACA,EAAI,EAAIorB,EAAMprB,EAAIorB,IAAM,GAChG8N,EAAQ7N,MAAQ8N,EAAgBC,EAChCF,EAAQ7lB,EAAI,EACZ6lB,EAAQ/lB,EAAI,EACR+lB,EAAQ7N,MAAQ,EAClB6N,EAAQ5xB,OAAS1G,KAAKif,OAAOsZ,GAE7BD,EAAQ5xB,OAAS1G,KAAKif,OAAOuZ,GAE/BF,EAAQzxB,MAAQ7G,KAAK6e,OAAO/J,YAC5B9U,KAAK03B,kBAAkBt2B,KAAKk3B,QAE5Bt4B,KAAK03B,kBAAoB13B,KAAK2Q,OAAO2H,KAAI,SAAAlZ,GACvC,IAAMk5B,EAAe,GAOrB,OANAA,EAAQ3nB,OAAS/H,EAAK+V,WAAa/V,EAAK+V,WAAavf,EAAEoR,MACvD8nB,EAAQ7N,MAAQrrB,EAAEwB,MAClB03B,EAAQ7lB,EAAI7J,EAAKiW,OAAOzf,EAAEoR,OAC1B8nB,EAAQ/lB,EAAI3J,EAAKqW,OAAO,GACxBqZ,EAAQ5xB,OAASkC,EAAKqW,OAAOqZ,EAAQ7N,OAAS7hB,EAAKqW,OAAO,GAC1DqZ,EAAQzxB,MAAQ+B,EAAKiW,OAAO/J,YACrBwjB,MAKbd,EAAA73B,UAAAg4B,sBAAA,WACE33B,KAAKma,iBAAmBna,KAAKia,qBAAkBjX,EAAY,MAC3DhD,KAAKsa,YAActa,KAAKia,qBAAkBjX,EAAY,WAGxDw0B,EAAA73B,UAAAkgB,SAAA,SAASC,GACP,QAAK9f,KAAK+f,oBAIM/c,IAHHhD,KAAK+f,cAAcC,MAAK,SAAA5gB,GACnC,OAAO0gB,EAAMrP,OAASrR,EAAEqR,MAAQqP,EAAMnP,SAAWvR,EAAEuR,WAKvD6mB,EAAA73B,UAAAigB,QAAA,SAAQ1O,GACNlR,KAAKsP,OAAOZ,KAAKwC,IAGnBsmB,EAAA73B,UAAAm4B,SAAA,SAASW,GACP,OAAIA,EAASjoB,MACJioB,EAASjoB,MAEXioB,EAAShoB,MAGlB+mB,EAAA73B,UAAAupB,QAAA,SAAQC,EAAO4O,GACb,OAAOA,EAAIvnB,OAGbgnB,EAAA73B,UAAA+4B,iBAAA,SAAiBvP,EAAOwP,GACtB,OAAOxP,EAAQ,IAAMwP,EAAShoB,OAAS,IAAMgoB,EAASlO,iCA7QzDjhB,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,gCACVC,SAAU,2+CA8CVgE,gBAAiBC,EAAAA,wBAAwBC,OACzCtB,WAAY,CACVuB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,IAEXC,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,6CAMnC9D,EAAAA,oBACAA,EAAAA,sBACAA,EAAAA,sBACAA,EAAAA,sBACAA,EAAAA,sBACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,6BACAA,EAAAA,mCACAA,EAAAA,6BACAA,EAAAA,sBAEAgE,EAAAA,yBACAA,EAAAA,2BACAA,EAAAA,uCACAA,EAAAA,4BE5EH,SAAA0qB,IA+DE54B,KAAA03B,kBAAmH,GAG1G13B,KAAAuI,KAAO,WAKPvI,KAAAia,iBAA2B,EAM3Bja,KAAAsM,YAAsB,EACtBtM,KAAA40B,eAAyB,EAEzB50B,KAAAk0B,eAAyB,EAExBl0B,KAAAsP,OAAS,IAAI9C,EAAAA,aACbxM,KAAA+d,SAAW,IAAIvR,EAAAA,aACfxM,KAAAge,WAAa,IAAIxR,EAAAA,aACjBxM,KAAA64B,sBAAwB,IAAIrsB,EAAAA,oBAKtCosB,EAAAj5B,UAAAgN,YAAA,SAAYC,GACV5M,KAAK6M,UAGP+rB,EAAAj5B,UAAAkN,OAAA,iBAAAjE,EAAA5I,KACEA,KAAK23B,wBACL,IAIIC,EAEAnN,EANElF,IAAEnc,EAAA,IACLkuB,EAAAA,QAAQvC,UAAW,EACpB3rB,EAACkuB,EAAAA,QAAQxC,UAAW,KAGtB8C,EAASN,EAAAA,QAAQvC,SAEC,eAAd/0B,KAAKuI,OACPkiB,EAAQzqB,KAAK2Q,OAAO2H,KAAI,SAAAlZ,GAAK,OAAAA,EAAEwB,SAAO2pB,QAAO,SAACC,EAAKprB,GAAM,OAAAorB,EAAMprB,IAAG,IAEpE,IAAMsxB,EAAYtjB,KAAKuF,IAAI3S,KAAK6e,OAAO9I,SAAS,GAAI,GAEpD/V,KAAK63B,KAAO73B,KAAK2Q,OAAO2H,KAAI,SAAClZ,EAAG+pB,GAC9B,IAAIvoB,EAAQxB,EAAEwB,MACR4P,EAAQ5H,EAAKkvB,SAAS14B,GACtB4pB,EAAiBjM,EAAYvM,GAC7ByjB,EAAarrB,EAAKqrB,WACxB2D,EAASh3B,EAAQ,EAAI02B,EAAAA,QAAQvC,SAAWuC,EAAAA,QAAQxC,SAEhD,IAAMiD,EAAW,CACfn3B,MAAKA,EACL4P,MAAKA,EACLyjB,WAAUA,EACV/iB,KAAM9R,EACN4pB,eAAcA,GAKhB,GAFA+O,EAAIrxB,OAASkC,EAAKqW,OAAOnK,YAEP,aAAdlM,EAAKL,KACPwvB,EAAIlxB,MAAQuG,KAAKsI,IAAI9M,EAAKiW,OAAOje,GAASgI,EAAKiW,OAAO6R,IAEpDqH,EAAItlB,EADF7R,EAAQ,EACFgI,EAAKiW,OAAOje,GAEZgI,EAAKiW,OAAO6R,GAEtBqH,EAAIxlB,EAAI3J,EAAKqW,OAAOzO,QACf,GAAkB,YAAd5H,EAAKL,KAAoB,CAClC,IACMyvB,GADAC,EAAU1S,EAAGqS,IACOh3B,EAC1B2kB,EAAGqS,IAAWh3B,EAEdm3B,EAAIlxB,MAAQ+B,EAAKiW,OAAOmZ,GAAWpvB,EAAKiW,OAAOoZ,GAC/CF,EAAItlB,EAAI7J,EAAKiW,OAAOoZ,GACpBF,EAAIxlB,EAAI,EACRwlB,EAAIE,QAAUA,EACdF,EAAIC,QAAUA,OACT,GAAkB,eAAdpvB,EAAKL,KAAuB,CACrC,IAAI0vB,EACAD,GADAC,EAAU1S,EAAGqS,IACOh3B,EACxB2kB,EAAGqS,IAAWh3B,EAEV6pB,EAAQ,GACVwN,EAAqB,IAAVA,EAAiBxN,EAC5BuN,EAAqB,IAAVA,EAAiBvN,IAE5BwN,EAAU,EACVD,EAAU,GAGZD,EAAIlxB,MAAQ+B,EAAKiW,OAAOmZ,GAAWpvB,EAAKiW,OAAOoZ,GAC/CF,EAAItlB,EAAI7J,EAAKiW,OAAOoZ,GACpBF,EAAIxlB,EAAI,EACRwlB,EAAIE,QAAUA,EACdF,EAAIC,QAAUA,EACdp3B,GAASo3B,EAAUC,GAASzS,QAAQ,GAAK,IAGb,YAA1B5c,EAAKwW,OAAO5R,UACduqB,EAAIhZ,MAAQnW,EAAKwW,OAAOC,SAAS7O,GAEf,aAAd5H,EAAKL,MACPwvB,EAAIhZ,MAAQnW,EAAKwW,OAAOC,SAASze,GACjCm3B,EAAIvY,cAAgB5W,EAAKwW,OAAOgO,uBAAuBxsB,KAEvDm3B,EAAIhZ,MAAQnW,EAAKwW,OAAOC,SAAS0Y,EAAIC,SACrCD,EAAIvY,cAAgB5W,EAAKwW,OAAOgO,uBAAuB2K,EAAIC,QAASD,EAAIE,UAI5E,IAAIrZ,EAAeoK,EAiBnB,OAhBA+O,EAAIG,UAAYlP,EAAiB,IAAMpoB,EAAM8T,iBACzC9L,EAAK+V,aACPC,EAAkBhW,EAAK+V,WAAU,MAAMqK,EACvC+O,EAAI7mB,KAAKP,OAAS/H,EAAK+V,WACvBoZ,EAAIG,UAAYtvB,EAAK+V,WAAa,IAAMoZ,EAAIG,WAG9CH,EAAII,YAAcvvB,EAAKqR,qBACnBjX,EACA,yCAC4Bga,EAAY4B,GAAa,+CAErDhW,EAAKwvB,oBAAsBxvB,EAAKwvB,oBAAoBx3B,GAASA,EAAM8T,kBACrE,kBAGKqjB,KAGT/3B,KAAKq4B,oBAGPO,EAAAj5B,UAAA04B,iBAAA,WAAA,IAAAzvB,EAAA5I,KACE,GAAkB,YAAdA,KAAKuI,KAAoB,CAC3BvI,KAAK03B,kBAAoB,GACzB,IAAMY,EAAe,GACrBA,EAAQ3nB,OAAS3Q,KAAK2e,WACtB,IAAM4Z,EAAgBv4B,KAAK2Q,OAAO2H,KAAI,SAAAlZ,GAAK,OAAAA,EAAEwB,SAAO2pB,QAAO,SAACC,EAAKprB,GAAM,OAACA,EAAI,EAAIorB,EAAMprB,EAAIorB,IAAM,GAC1FgO,EAAgBx4B,KAAK2Q,OAAO2H,KAAI,SAAAlZ,GAAK,OAAAA,EAAEwB,SAAO2pB,QAAO,SAACC,EAAKprB,GAAM,OAACA,EAAI,EAAIorB,EAAMprB,EAAIorB,IAAM,GAChG8N,EAAQ7N,MAAQ8N,EAAgBC,EAChCF,EAAQ7lB,EAAI,EACZ6lB,EAAQ/lB,EAAI,EAER+lB,EAAQ7N,MAAQ,EAClB6N,EAAQzxB,MAAQ7G,KAAK6e,OAAO0Z,GAE5BD,EAAQzxB,MAAQ7G,KAAK6e,OAAO2Z,GAE9BF,EAAQ5xB,OAAS1G,KAAKif,OAAOnK,YAC7B9U,KAAK03B,kBAAkBt2B,KAAKk3B,QAE5Bt4B,KAAK03B,kBAAoB13B,KAAK2Q,OAAO2H,KAAI,SAAAlZ,GACvC,IAAMk5B,EAAe,GAOrB,OANAA,EAAQ3nB,OAAS/H,EAAK+V,WAAa/V,EAAK+V,WAAavf,EAAEoR,MACvD8nB,EAAQ7N,MAAQrrB,EAAEwB,MAClB03B,EAAQ7lB,EAAI7J,EAAKiW,OAAO,GACxByZ,EAAQ/lB,EAAI3J,EAAKqW,OAAO7f,EAAEoR,OAC1B8nB,EAAQzxB,MAAQ+B,EAAKiW,OAAOyZ,EAAQ7N,OAAS7hB,EAAKiW,OAAO,GACzDyZ,EAAQ5xB,OAASkC,EAAKqW,OAAOnK,YACtBwjB,MAKbM,EAAAj5B,UAAAg4B,sBAAA,WACE33B,KAAKma,iBAAmBna,KAAKia,qBAAkBjX,EAAY,MAC3DhD,KAAKsa,YAActa,KAAKia,qBAAkBjX,EAAY,WAGxD41B,EAAAj5B,UAAAkgB,SAAA,SAASC,GACP,QAAK9f,KAAK+f,oBAIM/c,IAHHhD,KAAK+f,cAAcC,MAAK,SAAA5gB,GACnC,OAAO0gB,EAAMrP,OAASrR,EAAEqR,MAAQqP,EAAMnP,SAAWvR,EAAEuR,WAKvDioB,EAAAj5B,UAAAm4B,SAAA,SAASW,GACP,OAAIA,EAASjoB,MACJioB,EAASjoB,MAEXioB,EAAShoB,MAGlBmoB,EAAAj5B,UAAAupB,QAAA,SAAQC,EAAO4O,GACb,OAAOA,EAAIvnB,OAGbooB,EAAAj5B,UAAA+4B,iBAAA,SAAiBvP,EAAOwP,GACtB,OAAOxP,EAAQ,IAAMwP,EAAShoB,OAAS,IAAMgoB,EAASlO,OAGxDmO,EAAAj5B,UAAAm5B,MAAA,SAAM5nB,GACJlR,KAAKsP,OAAOZ,KAAKwC,8BApQpB1H,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,kCACVC,SAAU,08CA6CVgE,gBAAiBC,EAAAA,wBAAwBC,OACzCtB,WAAY,CACVuB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,IAEXC,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,6CAWnC9D,EAAAA,oBACAA,EAAAA,sBACAA,EAAAA,sBACAA,EAAAA,sBACAA,EAAAA,sBACAA,EAAAA,+BACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,+BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,6BACAA,EAAAA,mCACAA,EAAAA,6BACAA,EAAAA,sBAEAgE,EAAAA,yBACAA,EAAAA,2BACAA,EAAAA,sCACAA,EAAAA,4BCnDD,SAAA6qB,EAAYv2B,GAXFxC,KAAA0T,kBAAuC,IAAIlH,EAAAA,aAKrDxM,KAAAg5B,kBAA4B,EAC5Bh5B,KAAAi5B,gBAA0B,EAMxBj5B,KAAKwC,QAAUA,EAAQC,qBAGzBs2B,EAAAp5B,UAAAgN,YAAA,SAAYC,GACV5M,KAAK6M,UAGPksB,EAAAp5B,UAAAu5B,QAAA,WAGE,MAAO,CAAExyB,OAFC1G,KAAKwC,QAAQwG,wBAAwBtC,OAE3BG,MADV7G,KAAKwC,QAAQwG,wBAAwBnC,MACjBiuB,SAAU90B,KAAKY,MAAQ,IAGvDm4B,EAAAp5B,UAAA8I,gBAAA,WACEzI,KAAK0T,kBAAkBhF,KAAK1O,KAAKk5B,YAGnCH,EAAAp5B,UAAAkN,OAAA,WACM7M,KAAKokB,gBACPpkB,KAAKm5B,cAAgBn5B,KAAKokB,gBAAgBpkB,KAAKY,OAE/CZ,KAAKm5B,cAAgBpc,EAAY/c,KAAKY,OAGf,eAArBZ,KAAK8gB,aACP9gB,KAAKyS,EAAIzS,KAAKo5B,KAAOp5B,KAAKq5B,SAGtBr5B,KAAKY,MAAQ,GACfZ,KAAKyS,EAAIzS,KAAKyS,EAAIzS,KAAKg5B,kBACvBh5B,KAAKoS,WAAa,QAElBpS,KAAKyS,EAAIzS,KAAKyS,EAAIzS,KAAKg5B,kBACvBh5B,KAAKoS,WAAa,SAEpBpS,KAAKuS,EAAIvS,KAAKs5B,KAAOt5B,KAAKu5B,UAAY,IAGtCv5B,KAAKyS,EAAIzS,KAAKo5B,KAAOp5B,KAAKq5B,SAAW,EACrCr5B,KAAKuS,EAAIvS,KAAKs5B,KAAOt5B,KAAKu5B,UAEtBv5B,KAAKY,MAAQ,GACfZ,KAAKuS,EAAIvS,KAAKuS,EAAIvS,KAAKi5B,gBACvBj5B,KAAKoS,WAAa,QAElBpS,KAAKuS,EAAIvS,KAAKuS,EAAIvS,KAAKi5B,gBACvBj5B,KAAKoS,WAAa,SAEpBpS,KAAKqS,UAAY,eAAerS,KAAKyS,EAAC,MAAMzS,KAAKuS,EAAC,gCAtFvD/I,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,0BACVC,SAAU,4PAaVgE,gBAAiBC,EAAAA,wBAAwBC,+FArBzC9D,EAAAA,8CAwBCI,EAAAA,+BACAA,EAAAA,oBACAA,EAAAA,oBACAA,EAAAA,wBACAA,EAAAA,yBACAA,EAAAA,2BACAA,EAAAA,iCAEAgE,EAAAA,iBCQH,sBC5CgBsrB,GAAU7R,EAAQna,EAAWyjB,EAAWwI,EAASC,GAC/D,IAAI3jB,EAAmB,IACL,WAAdvI,IACFma,EAASA,EAAOrP,KAAI,SAAAmN,GAAK,OAAA3G,OAAO2G,MAC3BwL,GACHtJ,EAAOvmB,KAAK,IAIE,SAAdoM,GAAsC,WAAdA,GAI1BuI,EAAS,CAHG0jB,GAAkBrsB,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAQqmB,IAC9B+R,GAAkBtsB,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAQqmB,KAI1C5R,EAAS4R,EAGX,OAAO5R,WAGO4jB,GAAS5jB,EAAQoJ,EAAiB3R,EAAWyhB,GAC3D,IAAI3a,EAcJ,MAZkB,SAAd9G,EACF8G,EAAQyT,EAAAA,YAAY5I,MAAMA,GAAOpJ,OAAOA,GACjB,WAAdvI,GACT8G,EAAQ0T,EAAAA,cAAc7I,MAAMA,GAAOpJ,OAAOA,GAEtCkZ,IACF3a,EAAQA,EAAM8c,SAEO,YAAd5jB,IACT8G,EAAQ2T,EAAAA,aAAa9I,MAAM,CAACA,EAAM,GAAIA,EAAM,KAAKpJ,OAAOA,IAGnDzB,uBDvBR+E,EAAAA,SAAQ1U,KAAA,CAAC,CACR2U,QAAS,CAACya,IACVva,aAAc,CACZwa,GACAU,GACAU,GACAmB,GACAE,GACAK,GACAM,GACAC,GACAE,GACAwB,GACAH,GACApB,IAEF/d,QAAS,CACPua,GACAU,GACAU,GACAmB,GACAE,GACAK,GACAM,GACAC,GACAE,GACAwB,GACAH,GACApB,2BEtBJ,SAAAoC,IAAA,IAAAhxB,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YA0GW4I,EAAA4K,eAAyB,EACzB5K,EAAA4mB,QAAS,EACT5mB,EAAA4lB,YAAsB,SACtB5lB,EAAAijB,eAAyB,QACzBjjB,EAAAwmB,OAAiB,EACjBxmB,EAAAymB,OAAiB,EAKjBzmB,EAAAgmB,gBAA0B,EAC1BhmB,EAAAimB,gBAA0B,EAC1BjmB,EAAAkmB,kBAA4B,EAC5BlmB,EAAAmmB,mBAA6B,GAC7BnmB,EAAAomB,mBAA6B,GAK7BpmB,EAAAqmB,cAAwB,EACxBrmB,EAAAixB,UAAY,GACZjxB,EAAAkxB,UAAY,EAEZlxB,EAAAyG,WAAa,UACbzG,EAAAqR,iBAA2B,EAM1BrR,EAAAmV,SAA8B,IAAIvR,EAAAA,aAClC5D,EAAAoV,WAAgC,IAAIxR,EAAAA,aAM9C5D,EAAA4E,UAAY,SACZ5E,EAAAsJ,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBtJ,EAAAmxB,cAAgB,CAAC,EAAG,EAAG,EAAG,GAqB1BnxB,EAAAyiB,YAAsB,EACtBziB,EAAA0iB,WAAqB,EAErB1iB,EAAAmX,cAAuB,YAhEiBjgB,EAAA85B,EAAAztB,GAkExCytB,EAAAj6B,UAAAkN,OAAA,WACEV,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEZA,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,OACdiZ,UAAWnrB,KAAKovB,MAChBhE,UAAWprB,KAAKqvB,MAChBhE,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKsvB,eACjB7D,WAAYzrB,KAAKuvB,eACjBljB,WAAYrM,KAAKwvB,OACjBziB,WAAY/M,KAAKqP,WACjBwc,eAAgB7rB,KAAK6rB,iBAGvB7rB,KAAK6vB,aAAe7vB,KAAK+P,QAAQuI,KAAI,SAAAlZ,GAAK,OAAAA,EAAEqR,QAC5CzQ,KAAKg6B,QAAUh6B,KAAKi6B,aACpBj6B,KAAKonB,QAAUpnB,KAAKqnB,aACpBrnB,KAAK2vB,QAAU3vB,KAAK4vB,aAEpB5vB,KAAKqS,UAAY,aAAarS,KAAKiQ,KAAK+b,QAAO,IAAIhsB,KAAKkS,OAAO,GAAE,IAEjE,IAAMua,EAAkC,YAApBzsB,KAAKqP,WAA2BrP,KAAK6vB,aAAe7vB,KAAKg6B,QAC7Eh6B,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQpP,KAAKqP,WAAYod,EAAazsB,KAAKusB,cAE9EvsB,KAAKkR,KAAOlR,KAAK+P,QAEjB/P,KAAK85B,UAAY1sB,KAAKuF,IAAI3S,KAAK85B,UAAW,GAC1C95B,KAAK65B,UAAYzsB,KAAKuF,IAAI3S,KAAK65B,UAAW,GAE1C75B,KAAKk6B,OAASl6B,KAAKm6B,UAAUn6B,KAAKg6B,QAAS,CAACh6B,KAAK85B,UAAW95B,KAAK65B,YAEjE75B,KAAK+5B,cAAgB,CAAC,EAAG,EAAG,EAAG,GAC/B/5B,KAAKo6B,YAELp6B,KAAK+5B,cAAgB/5B,KAAKq6B,mBAC1Br6B,KAAKo6B,YAELp6B,KAAKiN,cAAgBjN,KAAKkwB,mBAE1BlwB,KAAKmwB,WAAa,OAASzS,IAAKzI,WAChCjV,KAAKowB,SAAW,QAAQpwB,KAAKmwB,WAAU,KAIzCyJ,EAAAj6B,UAAAmyB,YAAA,WACE9xB,KAAK6xB,iBAGP+H,EAAAj6B,UAAAigB,QAAA,SAAQ1O,EAAMP,GACRA,IACFO,EAAKP,OAASA,EAAOF,MAGvBzQ,KAAKsP,OAAOZ,KAAKwC,IAGnB0oB,EAAAj6B,UAAA06B,iBAAA,uBACMC,EAAO,EACPC,EAAO,EACPC,EAAOx6B,KAAKiQ,KAAKvJ,OACjB+zB,EAAOz6B,KAAKiQ,KAAKpJ,UAErB,IAAgB,IAAA0K,EAAApR,EAAAH,KAAKkR,MAAIO,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAAtB,IAAMN,EAACoR,EAAA7Q,UACV,IAAgB,IAAAgnB,GAAApW,OAAA,EAAArR,EAAAE,EAAEsQ,SAAMkX,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAArB,IAAMvB,EAACyoB,EAAAjnB,MACJK,EAAIjB,KAAKk6B,OAAO96B,EAAE6B,GAClByd,EAAyB,WAApB1e,KAAK06B,WAA0B16B,KAAK6e,OAAOC,OAAO1f,EAAEqT,IAAMzS,KAAK6e,OAAOzf,EAAEqT,GAC7EuM,EAAyB,WAApBhf,KAAK26B,WAA0B36B,KAAKif,OAAOH,OAAO1f,EAAEmT,IAAMvS,KAAKif,OAAO7f,EAAEmT,GACnFgoB,EAAOntB,KAAKuF,IAAI1R,EAAIyd,EAAI6b,GACxBD,EAAOltB,KAAKuF,IAAI1R,EAAI+d,EAAIsb,GACxBE,EAAOptB,KAAKuF,IAAIqM,EAAK/d,EAAGu5B,GACxBC,EAAOrtB,KAAKuF,IAAI+L,EAAKzd,EAAGw5B,wMAO5B,MAAO,CAACH,EAHRG,EAAOrtB,KAAKuF,IAAI8nB,EAAOz6B,KAAKiQ,KAAKpJ,MAAO,GACxC2zB,EAAOptB,KAAKuF,IAAI6nB,EAAOx6B,KAAKiQ,KAAKvJ,OAAQ,GAEf6zB,IAG5BX,EAAAj6B,UAAAy6B,UAAA,WACE,IAAIvzB,EAAQ7G,KAAKiQ,KAAKpJ,WACC7D,IAAnBhD,KAAK0wB,gBAA8C1tB,IAAnBhD,KAAK2wB,YACvC9pB,GAAgB7G,KAAK+5B,cAAc,IAErC,IAAIrzB,EAAS1G,KAAKiQ,KAAKvJ,YACA1D,IAAnBhD,KAAKkxB,gBAA8CluB,IAAnBhD,KAAKmxB,YACvCzqB,GAAkB1G,KAAK+5B,cAAc,IAEvC/5B,KAAK6e,OAAS7e,KAAKsnB,UAAUtnB,KAAKonB,QAASvgB,GAC3C7G,KAAKif,OAASjf,KAAK+vB,UAAU/vB,KAAK2vB,QAASjpB,IAG7CkzB,EAAAj6B,UAAAowB,UAAA,SAAUha,EAAQrP,GAChB,OAAOizB,GAAS5jB,EAAQ,CAACrP,EAAQ1G,KAAK+5B,cAAc,IAAK/5B,KAAK26B,WAAY36B,KAAKivB,eAGjF2K,EAAAj6B,UAAA2nB,UAAA,SAAUvR,EAAQlP,GAChB,OAAO8yB,GAAS5jB,EAAQ,CAAC/V,KAAK+5B,cAAc,GAAIlzB,GAAQ7G,KAAK06B,WAAY16B,KAAKivB,eAGhF2K,EAAAj6B,UAAAw6B,UAAA,SAAUpkB,EAAQoJ,GAChB,IAAM7K,EAAQ0T,EAAAA,cAAc7I,MAAMA,GAAOpJ,OAAOA,GAEhD,OAAO/V,KAAKivB,aAAe3a,EAAM8c,OAAS9c,GAG5CslB,EAAAj6B,UAAAuwB,iBAAA,WACE,IAAM6B,EAAO,CACXvkB,UAAWxN,KAAKqP,WAChB+P,YAAQpc,EACR+S,OAAQ,GACRrN,SAAU1I,KAAK6rB,eACflP,WAAO3Z,GAYT,MATuB,YAAnB+uB,EAAKvkB,WACPukB,EAAKhc,OAAS/V,KAAK6vB,aACnBkC,EAAK3S,OAASpf,KAAKof,OACnB2S,EAAKpV,MAAQ3c,KAAKwuB,cAElBuD,EAAKhc,OAAS/V,KAAKg6B,QACnBjI,EAAK3S,OAASpf,KAAKof,OAAO9K,OAGrByd,GAGT6H,EAAAj6B,UAAA0nB,WAAA,uBACQM,EAAS,OAEf,IAAsB,IAAApW,EAAApR,EAAAH,KAAK+P,SAAO0B,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAA/B,IAAMoP,EAAO0B,EAAA7Q,UAChB,IAAgB,IAAAgnB,GAAAgT,OAAA,EAAAz6B,EAAA4P,EAAQY,SAAMkX,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAA3B,IAAMvB,EAACyoB,EAAAjnB,MACL+mB,EAAOG,SAAS1oB,EAAEqT,IACrBkV,EAAOvmB,KAAKhC,EAAEqT,wMAMpB,OADAzS,KAAK06B,WAAatM,GAAazG,GACxB6R,GAAU7R,EAAQ3nB,KAAK06B,WAAY16B,KAAKixB,UAAWjxB,KAAK0wB,UAAW1wB,KAAK2wB,YAGjFiJ,EAAAj6B,UAAAiwB,WAAA,uBACQjI,EAAS,OAEf,IAAsB,IAAApW,EAAApR,EAAAH,KAAK+P,SAAO0B,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAA/B,IAAMoP,EAAO0B,EAAA7Q,UAChB,IAAgB,IAAAgnB,GAAAiT,OAAA,EAAA16B,EAAA4P,EAAQY,SAAMkX,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAA3B,IAAMvB,EAACyoB,EAAAjnB,MACL+mB,EAAOG,SAAS1oB,EAAEmT,IACrBoV,EAAOvmB,KAAKhC,EAAEmT,wMAMpB,OADAvS,KAAK26B,WAAavM,GAAazG,GACxB6R,GAAU7R,EAAQ3nB,KAAK26B,WAAY36B,KAAKixB,UAAWjxB,KAAKkxB,UAAWlxB,KAAKmxB,YAGjFyI,EAAAj6B,UAAAs6B,WAAA,uBACM5kB,EAAMylB,EAAAA,EACNnoB,GAAOmoB,EAAAA,MAEX,IAAsB,IAAAvpB,EAAApR,EAAAH,KAAK+P,SAAO0B,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAA/B,IAAMoP,EAAO0B,EAAA7Q,UAChB,IAAgB,IAAAgnB,GAAAmT,OAAA,EAAA56B,EAAA4P,EAAQY,SAAMkX,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAA3B,IAAMvB,EAACyoB,EAAAjnB,MACJA,EAAQke,OAAO1f,EAAE6B,IAAM,EAC7BoU,EAAMjI,KAAKiI,IAAIA,EAAKzU,GACpB+R,EAAMvF,KAAKuF,IAAIA,EAAK/R,wMAIxB,MAAO,CAACyU,EAAK1C,IAGfinB,EAAAj6B,UAAAqyB,iBAAA,SAAiB5oB,OAAEvC,EAAKuC,EAAAvC,MACtB7G,KAAKsrB,WAAazkB,EAClB7G,KAAK6M,UAGP+sB,EAAAj6B,UAAAsyB,kBAAA,SAAkB7oB,OAAE1C,EAAM0C,EAAA1C,OACxB1G,KAAKqrB,YAAc3kB,EACnB1G,KAAK6M,UAGP+sB,EAAAj6B,UAAAuyB,WAAA,SAAW7gB,GACGrR,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,SAEd,IAIXzQ,KAAK+f,cAAaze,EAAA,CAAI+P,GAASrR,KAAK+f,eACpC/f,KAAK+d,SAASrP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,kBAGlD6Z,EAAAj6B,UAAAyyB,aAAA,SAAa/gB,GACX,IAAM5F,EAAMzL,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,QAGzBzQ,KAAK+f,cAAcpU,OAAOF,EAAK,GAC/BzL,KAAK+f,cAAaze,EAAOtB,KAAK+f,eAE9B/f,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,iBAGpD6Z,EAAAj6B,UAAAkyB,cAAA,mBACE7xB,KAAK+f,cAAaze,EAAOtB,KAAK+f,mBAC9B,IAAoB,IAAA9I,EAAA9W,EAAAH,KAAK+f,eAAaxO,EAAA0F,EAAAtW,QAAA4Q,EAAA1Q,KAAA0Q,EAAA0F,EAAAtW,OAAE,CAAnC,IAAMmf,EAAKvO,EAAA3Q,MACdZ,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOkf,EAAOqS,QAAS,uGAEhDnyB,KAAK+f,cAAgB,IAGvB6Z,EAAAj6B,UAAAupB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,SA7R0BxB,wBAzGzCzF,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,0BACVC,SAAU,03FAqFVgE,gBAAiBC,EAAAA,wBAAwBC,OACzCjE,cAAeC,EAAAA,kBAAkBC,KACjCyC,WAAY,CACVuB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,IAEXC,EAAAA,QACE,IACAF,EAAAA,MAAM,CACJC,QAAS,ukDAQlB9D,EAAAA,sBACAA,EAAAA,2BACAA,EAAAA,8BACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,kCACAA,EAAAA,mCACAA,EAAAA,mCACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,4BACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,0BACAA,EAAAA,+BACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,wBAEAgE,EAAAA,2BACAA,EAAAA,gCAEAmkB,EAAAA,aAAY1tB,KAAA,CAAC,wCA+Eb0F,EAAAA,aAAY1F,KAAA,CAAC,mCClOhB,SAAAq2B,IAyDWh7B,KAAAia,iBAA2B,EAG1Bja,KAAAsP,OAAS,IAAI9C,EAAAA,aACbxM,KAAA+d,SAAW,IAAIvR,EAAAA,aACfxM,KAAAge,WAAa,IAAIxR,EAAAA,oBAK3BwuB,EAAAr7B,UAAAgN,YAAA,SAAYC,GACV5M,KAAK6M,UAGPmuB,EAAAr7B,UAAAkN,OAAA,WACE7M,KAAKi7B,QAAUj7B,KAAKk7B,cAGtBF,EAAAr7B,UAAAu7B,WAAA,WAAA,IAAAtyB,EAAA5I,KACQ2e,EAAa3e,KAAKkR,KAAKT,KAE7B,OAAOzQ,KAAKkR,KAAKP,OACd2H,KAAI,SAAClZ,EAAGqB,GACP,QAAmB,IAARrB,EAAEmT,QAAoC,IAARnT,EAAEqT,EAAmB,CAC5D,IAAMF,EAAInT,EAAEmT,EACNE,EAAIrT,EAAEqT,EACNxR,EAAI7B,EAAE6B,EAENse,EAAS3W,EAAKsxB,OAAOj5B,GAAK,GAC1B2d,EAAe7B,EAAY3d,EAAEqR,MAE7BiO,EAAyB,WAApB9V,EAAK8xB,WAA0B9xB,EAAKiW,OAAOC,OAAOrM,IAAM7J,EAAKiW,OAAOpM,GACzEuM,EAAyB,WAApBpW,EAAK+xB,WAA0B/xB,EAAKqW,OAAOH,OAAOvM,IAAM3J,EAAKqW,OAAO1M,GAEzEwM,EAAkC,WAA1BnW,EAAKwW,OAAO5R,UAAyB5E,EAAKwW,OAAOC,SAASpe,GAAK2H,EAAKwW,OAAOC,SAASV,GAE5FkB,GAAYjX,EAAKmX,cAAcrf,QAAgBkI,EAAKiX,SAAS,CAAEpP,KAAMkO,IACrE3Q,EAAU6R,EAAW,EAAI,GAU/B,MAAO,CACL3O,KATW5R,OAAOyM,OAAO,GAAI3M,EAAG,CAChCuR,OAAQgO,EACRlO,KAAMrR,EAAEqR,KACR7P,MAAOxB,EAAEmT,EACTE,EAAGrT,EAAEqT,EACL8M,OAAQngB,EAAE6B,IAKVwR,EAACA,EACDF,EAACA,EACDtR,EAACA,EACDqe,WAAY,CAAC,eAAe7e,GAC5BG,MAAO2R,EACP/B,MAAOiC,EACPiM,GAAEA,EACFM,GAAEA,EACFO,OAAMA,EACNX,aAAYA,EACZG,MAAKA,EACL/Q,QAAOA,EACP2Q,WAAUA,EACVkB,SAAQA,EACRxN,UAAW,aAAaqM,EAAE,IAAIM,EAAE,SAIrC0I,QAAO,SAAAtJ,GAAU,YAAWpb,IAAXob,MAGtB4c,EAAAr7B,UAAA+f,eAAA,SAAetB,GACb,IAAM+c,OAAgC,IAAb/c,EAAOnd,EAC1Bm6B,EAAkBhd,EAAOQ,cAAgBR,EAAOQ,aAAale,OAC7D26B,EAAgBjd,EAAOO,YAAcP,EAAOO,WAAWje,OAEvD46B,EAAcH,EAAYpe,EAAYqB,EAAOnd,GAAK,GAClDs6B,EAAav7B,KAAKu7B,YAAkC,KAApBv7B,KAAKu7B,WAAuBv7B,KAAKu7B,WAAU,IAAM,GACjFC,EAAax7B,KAAKw7B,YAAkC,KAApBx7B,KAAKw7B,WAAuBx7B,KAAKw7B,WAAU,IAAM,GACjF/oB,EAAIsK,EAAYqB,EAAO3L,GACvBF,EAAIwK,EAAYqB,EAAO7L,GACvB9B,EACJ4qB,GAAiBD,EACVhd,EAAOO,WAAU,MAAMP,EAAOQ,aACjCR,EAAOO,WAAaP,EAAOQ,aAIjC,MAAO,YAFLyc,GAAiBD,EAAkB,+BAA+Bpe,EAAYvM,GAAK,UAAY,IAGjF,wDAEHuM,EAAYue,GAAW,YAAYve,EAAYvK,GAAE,0BACjDuK,EAAYwe,GAAW,YAAYxe,EAAYzK,GAAE,8DAGxDyK,EAAYse,GAAY,yBAKhCN,EAAAr7B,UAAAigB,QAAA,SAAQ1O,GACNlR,KAAKsP,OAAOZ,KAAKwC,IAGnB8pB,EAAAr7B,UAAAkgB,SAAA,SAASC,GACP,QAAK9f,KAAK+f,oBAIM/c,IAHHhD,KAAK+f,cAAcC,MAAK,SAAA5gB,GACnC,OAAO0gB,EAAMrP,OAASrR,EAAEqR,SAK5BuqB,EAAAr7B,UAAA2O,UAAA,SAAU8P,GACR,OAAIpe,KAAK+f,cAAcrf,OAAS,EACvBV,KAAK6f,SAAS,CAAEpP,KAAM2N,EAAOO,aAGZ,IAAnBP,EAAOpQ,SAGhBgtB,EAAAr7B,UAAAsgB,eAAA,SAAe7B,GACbA,EAAOH,YAAa,EACpBje,KAAK+d,SAASrP,KAAK,CAAE+B,KAAMzQ,KAAKkR,KAAKT,QAGvCuqB,EAAAr7B,UAAAugB,iBAAA,SAAiB9B,GACfA,EAAOH,YAAa,EACpBje,KAAKge,WAAWtP,KAAK,CAAE+B,KAAMzQ,KAAKkR,KAAKT,QAGzCuqB,EAAAr7B,UAAAupB,QAAA,SAAQC,EAAO/K,GACb,OAAUA,EAAOlN,KAAKP,OAAM,IAAIyN,EAAOlN,KAAKT,gCA3L/CjH,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,8BACVC,SAAU,ihCA8BVgE,gBAAiBC,EAAAA,wBAAwBC,OACzCtB,WAAY,CACVuB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,EACTqE,UAAW,aAEbpE,EAAAA,QAAQ,IAAKF,EAAAA,MAAM,CAAEC,QAAS,EAAGqE,UAAW,sDAMjDnI,EAAAA,sBACAA,EAAAA,sBACAA,EAAAA,sBACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,sBACAA,EAAAA,4BACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,sBAEAgE,EAAAA,yBACAA,EAAAA,2BACAA,EAAAA,iBCjEH,kCALCmL,EAAAA,SAAQ1U,KAAA,CAAC,CACR2U,QAAS,CAACya,IACVva,aAAc,CAACogB,GAAsBoB,IACrCvhB,QAAS,CAACmgB,GAAsBoB,0BCkDhC,SAAAS,EAAYj5B,GAfHxC,KAAAqhB,UAAoB,EACpBrhB,KAAAsM,YAAsB,EAErBtM,KAAAsP,OAAS,IAAI9C,EAAAA,aACbxM,KAAA+d,SAAW,IAAIvR,EAAAA,aACfxM,KAAAge,WAAa,IAAIxR,EAAAA,aAWzBxM,KAAKwC,QAAUA,EAAQC,qBAGzBg5B,EAAA97B,UAAAgN,YAAA,SAAYC,GACV5M,KAAKqS,UAAY,aAAarS,KAAKyS,EAAC,MAAMzS,KAAKuS,EAAC,IAEhDvS,KAAKmhB,aAAe,GACpBnhB,KAAKke,WAAa,OAASR,IAAKzI,WAChCjV,KAAK07B,YAAc,QAAQ17B,KAAKke,WAAU,IAC1Cle,KAAKwf,cAAgBxf,KAAKyf,mBAEtBzf,KAAKsM,YACPtM,KAAKwhB,iBAITia,EAAA97B,UAAA8f,iBAAA,WACE,MAAO,CACL,CACEjN,OAAQ,EACRuM,MAAO/e,KAAKwW,KACZxI,QAAShO,KAAKmhB,cAEhB,CACE3O,OAAQ,IACRuM,MAAO/e,KAAKwW,KACZxI,QAAS,KAKfytB,EAAA97B,UAAA6hB,cAAA,WACelS,EAAAA,OAAOtP,KAAKwC,SAAS8M,OAAO,SACpCyS,KAAK,UAAW,GACrB/hB,KAAK27B,wBAGPF,EAAA97B,UAAAg8B,qBAAA,WACersB,EAAAA,OAAOtP,KAAKwC,SAAS8M,OAAO,SAEpCxB,aAAarI,SAAS,KAAKsc,KAAK,UAAW,IAGlD0Z,EAAA97B,UAAAigB,QAAA,WACE5f,KAAKsP,OAAOZ,KAAK1O,KAAKkR,OAIxBuqB,EAAA97B,UAAA6b,aAAA,WACExb,KAAK+d,SAASrP,KAAK1O,KAAKkR,OAI1BuqB,EAAA97B,UAAA+b,aAAA,WACE1b,KAAKge,WAAWtP,KAAK1O,KAAKkR,iCAlG7B1H,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,8BACVC,SAAU,ieAgBVgE,gBAAiBC,EAAAA,wBAAwBC,qDA3BzC9D,EAAAA,6CA8BCI,EAAAA,iBACAA,EAAAA,iBACAA,EAAAA,qBACAA,EAAAA,sBACAA,EAAAA,oBACAA,EAAAA,qBACAA,EAAAA,wBACAA,EAAAA,0BACAA,EAAAA,sBAEAgE,EAAAA,yBACAA,EAAAA,2BACAA,EAAAA,6BA0DA7D,EAAAA,aAAY1F,KAAA,CAAC,oCAKb0F,EAAAA,aAAY1F,KAAA,CAAC,mCClGhB,SAAAi3B,IAkCW57B,KAAAia,iBAA2B,EAG3Bja,KAAAsM,YAAsB,EAErBtM,KAAAsP,OAAS,IAAI9C,EAAAA,aACbxM,KAAA+d,SAA8B,IAAIvR,EAAAA,aAClCxM,KAAAge,WAAgC,IAAIxR,EAAAA,oBAI9CovB,EAAAj8B,UAAA4P,SAAA,WACOvP,KAAKm4B,cACRn4B,KAAKm4B,YAAcn4B,KAAK0f,iBAI5Bkc,EAAAj8B,UAAAgN,YAAA,SAAYC,GACV5M,KAAK6M,UAGP+uB,EAAAj8B,UAAAkN,OAAA,WACE7M,KAAK67B,MAAQ77B,KAAK87B,YAGpBF,EAAAj8B,UAAAm8B,SAAA,WAAA,IAAAlzB,EAAA5I,KACQ67B,EAAQ,GAsBd,OApBA77B,KAAKkR,KAAKoH,KAAI,SAAAyjB,GACZA,EAAIprB,OAAO2H,KAAI,SAAA0jB,GACb,IAAMp7B,EAAQo7B,EAAKp7B,MACnBo7B,EAAKrrB,OAASorB,EAAItrB,KAElBorB,EAAMz6B,KAAK,CACT26B,IAAGA,EACHC,KAAIA,EACJvpB,EAAG7J,EAAKiW,OAAOkd,EAAItrB,MACnB8B,EAAG3J,EAAKqW,OAAO+c,EAAKvrB,MACpB5J,MAAO+B,EAAKiW,OAAO/J,YACnBpO,OAAQkC,EAAKqW,OAAOnK,YACpB0B,KAAM5N,EAAKwW,OAAOC,SAASze,GAC3BsQ,KAAMtQ,EACN4P,MAAOuM,EAAYif,EAAKvrB,MACxBE,OAAQorB,EAAItrB,aAKXorB,GAGTD,EAAAj8B,UAAA+f,eAAA,SAAetW,OAAEoH,EAAKpH,EAAAoH,MAAEU,EAAI9H,EAAA8H,KAC1B,MAAO,uCACyB8L,EAFE5T,EAAAuH,QAEiB,MAAMqM,EAAYxM,GAAM,4CAC7CU,EAAKwD,iBAAgB,iBAIrDknB,EAAAj8B,UAAAupB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAK8mB,aAGdyD,EAAAj8B,UAAAigB,QAAA,SAAQ1O,GACNlR,KAAKsP,OAAOZ,KAAKwC,8BAjGpB1H,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,qCACVC,SAAU,ivBAwBVgE,gBAAiBC,EAAAA,wBAAwBC,0CAGxC1D,EAAAA,sBACAA,EAAAA,sBACAA,EAAAA,sBACAA,EAAAA,wBACAA,EAAAA,+BACAA,EAAAA,2BACAA,EAAAA,+BACAA,EAAAA,0BACAA,EAAAA,sBAEAgE,EAAAA,yBACAA,EAAAA,2BACAA,EAAAA,6BCrCH,SAAA+tB,IAAA,IAAArzB,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YAuEW4I,EAAA4lB,YAAsB,SACtB5lB,EAAAijB,eAAyB,QAQzBjjB,EAAAszB,aAAkC,EAClCtzB,EAAAgmB,gBAA0B,EAC1BhmB,EAAAimB,gBAA0B,EAC1BjmB,EAAAkmB,kBAA4B,EAC5BlmB,EAAAmmB,mBAA6B,GAC7BnmB,EAAAomB,mBAA6B,GAK7BpmB,EAAAqR,iBAA2B,EAI3BrR,EAAAmX,cAAuB,GAEtBnX,EAAAmV,SAA8B,IAAIvR,EAAAA,aAClC5D,EAAAoV,WAAgC,IAAIxR,EAAAA,aAe9C5D,EAAAsJ,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBtJ,EAAAyiB,YAAsB,EACtBziB,EAAA0iB,WAAqB,EAErB1iB,EAAA4E,UAAoB,kBA/CgB1N,EAAAm8B,EAAA9vB,GAiDpC8vB,EAAAt8B,UAAAkN,OAAA,WA0BE,GAzBAV,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEZA,KAAKsQ,cAELtQ,KAAKonB,QAAUpnB,KAAKqnB,aACpBrnB,KAAK2vB,QAAU3vB,KAAK4vB,aACpB5vB,KAAKw2B,YAAcx2B,KAAK21B,iBAExB31B,KAAKwN,UAAY4gB,GAAapuB,KAAKw2B,aAAa,GAEhDx2B,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,OACdiZ,UAAWnrB,KAAKovB,MAChBhE,UAAWprB,KAAKqvB,MAChBhE,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKsvB,eACjB7D,WAAYzrB,KAAKuvB,eACjBljB,WAAYrM,KAAKwvB,OACjBziB,WAAY/M,KAAKwN,UACjBqe,eAAgB7rB,KAAK6rB,iBAGA,WAAnB7rB,KAAKwN,UAAwB,CAC/B,IAAI6H,EAAMrV,KAAKqV,IACX1C,EAAM3S,KAAK2S,IACV3S,KAAKqV,MACRA,EAAMjI,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAA,CAAK,GAAMtB,KAAKw2B,eAEvBx2B,KAAK2S,MACRA,EAAMvF,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAQtB,KAAKw2B,eAEzBx2B,KAAKw2B,YAAc,CAACnhB,EAAK1C,GAG3B3S,KAAK6e,OAAS7e,KAAKsnB,YACnBtnB,KAAKif,OAASjf,KAAK+vB,YAEnB/vB,KAAKiwB,YACLjwB,KAAKiN,cAAgBjN,KAAKkwB,mBAE1BlwB,KAAKqS,UAAY,aAAarS,KAAKiQ,KAAK+b,QAAO,MAAMhsB,KAAKkS,OAAO,GAAE,IACnElS,KAAKm8B,MAAQn8B,KAAKo8B,YAGpBH,EAAAt8B,UAAA0nB,WAAA,mBACQtR,EAAS,OACf,IAAoB,IAAAkB,EAAA9W,EAAAH,KAAK+P,SAAOwB,EAAA0F,EAAAtW,QAAA4Q,EAAA1Q,KAAA0Q,EAAA0F,EAAAtW,OAAE,CAA7B,IAAM0kB,EAAK9T,EAAA3Q,MACTmV,EAAO+R,SAASzC,EAAM5U,OACzBsF,EAAO3U,KAAKikB,EAAM5U,wGAItB,OAAOsF,GAGTkmB,EAAAt8B,UAAAiwB,WAAA,uBACQ7Z,EAAS,OAEf,IAAoB,IAAAxE,EAAApR,EAAAH,KAAK+P,SAAO0B,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAA7B,IAAM0kB,EAAK5T,EAAA7Q,UACd,IAAgB,IAAAgnB,GAAAsO,OAAA,EAAA/1B,EAAAklB,EAAM1U,SAAMkX,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAAzB,IAAMvB,EAACyoB,EAAAjnB,MACLmV,EAAO+R,SAAS1oB,EAAEqR,OACrBsF,EAAO3U,KAAKhC,EAAEqR,2MAKpB,OAAOsF,GAGTkmB,EAAAt8B,UAAAg2B,eAAA,uBACQ5f,EAAS,OAEf,IAAoB,IAAAxE,EAAApR,EAAAH,KAAK+P,SAAO0B,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAA7B,IAAM0kB,EAAK5T,EAAA7Q,UACd,IAAgB,IAAAgnB,GAAAuO,OAAA,EAAAh2B,EAAAklB,EAAM1U,SAAMkX,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAAzB,IAAMvB,EAACyoB,EAAAjnB,MACLmV,EAAO+R,SAAS1oB,EAAEwB,QACrBmV,EAAO3U,KAAKhC,EAAEwB,4MAKpB,OAAOmV,GAaTkmB,EAAAt8B,UAAA08B,aAAA,SAAaz7B,EAAiDuoB,EAAWmT,EAAWC,GAalF,YAb4D,IAAApT,IAAAA,EAAA,GACvC,iBAAVvoB,IACTA,EAAQA,EACLqc,QAAQ,IAAK,IACbA,QAAQ,IAAK,IACbA,QAAQ,KAAM,IAEdA,QAAQ,IAAK,KAEN6K,SAAS,OACjBlnB,EAAQA,EAAM47B,MAAM,MAGpB/8B,MAAM2gB,QAAQxf,IAA2B,iBAAVuoB,EAC1BnpB,KAAKq8B,aAAaz7B,EAAMuoB,GAAQ,KAAMmT,EAAGC,GAE7B,iBAAV37B,GAAsBA,EAAMknB,SAAS,MACtClnB,EAAMqc,QAAQ,IAAK,IAAM,IAE5Bqf,GAAKC,GAAK37B,EAAQ,IAG3Bq7B,EAAAt8B,UAAA2nB,UAAA,WACE,IAAMmV,EAAIz8B,KAAKq8B,aAAar8B,KAAKk8B,aAAc,EAAGl8B,KAAKonB,QAAQ1mB,OAAQV,KAAKiQ,KAAKpJ,OACjF,OAAOymB,EAAAA,YAAY0H,WAAW,CAAC,EAAGh1B,KAAKiQ,KAAKpJ,QAAQkP,OAAO/V,KAAKonB,SAASzG,aAAa8b,IAGxFR,EAAAt8B,UAAAowB,UAAA,WACE,IAAM0M,EAAIz8B,KAAKq8B,aAAar8B,KAAKk8B,aAAc,EAAGl8B,KAAK2vB,QAAQjvB,OAAQV,KAAKiQ,KAAKvJ,QACjF,OAAO4mB,EAAAA,YAAY0H,WAAW,CAACh1B,KAAKiQ,KAAKvJ,OAAQ,IAAIqP,OAAO/V,KAAK2vB,SAAShP,aAAa8b,IAGzFR,EAAAt8B,UAAAy8B,SAAA,WAAA,IAAAxzB,EAAA5I,KACQm8B,EAAQ,GAed,OAbAn8B,KAAKonB,QAAQ9O,KAAI,SAAA8M,GACfxc,EAAK+mB,QAAQrX,KAAI,SAAAokB,GACfP,EAAM/6B,KAAK,CACTqR,EAAG7J,EAAKiW,OAAOuG,GACf7S,EAAG3J,EAAKqW,OAAOyd,GACfC,GAAI,EACJ91B,MAAO+B,EAAKiW,OAAO/J,YACnBpO,OAAQkC,EAAKqW,OAAOnK,YACpB0B,KAAM,iCAKL2lB,GAGTF,EAAAt8B,UAAAigB,QAAA,SAAQ1O,GACNlR,KAAKsP,OAAOZ,KAAKwC,IAGnB+qB,EAAAt8B,UAAAswB,UAAA,WACEjwB,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQpP,KAAKwN,UAAWxN,KAAKw2B,cAGlEyF,EAAAt8B,UAAAuwB,iBAAA,WACE,MAAO,CACL1iB,UAAWxN,KAAKwN,UAChBuI,OAAQ/V,KAAKw2B,YACbpX,OAA2B,YAAnBpf,KAAKwN,UAA0BxN,KAAKof,OAASpf,KAAKof,OAAO9K,MACjEqI,MAA0B,YAAnB3c,KAAKwN,UAA0BxN,KAAKwuB,iBAAcxrB,EACzD0F,SAAU1I,KAAK6rB,iBAInBoQ,EAAAt8B,UAAAqyB,iBAAA,SAAiB5oB,OAAEvC,EAAKuC,EAAAvC,MACtB7G,KAAKsrB,WAAazkB,EAClB7G,KAAK6M,UAGPovB,EAAAt8B,UAAAsyB,kBAAA,SAAkB7oB,OAAE1C,EAAM0C,EAAA1C,OACxB1G,KAAKqrB,YAAc3kB,EACnB1G,KAAK6M,UAGPovB,EAAAt8B,UAAAuyB,WAAA,SAAWzV,EAAO4I,EAAO8P,QAAA,IAAAA,IAAAA,GAAA,GACvB,IAAM9jB,EAAO/R,OAAOyM,OAAO,GAAI0Q,GAC3B4I,IACFhU,EAAKV,OAAS0U,EAAM5U,MAGtB,IAAMsY,EAAQ/oB,KAAK+P,QAChBuI,KAAI,SAAA/H,GAAK,OAAAA,EAAEI,UACX2lB,OACA5O,QAAO,SAAAjnB,GACN,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,KAEjBhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,UAIvD3Q,KAAK+f,cAAaze,EAAOynB,GACzB/oB,KAAK+d,SAASrP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,iBAGlDkc,EAAAt8B,UAAAyyB,aAAA,SAAa3V,EAAO4I,EAAO8P,QAAA,IAAAA,IAAAA,GAAA,GACzB,IAAM9jB,EAAO/R,OAAOyM,OAAO,GAAI0Q,GAC3B4I,IACFhU,EAAKV,OAAS0U,EAAM5U,MAGtBzQ,KAAK+f,cAAgB/f,KAAK+f,cAAc2H,QAAO,SAAAjnB,GAC7C,OAAI00B,EACK10B,EAAE+P,QAAUa,EAAKZ,OAEfhQ,EAAEgQ,OAASY,EAAKZ,MAAQhQ,EAAEkQ,SAAWU,EAAKV,WAIvD3Q,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,oBApQhB9Q,wBArErCzF,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,sBACVC,SAAU,qhEA+DVgE,gBAAiBC,EAAAA,wBAAwBC,OAEzCjE,cAAeC,EAAAA,kBAAkBC,2jDAGhCK,EAAAA,2BACAA,EAAAA,8BACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,wBACAA,EAAAA,4BACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,kCACAA,EAAAA,mCACAA,EAAAA,mCACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,+BACAA,EAAAA,2BACAA,EAAAA,mBACAA,EAAAA,mBACAA,EAAAA,6BACAA,EAAAA,wBAEAgE,EAAAA,2BACAA,EAAAA,gCAEAmkB,EAAAA,aAAY1tB,KAAA,CAAC,6BCzGhB,kCALC0U,EAAAA,SAAQ1U,KAAA,CAAC,CACR2U,QAAS,CAACya,IACVva,aAAc,CAACiiB,GAAsBG,GAAyBK,IAC9DxiB,QAAS,CAACgiB,GAAsBG,GAAyBK,0BC8CzD,SAAAW,EAAoBp6B,GAAAxC,KAAAwC,QAAAA,EARXxC,KAAAwW,KAAe,OACfxW,KAAAsM,YAAsB,EAErBtM,KAAAsP,OAAS,IAAI9C,EAAAA,aAEvBxM,KAAAshB,aAAuB,SAKvBsb,EAAAj9B,UAAAgN,YAAA,SAAYC,GACL5M,KAAKshB,YAIRthB,KAAK2hB,gBAHL3hB,KAAKshB,aAAc,EACnBthB,KAAK68B,YAAc78B,KAAKgiB,OAM5B4a,EAAAj9B,UAAAgiB,aAAA,WACE,IAAMG,EAAOxS,EAAAA,OAAOtP,KAAKwC,QAAQC,eAAe6M,OAAO,SAEnDtP,KAAKsM,WACPwV,EAAKhU,aAAarI,SAAS,KAAKsc,KAAK,IAAK/hB,KAAKgiB,MAE/CF,EAAKC,KAAK,IAAK/hB,KAAKgiB,iCA3DzBxY,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,qBACVC,SAAU,0MAUVgE,gBAAiBC,EAAAA,wBAAwBC,OACzCtB,WAAY,CACVuB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJ+uB,gBAAiB,IACjBC,iBAAkB,MAEpB9uB,EAAAA,QACE,IACAF,EAAAA,MAAM,CACJgvB,iBAAkB,wDA9B5BjzB,EAAAA,6CAsCCI,EAAAA,sBACAA,EAAAA,oBACAA,EAAAA,oBACAA,EAAAA,0BACAA,EAAAA,sBAEAgE,EAAAA,6BC7BH,SAAA8uB,IAAA,IAAAp0B,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YA4JW4I,EAAA4lB,YAAsB,SACtB5lB,EAAAijB,eAAyB,QAUzBjjB,EAAA4K,eAAyB,EACzB5K,EAAA8lB,MAAaC,EAAAA,YACb/lB,EAAAmX,cAAuB,GAGvBnX,EAAAgmB,gBAA0B,EAC1BhmB,EAAAimB,gBAA0B,EAC1BjmB,EAAAkmB,kBAA4B,EAC5BlmB,EAAAmmB,mBAA6B,GAC7BnmB,EAAAomB,mBAA6B,GAK7BpmB,EAAAqmB,cAAwB,EACxBrmB,EAAAqR,iBAA2B,EAC3BrR,EAAA6O,cAAwB,EAExB7O,EAAA4O,eAAyB,EAMxB5O,EAAAmV,SAA8B,IAAIvR,EAAAA,aAClC5D,EAAAoV,WAAgC,IAAIxR,EAAAA,aAmB9C5D,EAAAsJ,OAAS,CAAC,GAAI,GAAI,GAAI,IAEtBtJ,EAAAyiB,YAAsB,EACtBziB,EAAA0iB,WAAqB,EAKrB1iB,EAAAsmB,eAAyB,GAKzBtmB,EAAAumB,gBAA0B,YAtEYrvB,EAAAk9B,EAAA7wB,GAwEtC6wB,EAAAr9B,UAAAkN,OAAA,WACEV,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEZA,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,OACdiZ,UAAWnrB,KAAKovB,MAChBhE,UAAWprB,KAAKqvB,MAChBhE,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKsvB,eACjB7D,WAAYzrB,KAAKuvB,eACjBljB,WAAYrM,KAAKwvB,OACjBziB,WAAY/M,KAAKqP,WACjBwc,eAAgB7rB,KAAK6rB,iBAGnB7rB,KAAKyvB,WACPzvB,KAAKiQ,KAAKvJ,QAAU1G,KAAKkvB,eAAiBlvB,KAAKkS,OAAO,GAAKlS,KAAKmvB,iBAGlEnvB,KAAKonB,QAAUpnB,KAAKqnB,aAChBrnB,KAAK0vB,iBACP1vB,KAAKonB,QAAUpnB,KAAK0vB,gBAGtB1vB,KAAK2vB,QAAU3vB,KAAK4vB,aACpB5vB,KAAK6vB,aAAe7vB,KAAK8vB,kBAEzB9vB,KAAK6e,OAAS7e,KAAKsnB,UAAUtnB,KAAKonB,QAASpnB,KAAKiQ,KAAKpJ,OACrD7G,KAAKif,OAASjf,KAAK+vB,UAAU/vB,KAAK2vB,QAAS3vB,KAAKiQ,KAAKvJ,QAErD1G,KAAKgwB,iBAELhwB,KAAKiwB,YACLjwB,KAAKiN,cAAgBjN,KAAKkwB,mBAE1BlwB,KAAKqS,UAAY,aAAarS,KAAKiQ,KAAK+b,QAAO,MAAMhsB,KAAKkS,OAAO,GAAE,IAEnElS,KAAKmwB,WAAa,OAASzS,IAAKzI,WAChCjV,KAAKowB,SAAW,QAAQpwB,KAAKmwB,WAAU,KAGzC6M,EAAAr9B,UAAAqwB,eAAA,WACMhwB,KAAKyvB,WACPzvB,KAAKqwB,cAAgBrwB,KAAKiQ,KAAKpJ,MAC/B7G,KAAKswB,gBAAkBtwB,KAAKqnB,aAC5BrnB,KAAKuwB,eAAiBvwB,KAAKsnB,UAAUtnB,KAAKswB,gBAAiBtwB,KAAKqwB,eAChErwB,KAAKwwB,eAAiBxwB,KAAK+vB,UAAU/vB,KAAK2vB,QAAS3vB,KAAKkvB,gBACxDlvB,KAAKywB,kBAAoB,aAAazwB,KAAKiQ,KAAK+b,QAAO,MAAMhsB,KAAKkS,OAAO,GAAE,MAI/E8qB,EAAAr9B,UAAA0nB,WAAA,WACE,IAAIM,EAASkG,GAAuB7tB,KAAK+P,SAEzC/P,KAAKwN,UAAY4gB,GAAazG,GAC9B,IAMItS,EACA1C,EAPAoD,EAAS,GAgCb,MA9BuB,WAAnB/V,KAAKwN,YACPma,EAASA,EAAOrP,KAAI,SAAAmN,GAAK,OAAA3G,OAAO2G,OAKX,SAAnBzlB,KAAKwN,WAA2C,WAAnBxN,KAAKwN,YACpC6H,EAAMrV,KAAK0wB,UAAY1wB,KAAK0wB,UAAYtjB,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAQqmB,IAEpDhV,EAAM3S,KAAK2wB,UAAY3wB,KAAK2wB,UAAYvjB,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAQqmB,KAG/B,SAAnB3nB,KAAKwN,WACPuI,EAAS,CAAC,IAAI9Q,KAAKoQ,GAAM,IAAIpQ,KAAK0N,IAClC3S,KAAKgmB,KAAO1kB,EAAIqmB,GAAQiJ,MAAK,SAACC,EAAGxxB,GAC/B,IAAMyxB,EAAQD,EAAEE,UACVC,EAAQ3xB,EAAE0xB,UAChB,OAAID,EAAQE,EAAc,EACtBA,EAAQF,GAAe,EACpB,MAEmB,WAAnB9wB,KAAKwN,WACduI,EAAS,CAACV,EAAK1C,GAEf3S,KAAKgmB,KAAO1kB,EAAIqmB,GAAQiJ,MAAK,SAACC,EAAGxxB,GAAM,OAAAwxB,EAAIxxB,OAE3C0W,EAAS4R,EACT3nB,KAAKgmB,KAAO2B,GAGP5R,GAGTinB,EAAAr9B,UAAAiwB,WAAA,uBACQ7Z,EAAS,OACf,IAAsB,IAAAxE,EAAApR,EAAAH,KAAK+P,SAAO0B,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAA/B,IAAMoP,EAAO0B,EAAA7Q,UAChB,IAAgB,IAAAgnB,GAAApW,OAAA,EAAArR,EAAA4P,EAAQY,SAAMkX,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAA3B,IAAMvB,EAACyoB,EAAAjnB,MACNmV,EAAOrK,QAAQtM,EAAEwB,OAAS,GAC5BmV,EAAO3U,KAAKhC,EAAEwB,YAEFoC,IAAV5D,EAAEiW,MACJrV,KAAKi9B,UAAW,EACZlnB,EAAOrK,QAAQtM,EAAEiW,KAAO,GAC1BU,EAAO3U,KAAKhC,EAAEiW,WAGJrS,IAAV5D,EAAEuT,MACJ3S,KAAKi9B,UAAW,EACZlnB,EAAOrK,QAAQtM,EAAEuT,KAAO,GAC1BoD,EAAO3U,KAAKhC,EAAEuT,2MAMtB,IAAMgV,EAAMrmB,EAAOyU,GASnB,OARK/V,KAAKixB,WACRtJ,EAAOvmB,KAAK,GAOP,CAJKpB,KAAKkxB,UAAYlxB,KAAKkxB,UAAY9jB,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAQqmB,IAE9C3nB,KAAKmxB,UAAYnxB,KAAKmxB,UAAY/jB,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAQqmB,MAK5DqV,EAAAr9B,UAAAmwB,gBAAA,WACE,OAAO9vB,KAAK+P,QAAQuI,KAAI,SAAAlZ,GAAK,OAAAA,EAAEqR,SAGjCusB,EAAAr9B,UAAA2nB,UAAA,SAAUvR,EAAQlP,GAChB,IAAIyN,EAcJ,MAZuB,SAAnBtU,KAAKwN,UACP8G,EAAQyT,EAAAA,YAAY5I,MAAM,CAAC,EAAGtY,IAAQkP,OAAOA,GACjB,WAAnB/V,KAAKwN,WACd8G,EAAQ0T,EAAAA,cAAc7I,MAAM,CAAC,EAAGtY,IAAQkP,OAAOA,GAE3C/V,KAAKivB,eACP3a,EAAQA,EAAM8c,SAEY,YAAnBpxB,KAAKwN,YACd8G,EAAQ2T,EAAAA,aAAa9I,MAAM,CAAC,EAAGtY,IAAQ6P,QAAQ,IAAKX,OAAOA,IAGtDzB,GAGT0oB,EAAAr9B,UAAAowB,UAAA,SAAUha,EAAQrP,GAChB,IAAM4N,EAAQ0T,EAAAA,cAAc7I,MAAM,CAACzY,EAAQ,IAAIqP,OAAOA,GAEtD,OAAO/V,KAAKivB,aAAe3a,EAAM8c,OAAS9c,GAG5C0oB,EAAAr9B,UAAA+xB,aAAA,SAAa3b,GACX/V,KAAK0vB,eAAiB3Z,EACtB/V,KAAKonB,QAAUpnB,KAAK0vB,eACpB1vB,KAAK6e,OAAS7e,KAAKsnB,UAAUtnB,KAAKonB,QAASpnB,KAAKiQ,KAAKpJ,QAGvDm2B,EAAAr9B,UAAAgyB,sBAAA,SAAsBtgB,GACpBrR,KAAK4xB,gBAAkBvgB,EAAKzQ,MAC5BZ,KAAK6xB,iBAIPmL,EAAAr9B,UAAAmyB,YAAA,WACE9xB,KAAK4xB,gBAAkB,KACvB5xB,KAAK6xB,iBAGPmL,EAAAr9B,UAAAigB,QAAA,SAAQ1O,GACNlR,KAAKsP,OAAOZ,KAAKwC,IAGnB8rB,EAAAr9B,UAAAupB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,MAGdusB,EAAAr9B,UAAAswB,UAAA,WACE,IAAIla,EAEFA,EADsB,YAApB/V,KAAKqP,WACErP,KAAK6vB,aAEL7vB,KAAK2vB,QAGhB3vB,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQpP,KAAKqP,WAAY0G,EAAQ/V,KAAKusB,eAG3EyQ,EAAAr9B,UAAAuwB,iBAAA,WACE,IAAM6B,EAAO,CACXvkB,UAAWxN,KAAKqP,WAChB+P,YAAQpc,EACR+S,OAAQ,GACR4G,WAAO3Z,EACP0F,SAAU1I,KAAK6rB,gBAUjB,MARuB,YAAnBkG,EAAKvkB,WACPukB,EAAKhc,OAAS/V,KAAK6vB,aACnBkC,EAAK3S,OAASpf,KAAKof,OACnB2S,EAAKpV,MAAQ3c,KAAKwuB,cAElBuD,EAAKhc,OAAS/V,KAAK2vB,QACnBoC,EAAK3S,OAASpf,KAAKof,OAAO9K,OAErByd,GAGTiL,EAAAr9B,UAAAqyB,iBAAA,SAAiB5oB,OAAEvC,EAAKuC,EAAAvC,MACtB7G,KAAKsrB,WAAazkB,EAClB7G,KAAK6M,UAGPmwB,EAAAr9B,UAAAsyB,kBAAA,SAAkB7oB,OAAE1C,EAAM0C,EAAA1C,OACxB1G,KAAKqrB,YAAc3kB,EACnB1G,KAAK6M,UAGPmwB,EAAAr9B,UAAAuyB,WAAA,SAAW7gB,GACTrR,KAAK6xB,gBAEO7xB,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,UAEvC,IAIXZ,KAAK+f,cAAgB,CAAC1O,GACtBrR,KAAK+d,SAASrP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,kBAGlDid,EAAAr9B,UAAAyyB,aAAA,SAAa/gB,GACX,IAAM5F,EAAMzL,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,SAGlDZ,KAAK+f,cAAcpU,OAAOF,EAAK,GAC/BzL,KAAK+f,cAAaze,EAAOtB,KAAK+f,eAE9B/f,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,iBAGpDid,EAAAr9B,UAAAkyB,cAAA,mBACE7xB,KAAK+f,cAAaze,EAAOtB,KAAK+f,mBAC9B,IAAoB,IAAA9I,EAAA9W,EAAAH,KAAK+f,eAAaxO,EAAA0F,EAAAtW,QAAA4Q,EAAA1Q,KAAA0Q,EAAA0F,EAAAtW,OAAE,CAAnC,IAAMmf,EAAKvO,EAAA3Q,MACdZ,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOkf,EAAOqS,QAAS,uGAEhDnyB,KAAK+f,cAAgB,OAlUe9Q,wBA1JvCzF,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,wBACVC,SAAU,2hJAsIVC,cAAeC,EAAAA,kBAAkBC,KACjC6D,gBAAiBC,EAAAA,wBAAwBC,OACzCtB,WAAY,CACVuB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,IAEXC,EAAAA,QACE,IACAF,EAAAA,MAAM,CACJC,QAAS,gkDAQlB9D,EAAAA,2BACAA,EAAAA,8BACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,yBACAA,EAAAA,wBACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,qBACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,gCACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,kCACAA,EAAAA,mCACAA,EAAAA,mCACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,4BACAA,EAAAA,+BACAA,EAAAA,4BACAA,EAAAA,8BACAA,EAAAA,6BACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,wBAEAgE,EAAAA,2BACAA,EAAAA,gCAEAmkB,EAAAA,aAAY1tB,KAAA,CAAC,kDACb0tB,EAAAA,aAAY1tB,KAAA,CAAC,8CAqMb0F,EAAAA,aAAY1F,KAAA,CAAC,mCCvZhB,SAAAu4B,IA+DWl9B,KAAAsM,YAAsB,SAY/B4wB,EAAAv9B,UAAAgN,YAAA,SAAYC,GACV5M,KAAK6M,UAGPqwB,EAAAv9B,UAAAkN,OAAA,WACE7M,KAAKm9B,kBAEL,IAAMjsB,EAAOlR,KAAKo9B,SAASp9B,KAAKkR,KAAKP,QAE/B0sB,EAAUr9B,KAAKs9B,mBACrBt9B,KAAKgiB,KAAOqb,EAAQnsB,IAAS,GAE7B,IAAMqsB,EAAUv9B,KAAKw9B,mBAGrB,GAFAx9B,KAAK4hB,SAAW2b,EAAQrsB,IAAS,GAE7BlR,KAAKi9B,SAAU,CACjB,IAAM9d,EAAQnf,KAAKy9B,oBACnBz9B,KAAK09B,UAAYve,EAAMjO,IAAS,GAGlC,GAAIlR,KAAKuhB,YAAa,CACpBvhB,KAAKyW,OAASzW,KAAK07B,YACnB,IAAM/T,EAAS3nB,KAAKkR,KAAKP,OAAO2H,KAAI,SAAAlZ,GAAK,OAAAA,EAAEwB,SACrC+R,EAAMvF,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAQqmB,IAEpBhV,IADQvF,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAQqmB,MAEtB3nB,KAAKyW,OAASzW,KAAKof,OAAOC,SAAS1M,SAGrC3S,KAAKyW,OAASzW,KAAKof,OAAOC,SAASrf,KAAKkR,KAAKT,OAIjDysB,EAAAv9B,UAAA29B,iBAAA,WAAA,IAAA10B,EAAA5I,KACE,OAAO29B,EAAAA,OACJlrB,GAAE,SAAArT,GACD,IAAMoR,EAAQpR,EAAEqR,KAShB,MAPuB,SAAnB7H,EAAK4E,UACC5E,EAAKiW,OAAOrO,GACQ,WAAnB5H,EAAK4E,UACN5E,EAAKiW,OAAOC,OAAOtO,IAEnB5H,EAAKiW,OAAOrO,MAIvB+B,GAAE,SAAAnT,GAAK,OAAAwJ,EAAKqW,OAAO7f,EAAEwB,UACrB8tB,MAAM1uB,KAAK0uB,QAGhBwO,EAAAv9B,UAAA89B,kBAAA,WAAA,IAAA70B,EAAA5I,KACE,OAAO0zB,EAAAA,OACJjhB,GAAE,SAAArT,GACD,IAAMoR,EAAQpR,EAAEqR,KAShB,MAPuB,SAAnB7H,EAAK4E,UACC5E,EAAKiW,OAAOrO,GACQ,WAAnB5H,EAAK4E,UACN5E,EAAKiW,OAAOC,OAAOtO,IAEnB5H,EAAKiW,OAAOrO,MAIvBmjB,IAAG,SAAAv0B,GAAK,OAAAwJ,EAAKqW,OAAwB,iBAAV7f,EAAEiW,IAAmBjW,EAAEiW,IAAMjW,EAAEwB,UAC1DqX,IAAG,SAAA7Y,GAAK,OAAAwJ,EAAKqW,OAAwB,iBAAV7f,EAAEuT,IAAmBvT,EAAEuT,IAAMvT,EAAEwB,UAC1D8tB,MAAM1uB,KAAK0uB,QAGhBwO,EAAAv9B,UAAA69B,iBAAA,WAAA,IAAA50B,EAAA5I,KAME,OAAO0zB,EAAAA,OACJjhB,GANe,SAAArT,GAChB,IAAMoR,EAAQpR,EAAEqR,KAChB,OAAO7H,EAAKiW,OAAOrO,MAKlBmjB,IAAG,WAAM,OAAA/qB,EAAKqW,OAAOE,QAAQ,MAC7BlH,IAAG,SAAA7Y,GAAK,OAAAwJ,EAAKqW,OAAO7f,EAAEwB,UACtB8tB,MAAM1uB,KAAK0uB,QAGhBwO,EAAAv9B,UAAAy9B,SAAA,SAASlsB,GASP,OAPEA,EADqB,WAAnBlR,KAAKwN,UACAmlB,GAAWzhB,EAAM,QACI,SAAnBlR,KAAKwN,UACP0lB,GAAWhiB,EAAM,QAEjB2hB,GAAa3hB,EAAM,OAAQ,MAAOlR,KAAK6e,OAAO9I,WAMzDmnB,EAAAv9B,UAAAw9B,gBAAA,WACE,GAA8B,WAA1Bn9B,KAAKof,OAAO5R,UAAwB,CACtCxN,KAAKuhB,aAAc,EACnBvhB,KAAKke,WAAa,OAASR,IAAKzI,WAChCjV,KAAK07B,YAAc,QAAQ17B,KAAKke,WAAU,IAC1C,IAAMyJ,EAAS3nB,KAAKkR,KAAKP,OAAO2H,KAAI,SAAAlZ,GAAK,OAAAA,EAAEwB,SACrC+R,EAAMvF,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAQqmB,IAClBtS,EAAMjI,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAQqmB,IACxB3nB,KAAKwf,cAAgBxf,KAAKof,OAAOgO,uBAAuBza,EAAK0C,GAC7DrV,KAAK49B,kBAAoB59B,KAAKof,OAAOgO,uBAAuBza,QAE5D3S,KAAKuhB,aAAc,EACnBvhB,KAAKwf,mBAAgBxc,EACrBhD,KAAK49B,uBAAoB56B,GAI7Bk6B,EAAAv9B,UAAAkgB,SAAA,SAASC,GACP,QAAK9f,KAAK+f,oBAIM/c,IAHHhD,KAAK+f,cAAcC,MAAK,SAAA5gB,GACnC,OAAO0gB,EAAMrP,OAASrR,EAAEqR,SAK5BysB,EAAAv9B,UAAAm0B,WAAA,SAAWhU,GACT,SAAK9f,KAAK+f,eAA+C,IAA9B/f,KAAK+f,cAAcrf,cAI9BsC,IAHHhD,KAAK+f,cAAcC,MAAK,SAAA5gB,GACnC,OAAO0gB,EAAMrP,OAASrR,EAAEqR,mCAtM7BjH,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,4BACVC,SAAU,41CAiDVgE,gBAAiBC,EAAAA,wBAAwBC,0CAGxC1D,EAAAA,sBACAA,EAAAA,sBACAA,EAAAA,sBACAA,EAAAA,yBACAA,EAAAA,qBACAA,EAAAA,6BACAA,EAAAA,gCACAA,EAAAA,wBACAA,EAAAA,0BACAA,EAAAA,gBC1DH,kCALCmP,EAAAA,SAAQ1U,KAAA,CAAC,CACR2U,QAAS,CAACya,IACVva,aAAc,CAACojB,GAAeI,GAAoBE,IAClDzjB,QAAS,CAACmjB,GAAeI,GAAoBE,QCW/C,IAAMW,GAAQ,EAAIzwB,KAAKqI,kBAEvB,SAAAqoB,IAAA,IAAAl1B,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YAkHW4I,EAAA4lB,YAAsB,SACtB5lB,EAAAijB,eAAyB,QAQzBjjB,EAAA4K,eAAyB,EACzB5K,EAAA8lB,MAAaqP,EAAAA,oBACbn1B,EAAAmX,cAAuB,GAEvBnX,EAAAo1B,iBAA2B,IAC3Bp1B,EAAAimB,gBAA0B,EAC1BjmB,EAAAomB,mBAA6B,GAG7BpmB,EAAAqmB,cAAwB,EACxBrmB,EAAAqR,iBAA2B,EAC3BrR,EAAAq1B,mBAA6B,EAC7Br1B,EAAAyY,UAAoB,EACpBzY,EAAAs1B,cAAwB,EACxBt1B,EAAAu1B,WAAqB,EACrBv1B,EAAAw1B,cAAwB,GAEvBx1B,EAAAmV,SAA8B,IAAIvR,EAAAA,aAClC5D,EAAAoV,WAAgC,IAAIxR,EAAAA,aAoB9C5D,EAAAsJ,OAAS,CAAC,GAAI,GAAI,GAAI,IACtBtJ,EAAAyiB,YAAsB,EACtBziB,EAAA0iB,WAAqB,WAnDkBxrB,EAAAg+B,EAAA3xB,GA0DvC2xB,EAAAn+B,UAAAkN,OAAA,WACEV,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEZA,KAAKq+B,UAELr+B,KAAKo6B,YACLp6B,KAAKiwB,YACLjwB,KAAKiN,cAAgBjN,KAAKkwB,mBAE1BlwB,KAAKs+B,YAGPR,EAAAn+B,UAAA0+B,QAAA,WACEr+B,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,OACdiZ,UAAWnrB,KAAKovB,MAChBhE,UAAWprB,KAAKqvB,MAChBhE,YAAarrB,KAAKqrB,YAClBC,WAAYtrB,KAAKsrB,WACjBC,WAAYvrB,KAAKsvB,eACjB7D,WAAYzrB,KAAKuvB,eACjBljB,WAAYrM,KAAKwvB,OACjBziB,WAAY/M,KAAKqP,WACjBwc,eAAgB7rB,KAAK6rB,iBAGvB,IAAM0S,EAAYnxB,KAAKC,MAAMrN,KAAKiQ,KAAKpJ,MAAQ,GACzC23B,EAAapxB,KAAKC,MAAMrN,KAAKiQ,KAAKvJ,OAAS,GAE3C+3B,EAAez+B,KAAKy+B,YAAcrxB,KAAKiI,IAAImpB,EAAa,IAAKD,EAAY,KAEzEG,EAAUtxB,KAAKuF,IAAI,EAAG6rB,EAAaC,GAEzCz+B,KAAK2+B,UAASr/B,OAAAyM,OAAAzM,OAAAyM,OAAA,GACT/L,KAAKiQ,MAAI,CACZpJ,MAAO03B,IAGTv+B,KAAKqS,UAAY,aAAarS,KAAKiQ,KAAK+b,QAAO,KAAKhsB,KAAKkS,OAAO,GAAE,IAClElS,KAAK4+B,eAAiB,gBAAgBF,EAAO,IAC7C1+B,KAAKuW,YAAcvW,KAAKiQ,KAAKvJ,OAAS,GACtC1G,KAAK6+B,cAAgB,aAAaN,EAAS,KAAKC,EAAU,KAG5DV,EAAAn+B,UAAAy6B,UAAA,WACE,IAAM0E,EAAU9+B,KAAK++B,aACrB/+B,KAAKwN,UAAY4gB,GAAa0Q,GAC9B9+B,KAAKonB,QAAUpnB,KAAK0vB,gBAAkB1vB,KAAKqnB,WAAWyX,GAEtD9+B,KAAK2vB,QAAU3vB,KAAK4vB,aACpB5vB,KAAK6vB,aAAe7vB,KAAK8vB,kBAEzB9vB,KAAK6e,OAAS7e,KAAKsnB,UAAUtnB,KAAKonB,QAASyW,IAC3C79B,KAAKif,OAASjf,KAAK+vB,UAAU/vB,KAAK2vB,QAAS3vB,KAAKy+B,aAChDz+B,KAAKg/B,WAAah/B,KAAK+vB,UAAU/vB,KAAK2vB,QAAQ9F,UAAW7pB,KAAKy+B,cAGhEX,EAAAn+B,UAAA2+B,SAAA,WAAA,IACM7pB,EADN7L,EAAA5I,KAGIyU,EADEzU,KAAKi/B,oBACMj/B,KAAKi/B,oBACTj/B,KAAK6e,OAAOpK,WACRzU,KAAK6e,OAAOpK,WAAWvP,MAAMlF,KAAK6e,OAAQ,CAAC,IAE3C,SAAAzf,GACX,OCnQewB,EDmQJxB,EClQe,kBAAzB6V,SAASpV,KAAKe,GDmQNxB,EAAEsR,qBAEJtR,EAAEsV,qBCtQM9T,GD0QnB,IAAM69B,EAAcz+B,KAAKy+B,YAGzBz+B,KAAKk/B,WAAal/B,KAAKonB,QAAQ9O,KAAI,SAAAlZ,GACjC,IAAM+/B,EAAav2B,EAAKiW,OAAOzf,GACzBggC,EAJE,IAIOX,GAAeU,EAAa/xB,KAAKqI,IAAM,EAAI,GACpDjF,EAAQiE,EAAWrV,GAEnBigC,EAAW,CAACZ,EAAcrxB,KAAKuI,IAAIwpB,IAAcV,EAAcrxB,KAAKoI,IAAI2pB,IAE9E,MAAO,CACLG,YAAa,EACbb,YAAWA,EACXU,WAAUA,EACVI,SAAUJ,EACVv+B,MAAO69B,EACPjuB,MAAKA,EACL6uB,SAAQA,EACRG,IATU,CAACJ,EARL,IAQaC,EAAS,QAgBhC,IAHA,IAGS5+B,EAAI,EAAGA,EAAIT,KAAKk/B,WAAWx+B,OAAS,EAAGD,IAG9C,IAFA,IAAMowB,EAAI7wB,KAAKk/B,WAAWz+B,GAEjBmQ,EAAInQ,EAAI,EAAGmQ,EAAI5Q,KAAKk/B,WAAWx+B,OAAQkQ,IAAK,CACnD,IAAMvR,EAAIW,KAAKk/B,WAAWtuB,GAE1B,GAAIvR,EAAEmgC,IAAI,GAAK3O,EAAE2O,IAAI,GAAK,EAAG,CAE3B,IAAMp/B,EAXQ,GAWUgN,KAAKsI,IAAIrW,EAAEmgC,IAAI,GAAK3O,EAAE2O,IAAI,IAC9Cp/B,EAAI,IAENf,EAAEmgC,IAAI,IAAMpyB,KAAKwK,KAAKvY,EAAEmgC,IAAI,IAAMp/B,IAM1CJ,KAAKy/B,YAAcz/B,KAAKg/B,WAAWjsB,MAAM3F,KAAKC,MAAMrN,KAAKiQ,KAAKvJ,OAAS,KAAK4R,KAAI,SAAAlZ,GAAK,OAAAwJ,EAAKqW,OAAO7f,OAGnG0+B,EAAAn+B,UAAAo/B,WAAA,uBACQpX,EAAS,OACf,IAAsB,IAAApW,EAAApR,EAAAH,KAAK+P,SAAO0B,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAA/B,IAAMoP,EAAO0B,EAAA7Q,UAChB,IAAgB,IAAAgnB,GAAApW,OAAA,EAAArR,EAAA4P,EAAQY,SAAMkX,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAA3B,IAAMvB,EAACyoB,EAAAjnB,MACL+mB,EAAOG,SAAS1oB,EAAEqR,OACrBkX,EAAOvmB,KAAKhC,EAAEqR,2MAIpB,OAAOkX,GAGTmW,EAAAn+B,UAAA0nB,WAAA,SAAWM,GACT,YADS,IAAAA,IAAAA,EAAS3nB,KAAK++B,cACA,SAAnB/+B,KAAKwN,UAGA,CAFKJ,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAQqmB,IACZva,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAQqmB,KAEI,WAAnB3nB,KAAKwN,WACdma,EAASA,EAAOrP,KAAI,SAAAmN,GAAK,OAAA3G,OAAO2G,MAGzB,CAFKrY,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAQqmB,IACZva,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAQqmB,MAGnBA,GAGTmW,EAAAn+B,UAAA+/B,WAAA,uBACQ3pB,EAAS,OAEf,IAAsB,IAAAxE,EAAApR,EAAAH,KAAK+P,SAAO0B,EAAAF,EAAA5Q,QAAA8Q,EAAA5Q,KAAA4Q,EAAAF,EAAA5Q,OAAE,CAA/B,IAAMoP,EAAO0B,EAAA7Q,UAChB,IAAgB,IAAAgnB,GAAAgT,OAAA,EAAAz6B,EAAA4P,EAAQY,SAAMkX,EAAAD,EAAAjnB,QAAAknB,EAAAhnB,KAAAgnB,EAAAD,EAAAjnB,OAAE,CAA3B,IAAMvB,EAACyoB,EAAAjnB,MACNmV,EAAOrK,QAAQtM,EAAEwB,OAAS,GAC5BmV,EAAO3U,KAAKhC,EAAEwB,YAEFoC,IAAV5D,EAAEiW,KACAU,EAAOrK,QAAQtM,EAAEiW,KAAO,GAC1BU,EAAO3U,KAAKhC,EAAEiW,UAGJrS,IAAV5D,EAAEuT,KACAoD,EAAOrK,QAAQtM,EAAEuT,KAAO,GAC1BoD,EAAO3U,KAAKhC,EAAEuT,0MAKtB,OAAOoD,GAGT+nB,EAAAn+B,UAAAiwB,WAAA,SAAW7Z,QAAA,IAAAA,IAAAA,EAAS/V,KAAK0/B,cACvB,IAAIrqB,EAAMjI,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAQyU,IAChBpD,EAAMvF,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAA,CAAKtB,KAAKk+B,eAAkBnoB,IAO5C,OALAV,EAAMjI,KAAKuF,IAAI,EAAG0C,GACbrV,KAAKixB,YACR5b,EAAMjI,KAAKiI,IAAI,EAAGA,IAGb,CAACA,EAAK1C,IAGfmrB,EAAAn+B,UAAAmwB,gBAAA,WACE,OAAO9vB,KAAK+P,QAAQuI,KAAI,SAAAlZ,GAAK,OAAAA,EAAEqR,SAGjCqtB,EAAAn+B,UAAA2nB,UAAA,SAAUvR,EAAQlP,GAChB,OAAQ7G,KAAKwN,WACX,IAAK,OACH,OAAOua,EAAAA,YAAY5I,MAAM,CAAC,EAAGtY,IAAQkP,OAAOA,GAC9C,IAAK,SACH,IAAMzB,EAAQ0T,EAAAA,cAAc7I,MAAM,CAAC,EAAGtY,IAAQkP,OAAOA,GACrD,OAAO/V,KAAKivB,aAAe3a,EAAM8c,OAAS9c,EAC5C,QACE,OAAO2T,EAAAA,aACJ9I,MAAM,CAAC,EAAGtY,EAAQg3B,GAAQ9nB,EAAOrV,SACjCgW,QAAQ,GACRX,OAAOA,KAIhB+nB,EAAAn+B,UAAAowB,UAAA,SAAUha,EAAQrP,GAChB,IAAM4N,EAAQ0T,EAAAA,cAAc7I,MAAM,CAAC,EAAGzY,IAASqP,OAAOA,GAEtD,OAAO/V,KAAKivB,aAAe3a,EAAM8c,OAAS9c,GAG5CwpB,EAAAn+B,UAAAigB,QAAA,SAAQ1O,EAAMP,GACRA,IACFO,EAAKP,OAASA,EAAOF,MAGvBzQ,KAAKsP,OAAOZ,KAAKwC,IAGnB4sB,EAAAn+B,UAAAswB,UAAA,WACE,IAAMla,EAA6B,YAApB/V,KAAKqP,WAA2BrP,KAAK6vB,aAAe7vB,KAAK2vB,QAAQ9F,UAChF7pB,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQpP,KAAKqP,WAAY0G,EAAQ/V,KAAKusB,eAG3EuR,EAAAn+B,UAAAuwB,iBAAA,WACE,MAAwB,YAApBlwB,KAAKqP,WACA,CACL7B,UAAWxN,KAAKqP,WAChB+P,OAAQpf,KAAKof,OACbrJ,OAAQ/V,KAAK6vB,aACblT,MAAO3c,KAAKwuB,YACZ9lB,SAAU1I,KAAK6rB,gBAGZ,CACLre,UAAWxN,KAAKqP,WAChB+P,OAAQpf,KAAKof,OAAO9K,MACpByB,OAAQ/V,KAAK2vB,QACbhT,WAAO3Z,EACP0F,SAAU1I,KAAK6rB,iBAInBiS,EAAAn+B,UAAAqyB,iBAAA,SAAiB5oB,OAAEvC,EAAKuC,EAAAvC,MACtB7G,KAAKsrB,WAAazkB,EAClB7G,KAAK6M,UAGPixB,EAAAn+B,UAAAsyB,kBAAA,SAAkB7oB,OAAE1C,EAAM0C,EAAA1C,OACxB1G,KAAKqrB,YAAc3kB,EACnB1G,KAAK6M,UAGPixB,EAAAn+B,UAAAuyB,WAAA,SAAW7gB,GACGrR,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,UAEvC,IAGXZ,KAAK+f,cAAgB/f,KAAKi+B,kBAAiB38B,EAAA,CAAI+P,GAASrR,KAAK+f,eAAiB/f,KAAK+f,cACnF/f,KAAK+d,SAASrP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,kBAGlD+d,EAAAn+B,UAAAyyB,aAAA,SAAa/gB,GACX,IAAM5F,EAAMzL,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,SAGlDZ,KAAK+f,cAAcpU,OAAOF,EAAK,GAC/BzL,KAAK+f,cAAaze,EAAOtB,KAAK+f,eAE9B/f,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,iBAGpD+d,EAAAn+B,UAAAkyB,cAAA,mBACE7xB,KAAK+f,cAAaze,EAAOtB,KAAK+f,mBAC9B,IAAoB,IAAA9I,EAAA9W,EAAAH,KAAK+f,eAAaxO,EAAA0F,EAAAtW,QAAA4Q,EAAA1Q,KAAA0Q,EAAA0F,EAAAtW,OAAE,CAAnC,IAAMmf,EAAKvO,EAAA3Q,MACdZ,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOkf,EAAOqS,QAAS,uGAEhDnyB,KAAK+f,cAAgB,IAGvB+d,EAAAn+B,UAAAupB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKZ,SAhVyBxB,wBAhHxCzF,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,yBACVC,SAAU,ijGA4FVC,cAAeC,EAAAA,kBAAkBC,KACjC6D,gBAAiBC,EAAAA,wBAAwBC,OACzCtB,WAAY,CACVuB,EAAAA,QAAQ,iBAAkB,CACxBC,EAAAA,WAAW,SAAU,CACnBC,EAAAA,MAAM,CACJC,QAAS,IAEXC,EAAAA,QACE,IACAF,EAAAA,MAAM,CACJC,QAAS,6yEAQlB9D,EAAAA,2BACAA,EAAAA,8BACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,8BACAA,EAAAA,8BACAA,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,yBACAA,EAAAA,6BACAA,EAAAA,qBACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,gCACAA,EAAAA,8BACAA,EAAAA,kCACAA,EAAAA,mCACAA,EAAAA,mCACAA,EAAAA,4BACAA,EAAAA,+BACAA,EAAAA,iCACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,yBACAA,EAAAA,6BACAA,EAAAA,wBAEAgE,EAAAA,2BACAA,EAAAA,gCAEAmkB,EAAAA,aAAY1tB,KAAA,CAAC,wCErJhB,SAAAg7B,IA6DW3/B,KAAAia,iBAA2B,EAE3Bja,KAAAqhB,UAAoB,EAEpBrhB,KAAAsM,YAAsB,EAErBtM,KAAAsP,OAAS,IAAI9C,EAAAA,aACbxM,KAAA+d,SAAW,IAAIvR,EAAAA,aACfxM,KAAAge,WAAa,IAAIxR,EAAAA,aAI3BxM,KAAA4/B,aAAuB,SAcvBD,EAAAhgC,UAAAgN,YAAA,SAAYC,GACV5M,KAAK6M,UAGP8yB,EAAAhgC,UAAAkN,OAAA,WAAA,IAAAjE,EAAA5I,KACEA,KAAKm9B,kBAEL,IAAMQ,EAAO39B,KAAKs9B,mBAEZpsB,EAAOlR,KAAKo9B,SAASp9B,KAAKkR,KAAKP,QAE/BgO,EAAa3e,KAAKkR,KAAKT,KACvBovB,EAA4C,WAA1B7/B,KAAKof,OAAO5R,UAC9B6H,EAAMrV,KAAKif,OAAOlJ,SAAS,GACjC/V,KAAK8/B,YAAc9/B,KAAKof,OAAOC,SAASwgB,EAAkBxqB,EAAMsJ,GAEhE3e,KAAKgiB,KAAO2b,EAAKzsB,IAAS,GAE1BlR,KAAKi7B,QAAU/pB,EAAKoH,KAAI,SAAAlZ,GACtB,IAAMyxB,EAAIjoB,EAAKm3B,SAAS3gC,GAClB6B,EAAI2H,EAAK4rB,UAAUp1B,GACnBwB,EAAQxB,EAAEwB,MAEVme,EAAQnW,EAAKwW,OAAOC,SAASwgB,EAAkBzyB,KAAKsI,IAAI9U,GAAS+d,GAQvE,MAAO,CACLzN,KAPY5R,OAAOyM,OAAO,GAAI3M,EAAG,CACjCuR,OAAQgO,EACR/d,MAAKA,EACL6P,KAAMrR,EAAEqR,OAKRiO,GAAIzd,EAAImM,KAAKuI,IAAIkb,GACjB7R,IAAK/d,EAAImM,KAAKoI,IAAIqb,GAClBjwB,MAAKA,EACLme,MAAKA,EACLvO,MAAOpR,EAAEqR,SAIbzQ,KAAKggC,OAAShgC,KAAK6f,SAAS7f,KAAKkR,MACjClR,KAAKigC,SAAWjgC,KAAK8zB,WAAW9zB,KAAKkR,MACrClR,KAAKm4B,YAAcn4B,KAAKm4B,aAAW,SAAK3tB,GAAK,OAAA5B,EAAKs3B,mBAAmB11B,KAGvEm1B,EAAAhgC,UAAAogC,SAAA,SAAS3gC,GACP,IAAMoR,EAAQpR,EAAEqR,KAChB,MAAuB,SAAnBzQ,KAAKwN,UACAxN,KAAK6e,OAAOrO,GACS,WAAnBxQ,KAAKwN,UACPxN,KAAK6e,OAAOC,OAAOtO,IAErBxQ,KAAK6e,OAAOrO,IAGrBmvB,EAAAhgC,UAAA60B,UAAA,SAAUp1B,GACR,OAAOY,KAAKif,OAAO7f,EAAEwB,QAGvB++B,EAAAhgC,UAAA29B,iBAAA,WAAA,IAAA10B,EAAA5I,KACE,OAAOmgC,EAAAA,aACJxrB,OAAM,SAAAvV,GAAK,OAAAwJ,EAAKm3B,SAAS3gC,MACzBmgB,QAAO,SAAAngB,GAAK,OAAAwJ,EAAK4rB,UAAUp1B,MAC3BsvB,MAAM1uB,KAAK0uB,QAGhBiR,EAAAhgC,UAAAy9B,SAAA,SAASlsB,GACP,MAAuB,WAAnBlR,KAAKwN,UACAmlB,GAAWzhB,EAAM,QACI,SAAnBlR,KAAKwN,UACP0lB,GAAWhiB,EAAM,QAEnB2hB,GAAa3hB,EAAM,OAAQ,MAAOlR,KAAK6e,OAAO9I,WAGvD4pB,EAAAhgC,UAAAkgB,SAAA,SAASC,GACP,QAAK9f,KAAK+f,oBAIM/c,IAHHhD,KAAK+f,cAAcC,MAAK,SAAA5gB,GACnC,OAAO0gB,EAAMrP,OAASrR,EAAEqR,SAK5BkvB,EAAAhgC,UAAAm0B,WAAA,SAAWhU,GACT,SAAK9f,KAAK+f,eAA+C,IAA9B/f,KAAK+f,cAAcrf,cAI9BsC,IAHHhD,KAAK+f,cAAcC,MAAK,SAAA5gB,GACnC,OAAO0gB,EAAMrP,OAASrR,EAAEqR,SAK5BkvB,EAAAhgC,UAAAugC,mBAAA,SAAmB92B,OAAEoH,EAAKpH,EAAAoH,MAAE5P,EAAKwI,EAAAxI,MAC/B,MAAO,uCACyBoc,EAAYhd,KAAKkR,KAAKT,MAAK,MAAMuM,EAAYxM,GAAM,4CACrD5P,EAAM8T,iBAAgB,iBAItDirB,EAAAhgC,UAAAw9B,gBAAA,WAGE,GAFAn9B,KAAKuhB,YAAcvhB,KAAKqhB,UAAsC,WAA1BrhB,KAAKof,OAAO5R,UAE3CxN,KAAKuhB,YAOV,GAHAvhB,KAAKke,WAAa,OAASR,IAAKzI,WAChCjV,KAAK07B,YAAc,QAAQ17B,KAAKke,WAAU,IAEZ,WAA1Ble,KAAKof,OAAO5R,UAAwB,CACtC,IAAMma,EAAS3nB,KAAKkR,KAAKP,OAAO2H,KAAI,SAAAlZ,GAAK,OAAAA,EAAEwB,SACrC+R,EAAMvF,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAQqmB,IAClBtS,EAAMjI,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAQqmB,IACxB3nB,KAAKwf,cAAgBxf,KAAKof,OAAOgO,uBAAuBza,EAAK0C,QAE7DrV,KAAKwf,mBAAgBxc,6BA1M1BwG,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,6BACVC,SAAU,g/CA+CVgE,gBAAiBC,EAAAA,wBAAwBC,0CAGxC1D,EAAAA,oBACAA,EAAAA,sBACAA,EAAAA,sBACAA,EAAAA,sBACAA,EAAAA,yBACAA,EAAAA,qBACAA,EAAAA,6BACAA,EAAAA,gCACAA,EAAAA,+BACAA,EAAAA,2BACAA,EAAAA,wBACAA,EAAAA,+BACAA,EAAAA,0BACAA,EAAAA,sBAEAgE,EAAAA,yBACAA,EAAAA,2BACAA,EAAAA,6BCrEH,SAAAkyB,IAAA,IAAAx3B,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YAkDW4I,EAAAmX,cAAuB,GACvBnX,EAAAqR,iBAA2B,EAE3BrR,EAAA4H,MAAgB,QAEf5H,EAAAmV,SAA8B,IAAIvR,EAAAA,aAClC5D,EAAAoV,WAAgC,IAAIxR,EAAAA,aAY9C5D,EAAAsJ,OAAS,CAAC,GAAI,GAAI,GAAI,aApBuBpS,EAAAsgC,EAAAj0B,GA0B7Ci0B,EAAAzgC,UAAAkN,OAAA,WACEV,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEZA,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAqB,EAAb7G,KAAK6G,MAAa,GAC1BH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,SAGhBlS,KAAKsQ,cAELtQ,KAAK+V,OAAS/V,KAAKw5B,YACnBx5B,KAAKiwB,YAEL,IAAMjE,EAAUhsB,KAAKiQ,KAAKpJ,MAAQ,EAC5B63B,EAAU1+B,KAAKkS,OAAO,GAAKlS,KAAKiQ,KAAKvJ,OAAS,EACpD1G,KAAKuN,YAAcvN,KAAK6G,MAAQ7G,KAAKiQ,KAAKpJ,MAAQ7G,KAAKkS,OAAO,GAE9DlS,KAAKy+B,YAAcrxB,KAAKiI,IAAIrV,KAAKiQ,KAAKpJ,MAAO7G,KAAKiQ,KAAKvJ,QAAU,IACjE1G,KAAKs/B,YAAiC,IAAnBt/B,KAAKy+B,YAExBz+B,KAAKqS,UAAY,aAAa2Z,EAAO,MAAM0S,EAAO,KAGpD0B,EAAAzgC,UAAA65B,UAAA,WACE,OAAOx5B,KAAK+P,QAAQuI,KAAI,SAAAlZ,GAAK,OAAAA,EAAEoR,UAGjC4vB,EAAAzgC,UAAAigB,QAAA,SAAQ1O,GACNlR,KAAKsP,OAAOZ,KAAKwC,IAGnBkvB,EAAAzgC,UAAAswB,UAAA,WACEjwB,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQ,UAAWpP,KAAK+V,OAAQ/V,KAAKusB,eAG1E6T,EAAAzgC,UAAAuyB,WAAA,SAAW7gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACf9jB,EAAOrR,KAAK+P,QAAQiQ,MAAK,SAAA5gB,GACvB,OAAI+1B,EACK/1B,EAAEoR,QAAUa,EAAKZ,KAEjBrR,EAAEqR,OAASY,EAAKZ,QAIfzQ,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,OAASxB,EAAEuR,SAAWU,EAAKV,WAElE,IAIX3Q,KAAK+f,cAAaze,EAAA,CAAI+P,GAASrR,KAAK+f,eACpC/f,KAAK+d,SAASrP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,kBAGlDqgB,EAAAzgC,UAAAyyB,aAAA,SAAa/gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACjB9jB,EAAOrR,KAAK+P,QAAQiQ,MAAK,SAAA5gB,GACvB,OAAI+1B,EACK/1B,EAAEoR,QAAUa,EAAKZ,KAEjBrR,EAAEqR,OAASY,EAAKZ,QAI3B,IAAMhF,EAAMzL,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,OAASxB,EAAEuR,SAAWU,EAAKV,UAG7E3Q,KAAK+f,cAAcpU,OAAOF,EAAK,GAC/BzL,KAAK+f,cAAaze,EAAOtB,KAAK+f,eAE9B/f,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,oBAlGP9Q,wBAhD9CzF,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,gCACVC,SAAU,ssDA2CVC,cAAeC,EAAAA,kBAAkBC,KACjC6D,gBAAiBC,EAAAA,wBAAwBC,2pDAGxC1D,EAAAA,6BACAA,EAAAA,+BACAA,EAAAA,2BACAA,EAAAA,qBACAA,EAAAA,wBAEAgE,EAAAA,2BACAA,EAAAA,gCAEAmkB,EAAAA,aAAY1tB,KAAA,CAAC,4CAYbuF,EAAAA,8BACAA,EAAAA,oCACAA,EAAAA,2BC/BD,SAAAm2B,EAAwCh4B,GAAArI,KAAAqI,WAAAA,EAV/BrI,KAAAsM,YAAsB,EACtBtM,KAAAm+B,WAAqB,EACrBn+B,KAAAo+B,cAAwB,GAS/Bp+B,KAAK0S,UAAYA,SAGnB2tB,EAAA1gC,UAAAgN,YAAA,SAAYC,GACV5M,KAAKsgC,gBACLtgC,KAAK6M,UAGPwzB,EAAA1gC,UAAA2gC,cAAA,WACE,GAAI9wB,EAAAA,iBAAiBxP,KAAKqI,YACxBrI,KAAKugC,eAAiB,eAAevgC,KAAKwgC,MAAK,MAAMxgC,KAAKygC,MAAK,SAC/DzgC,KAAK0gC,cAAgB,aAAa1gC,KAAKwgC,MAAK,IAAIxgC,KAAKygC,MAAK,IAC1DzgC,KAAK2gC,eAAkB3gC,KAAKsM,WAAoB,kBAAP,SACpC,CACL,IAAMs0B,EAAO,uBAAuBC,KAAK9kB,UAAUC,WACnDhc,KAAKugC,eAAiBK,EAAO,KAAO,eAAe5gC,KAAKwgC,MAAK,MAAMxgC,KAAKygC,MAAK,SAC7EzgC,KAAK0gC,cAAiBE,EAAc,aAAa5gC,KAAKwgC,MAAK,IAAIxgC,KAAKygC,MAAK,IAA5C,KAC7BzgC,KAAK2gC,eAAiBC,IAAS5gC,KAAKsM,WAAa,KAAO,oBAI5D+zB,EAAA1gC,UAAAkN,OAAA,WACE,IAAIi0B,EAAc9gC,KAAKuf,OACnBvf,KAAK+gC,gBACPD,EAAe9gC,KAAKuf,OAASvf,KAAKY,MAASZ,KAAK2S,KAGlD,IAGMquB,EAHWC,EAAAA,MAAM3B,YAAYwB,GAAarC,YAAYqC,GAGlCI,SAASlhC,KAAKkR,MAEpCoD,EAAQtU,KAAKkR,KAAKsuB,IAAI,GAAKwB,EAAS,GACf,IAArBhhC,KAAKkR,KAAKsuB,IAAI,IAA4B,IAAhBwB,EAAS,KACrC1sB,EAAQ,GAEV,IAAM6sB,EAAW,CAAC7sB,EAAQ0sB,EAAS,GAAI1sB,EAAQ0sB,EAAS,IAExDhhC,KAAK29B,KAAO,IAAIqD,EAAQ,IAAIG,EAAQ,IAAInhC,KAAKkR,KAAKsuB,KAGpDlgC,OAAA0G,eAAIq6B,EAAA1gC,UAAA,QAAK,KAAT,WACE,OAAOK,KAAKkR,KAAKsuB,IAAI,oCAGvBlgC,OAAA0G,eAAIq6B,EAAA1gC,UAAA,QAAK,KAAT,WACE,OAAOK,KAAKkR,KAAKsuB,IAAI,oCAGvBa,EAAA1gC,UAAAyS,WAAA,WACE,OAAOpS,KAAKohC,SAASphC,KAAKkR,MAAQ9D,KAAKqI,GAAK,QAAU,OAGxD4qB,EAAA1gC,UAAAyhC,SAAA,SAAShiC,GACP,OAAOA,EAAE+/B,YAAc//B,EAAEmgC,SAAWngC,EAAE+/B,YAAc,6BAlGvD31B,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,0BACVC,SAAU,8nBAqBVgE,gBAAiBC,EAAAA,wBAAwBC,8EAoB5B5D,EAAAA,OAAMrF,KAAA,CAACsF,EAAAA,iDAjBnBC,EAAAA,sBACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,mBACAA,EAAAA,qBACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,yBACAA,EAAAA,6BACAA,EAAAA,2BC2BD,SAAAm3B,EAAY7+B,GA5BHxC,KAAAm/B,WAAqB,EACrBn/B,KAAAu/B,SAA6B,EAAVnyB,KAAKqI,GAGxBzV,KAAAshC,aAAuB,EAIvBthC,KAAA+gC,eAAyB,EACzB/gC,KAAAqhB,UAAoB,EACpBrhB,KAAAiO,SAAmB,EACnBjO,KAAAuhC,eAAyB,EACzBvhC,KAAA6f,UAAoB,EAEnB7f,KAAAsP,OAAS,IAAI9C,EAAAA,aACbxM,KAAA+d,SAAW,IAAIvR,EAAAA,aACfxM,KAAAge,WAAa,IAAIxR,EAAAA,aACjBxM,KAAAwhC,SAAW,IAAIh1B,EAAAA,aAQzBxM,KAAAshB,aAAuB,EAIrBthB,KAAKwC,QAAUA,EAAQC,qBAGzB4+B,EAAA1hC,UAAAgN,YAAA,SAAYC,GACV5M,KAAK6M,UAGPw0B,EAAA1hC,UAAA+hB,YAAA,WACE,OAAO1hB,KAAKqhB,SAAWrhB,KAAKme,aAAene,KAAKwW,MAGlD6qB,EAAA1hC,UAAA8hC,iBAAA,WACE,OAAOzhC,KAAKuhC,cAAgB,OAAS,QAGvCF,EAAA1hC,UAAAkN,OAAA,WACE,IAAM60B,EAAO1hC,KAAK2hC,eAClB3hC,KAAKmhB,aAAe,GACpBnhB,KAAK4hC,iBAAmB,aAAelkB,IAAKzI,WAC5CjV,KAAKme,aAAe,QAAQne,KAAK4hC,iBAAgB,IAE7C5hC,KAAKiO,QACHjO,KAAKshB,YACPthB,KAAK6hC,mBAEL7hC,KAAKwhB,gBACLxhB,KAAKshB,aAAc,GAGrBthB,KAAKgiB,KAAO0f,EAAKvC,WAAWn/B,KAAKm/B,YAAYI,SAASv/B,KAAKu/B,SAA/CmC,IAIhBL,EAAA1hC,UAAAgiC,aAAA,WACE,IAAIlD,EAAcz+B,KAAKy+B,YAKvB,OAJIz+B,KAAK+gC,eAAsC,IAArB/gC,KAAKs/B,cAC7Bb,EAAez+B,KAAKy+B,YAAcz+B,KAAKY,MAASZ,KAAK2S,KAGhDsuB,EAAAA,MAAM3B,YAAYt/B,KAAKs/B,aAAab,YAAYA,GAAa6C,aAAathC,KAAKshC,eAGxFD,EAAA1hC,UAAA6hB,cAAA,WACE,IAAMM,EAAOxS,EAAAA,OAAOtP,KAAKwC,SACtBs/B,UAAU,QACV5wB,KAAK,CAAC,CAAEiuB,WAAYn/B,KAAKm/B,WAAYI,SAAUv/B,KAAKu/B,YAEjDmC,EAAO1hC,KAAK2hC,eAElB7f,EACGhU,aACAi0B,UAAU,KAAK,SAAU3iC,GAClBY,KAAMgiC,SAAiBhiC,KAAMgiC,UAAY5iC,EAC/C,IAAM6iC,EAAU3iC,OAAOyM,OAAO,GAAI3M,GAClC6iC,EAAQ1C,SAAW0C,EAAQ9C,WAC3B,IAAM+C,EAAeC,EAAAA,YAAYF,EAASA,GAE1C,OADMjiC,KAAMgiC,SAAWE,EAAa,GAC7B,SAAUvpB,GACf,OAAO+oB,EAAKQ,EAAavpB,QAG5B7K,aACArI,SAAS,KACTs8B,UAAU,KAAK,SAAU3iC,GAClBY,KAAMgiC,SAAiBhiC,KAAMgiC,UAAY5iC,EAC/C,IAAM8iC,EAAeC,EAAAA,YAAkBniC,KAAMgiC,SAAU5iC,GAEvD,OADMY,KAAMgiC,SAAWE,EAAa,GAC7B,SAAUvpB,GACf,OAAO+oB,EAAKQ,EAAavpB,SAKjC0oB,EAAA1hC,UAAAkiC,gBAAA,WACE,IAAM/f,EAAOxS,EAAAA,OAAOtP,KAAKwC,SACtBs/B,UAAU,QACV5wB,KAAK,CAAC,CAAEiuB,WAAYn/B,KAAKm/B,WAAYI,SAAUv/B,KAAKu/B,YAEjDmC,EAAO1hC,KAAK2hC,eAElB7f,EACGhU,aACArI,SAAS,KACTs8B,UAAU,KAAK,SAAU3iC,GAClBY,KAAMgiC,SAAiBhiC,KAAMgiC,UAAY5iC,EAC/C,IAAM8iC,EAAeC,EAAAA,YAAkBniC,KAAMgiC,SAAU5iC,GAEvD,OADMY,KAAMgiC,SAAWE,EAAa,GAC7B,SAAUvpB,GACf,OAAO+oB,EAAKQ,EAAavpB,SAKjC0oB,EAAA1hC,UAAAigB,QAAA,WAAA,IAAAhX,EAAA5I,KACEqF,aAAarF,KAAKoiC,UAClBpiC,KAAKoiC,SAAW78B,YAAW,WAAM,OAAAqD,EAAK0G,OAAOZ,KAAK9F,EAAKsI,QAAO,MAGhEmwB,EAAA1hC,UAAA0iC,WAAA,SAAW5lB,GACTA,EAAM6lB,iBACN7lB,EAAM8lB,kBACNl9B,aAAarF,KAAKoiC,UAElBpiC,KAAKwhC,SAAS9yB,KAAK,CACjBwC,KAAMlR,KAAKkR,KACXsxB,YAAa/lB,+BApKlBjT,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,wBACVC,SAAU,gqBAwBVgE,gBAAiBC,EAAAA,wBAAwBC,qDAvCzC9D,EAAAA,6CA0CCI,EAAAA,0BACAA,EAAAA,wBACAA,EAAAA,2BACAA,EAAAA,2BACAA,EAAAA,4BACAA,EAAAA,qBACAA,EAAAA,mBACAA,EAAAA,oBACAA,EAAAA,6BACAA,EAAAA,wBACAA,EAAAA,uBACAA,EAAAA,6BACAA,EAAAA,wBACAA,EAAAA,sBAEAgE,EAAAA,yBACAA,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,6BClDH,SAAAu0B,IAAA,IAAA75B,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YA4CW4I,EAAA85B,QAAS,EACT95B,EAAA4mB,QAAS,EACT5mB,EAAA4lB,YAAsB,SACtB5lB,EAAAijB,eAAyB,QACzBjjB,EAAAm4B,eAAgB,EAChBn4B,EAAA+5B,UAAW,EACX/5B,EAAAg6B,SAAW,IAEXh6B,EAAAmX,cAAuB,GACvBnX,EAAAqR,iBAA2B,EAE3BrR,EAAAi6B,YAAsB,EACtBj6B,EAAAk6B,eAAyB,GAExBl6B,EAAA44B,SAAW,IAAIh1B,EAAAA,aAGf5D,EAAA0G,OAAS,IAAI9C,EAAAA,aACb5D,EAAAmV,SAA8B,IAAIvR,EAAAA,aAClC5D,EAAAoV,WAAgC,IAAIxR,EAAAA,sBApBT1M,EAAA2iC,EAAAt2B,GAiCrCs2B,EAAA9iC,UAAAkN,OAAA,WAAA,IAAAjE,EAAA5I,KACEmM,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAERA,KAAK0iC,QAAU1iC,KAAK+iC,0BACtB/iC,KAAKkrB,QAAU,CAAC,GAAI,GAAI,GAAI,KAClBlrB,KAAK0iC,QAAU1iC,KAAK+iC,4BAE9B/iC,KAAKkrB,QAAU,CAAC,GAAI,GAAI,GAAI,KAG9BlrB,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkrB,QACd7e,WAAYrM,KAAKwvB,OACjB3D,eAAgB7rB,KAAK6rB,iBAGvB7rB,KAAKsQ,cAEL,IAAM0b,EAAUhsB,KAAKkrB,QAAQ,GAAKlrB,KAAKiQ,KAAKpJ,MAAQ,EAC9C63B,EAAU1+B,KAAKkrB,QAAQ,GAAKlrB,KAAKiQ,KAAKvJ,OAAS,EACrD1G,KAAKgjC,YAAc,aAAahX,EAAO,KAAK0S,EAAO,IACnD1+B,KAAKy+B,YAAcrxB,KAAKiI,IAAIrV,KAAKiQ,KAAKpJ,MAAO7G,KAAKiQ,KAAKvJ,QACnD1G,KAAK0iC,OAEP1iC,KAAKy+B,aAAe,EAEpBz+B,KAAKy+B,aAAe,EAEtBz+B,KAAKs/B,YAAc,EACft/B,KAAK2iC,WACP3iC,KAAKs/B,YAAct/B,KAAKy+B,aAAe,EAAIz+B,KAAK4iC,WAGlD5iC,KAAK+V,OAAS/V,KAAKw5B,YAGnBx5B,KAAKkR,KAAOlR,KAAK+P,QAAQ6gB,MAAK,SAACC,EAAGxxB,GAChC,OAAOuJ,EAAKmN,OAAOrK,QAAQmlB,EAAEpgB,MAAQ7H,EAAKmN,OAAOrK,QAAQrM,EAAEoR,SAG7DzQ,KAAKiwB,YACLjwB,KAAKiN,cAAgBjN,KAAKkwB,oBAG5BuS,EAAA9iC,UAAA65B,UAAA,WACE,OAAOx5B,KAAK+P,QAAQuI,KAAI,SAAAlZ,GAAK,OAAAA,EAAEoR,UAGjCiyB,EAAA9iC,UAAAigB,QAAA,SAAQ1O,GACNlR,KAAKsP,OAAOZ,KAAKwC,IAGnBuxB,EAAA9iC,UAAAswB,UAAA,WACEjwB,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQ,UAAWpP,KAAK+V,OAAQ/V,KAAKusB,eAG1EkW,EAAA9iC,UAAAuwB,iBAAA,WACE,MAAO,CACL1iB,UAAW,UACXuI,OAAQ/V,KAAK+V,OACbqJ,OAAQpf,KAAKof,OACbzC,MAAO3c,KAAKwuB,YACZ9lB,SAAU1I,KAAK6rB,iBAInB4W,EAAA9iC,UAAAuyB,WAAA,SAAW7gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACf9jB,EAAOrR,KAAK+P,QAAQiQ,MAAK,SAAA5gB,GACvB,OAAI+1B,EACK/1B,EAAEoR,QAAUa,EAAKZ,KAEjBrR,EAAEqR,OAASY,EAAKZ,QAIfzQ,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,OAASxB,EAAEuR,SAAWU,EAAKV,WAElE,IAIX3Q,KAAK+f,cAAaze,EAAA,CAAI+P,GAASrR,KAAK+f,eACpC/f,KAAK+d,SAASrP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,kBAGlD0iB,EAAA9iC,UAAAyyB,aAAA,SAAa/gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACjB9jB,EAAOrR,KAAK+P,QAAQiQ,MAAK,SAAA5gB,GACvB,OAAI+1B,EACK/1B,EAAEoR,QAAUa,EAAKZ,KAEjBrR,EAAEqR,OAASY,EAAKZ,QAI3B,IAAMhF,EAAMzL,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,OAASxB,EAAEuR,SAAWU,EAAKV,UAG7E3Q,KAAK+f,cAAcpU,OAAOF,EAAK,GAC/BzL,KAAK+f,cAAaze,EAAOtB,KAAK+f,eAE9B/f,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,iBAG5C0iB,EAAA9iC,UAAAojC,wBAAA,WACN,OAAQ/iC,KAAKkrB,SAAWlrB,KAAKkrB,QAAQxqB,QAAU,MA7IZuO,YCxDvBg0B,GAAShzB,EAAMizB,EAAKC,GAClC,IAAIC,EAAO,EACPC,EAAOH,EACLr8B,EAAQoJ,EAAKpJ,MAEnB,GAAIA,EAAQs8B,EACV,KAAOt8B,EAAQw8B,EAAOF,GACpBC,GAAQ,EACRC,EAAOj2B,KAAKk2B,KAAKJ,EAAME,GAI3B,MAAO,CAACC,EAAMD,YAGAG,GAAWtzB,EAAMiB,EAAMiyB,EAAUK,GAU/C,IATA,IAAM3kB,EAAcyO,EAAAA,YACdrO,EAAcqO,EAAAA,YACdzmB,EAAQoJ,EAAKpJ,MACbH,EAASuJ,EAAKvJ,OAEd0C,EAAArI,EAAkBkiC,GAAShzB,EAAMiB,EAAKxQ,OAAQyiC,GAAS,GAAtDpX,EAAO3iB,EAAA,GAAEg6B,EAAIh6B,EAAA,GAEdge,EAAU,GACVuI,EAAU,GACPlvB,EAAI,EAAGA,EAAI2iC,EAAM3iC,IACxBkvB,EAAQvuB,KAAKX,GAEf,IAASA,EAAI,EAAGA,EAAIsrB,EAAStrB,IAC3B2mB,EAAQhmB,KAAKX,GAEfoe,EAAO9I,OAAOqR,GACdnI,EAAOlJ,OAAO4Z,GAEd9Q,EAAOmW,WAAW,CAAC,EAAGnuB,GAAQ,IAC9BoY,EAAO+V,WAAW,CAAC,EAAGtuB,GAAS,IAE/B,IAAM+8B,EAAM,GACNhZ,EAAQ+Y,GAA6CtyB,EAwB5CoH,KAAI,SAAAlZ,GAAK,OAACA,EAAIA,EAAEwB,MAAQ,KAAI2pB,QAAO,SAACC,EAAKnH,GAAQ,OAAAmH,EAAMnH,IAAK,GAvBrEqgB,EAAY7kB,EAAO/J,YACnB6uB,EAAa1kB,EAAOnK,YAE1B,IAASrU,EAAI,EAAGA,EAAIyQ,EAAKxQ,OAAQD,IAC/BgjC,EAAIhjC,GAAK,GACTgjC,EAAIhjC,GAAGyQ,KAAO,CACZT,KAAMS,EAAKzQ,GAAKyQ,EAAKzQ,GAAGgQ,KAAO,GAC/B7P,MAAOsQ,EAAKzQ,GAAKyQ,EAAKzQ,GAAGG,WAAQoC,EACjC4gC,MAAO1yB,EAAKzQ,GAAKyQ,EAAKzQ,GAAGmjC,WAAQ5gC,EACjCwN,MAAOU,EAAKzQ,GAAKyQ,EAAKzQ,GAAG+P,MAAQ,IAEnCizB,EAAIhjC,GAAGgS,EAAIoM,EAAOpe,EAAIsrB,GACtB0X,EAAIhjC,GAAG8R,EAAI0M,EAAO7R,KAAKC,MAAM5M,EAAIsrB,IACjC0X,EAAIhjC,GAAGoG,MAAQ68B,EACfD,EAAIhjC,GAAGiG,OAASi9B,EAChBF,EAAIhjC,GAAGyQ,KAAK2yB,QAAUpZ,EAAQ,EAAIgZ,EAAIhjC,GAAGyQ,KAAKtQ,MAAQ6pB,EAAQ,EAC9DgZ,EAAIhjC,GAAGyQ,KAAKuZ,MAAQA,EAGtB,OAAOgZ,uBD7CRj6B,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,uBACVC,SAAU,oxCAsCVC,cAAeC,EAAAA,kBAAkBC,KACjC6D,gBAAiBC,EAAAA,wBAAwBC,yjEAGxC1D,EAAAA,sBACAA,EAAAA,2BACAA,EAAAA,8BACAA,EAAAA,6BACAA,EAAAA,wBACAA,EAAAA,wBACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,0BACAA,EAAAA,8BACAA,EAAAA,2BACAA,EAAAA,wBACAgE,EAAAA,wBAEAhE,EAAAA,sBACAgE,EAAAA,yBACAA,EAAAA,2BACAA,EAAAA,gCAEAmkB,EAAAA,aAAY1tB,KAAA,CAAC,yCE3DhB,SAAAm/B,IAAA,IAAAl7B,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YAwEW4I,EAAAqR,iBAA2B,EAE3BrR,EAAA4H,MAAgB,QAChB5H,EAAAu6B,SAAmB,IACnBv6B,EAAAmX,cAAuB,GAEtBnX,EAAAmV,SAA8B,IAAIvR,EAAAA,aAClC5D,EAAAoV,WAAgC,IAAIxR,EAAAA,aAQ9C5D,EAAAsJ,OAAS,CAAC,GAAI,GAAI,GAAI,aAjBcpS,EAAAgkC,EAAA33B,GAqBpC23B,EAAAnkC,UAAAkN,OAAA,WACEV,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEZA,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,SAGhBlS,KAAKsQ,cAELtQ,KAAK+V,OAAS/V,KAAKw5B,YAEnBx5B,KAAKkR,KAAOqyB,GAAWvjC,KAAKiQ,KAAMjQ,KAAK+P,QAAS/P,KAAKmjC,SAAUnjC,KAAKwjC,iBACpExjC,KAAKqS,UAAY,aAAarS,KAAKkS,OAAO,GAAE,MAAMlS,KAAKkS,OAAO,GAAE,IAEhElS,KAAK2Q,OAAS3Q,KAAK+jC,YACnB/jC,KAAKiwB,YAELjwB,KAAKm4B,YAAcn4B,KAAKm4B,aAAen4B,KAAKkgC,oBAG9C4D,EAAAnkC,UAAAugC,mBAAA,SAAmB92B,OAAE8H,EAAI9H,EAAA8H,KAGvB,MAAO,uCAFOwB,EAAUqK,EAAY7L,EAAKT,OAGJ,4CAFzBS,EAAKtQ,MAAM8T,iBAGU,iBAInCovB,EAAAnkC,UAAA65B,UAAA,WACE,OAAOx5B,KAAK+P,QAAQuI,KAAI,SAAAlZ,GAAK,OAAAA,EAAEoR,UAGjCszB,EAAAnkC,UAAAokC,UAAA,WAAA,IAAAn7B,EAAA5I,KACQyqB,EAAQzqB,KAAKwjC,gBAAkBxjC,KAAKwjC,gBAAkBxjC,KAAKsqB,WAEjE,OAAOtqB,KAAKkR,KAAKoH,KAAI,SAAAlZ,GACnB,IAEMqR,EAAOrR,EAAE8R,KAAKT,KACdD,EAAQuM,EAAYtM,GACpB7P,EAAQxB,EAAE8R,KAAKtQ,MACf2e,EAASlK,EAAAA,IAAI,CAACjW,EAAEyH,MAJN,GAIuBzH,EAAEsH,OALb,KAK8C,EAAI,EACxE44B,EAAuB,GAAT/f,EAEhB2C,EAAQ,EAaZ,MAAO,CACL7P,UAAW,cAJAjT,EAAEqT,GAAKrT,EAAEyH,MAjBN,IAiByB,GAIX,MAHjBzH,EAAEmT,GAAKnT,EAAEsH,OAnBM,IAmB0B,GAGf,IACrC0Y,OAda,WAEb,OAAc,KADd8C,GAAS,GAEA,wBAEAtZ,EAAK+jB,WAAWtN,SAAS7O,IAUlC8uB,YAAWA,EACXb,YAAalf,EACb9O,KAAIA,EACJD,MAAOkC,EAAUlC,GACjBia,MAAO7pB,EACPA,MAAKA,EACLijC,QAASG,EAAAA,OAAO,MAAPA,CAAc5kC,EAAE8R,KAAK2yB,SAC9B3yB,KAAM,CACJ9R,EACA,CACE8R,KAAM,CACJ+yB,OAAO,EACPrjC,MAAO6pB,EAAQ7pB,EACf6P,KAAMrR,EAAE8R,KAAKT,aAQzBqzB,EAAAnkC,UAAA2qB,SAAA,WACE,OAAOtqB,KAAK+P,QAAQuI,KAAI,SAAAlZ,GAAK,OAAAA,EAAEwB,SAAO2pB,QAAO,SAACC,EAAKprB,GAAM,OAAAorB,EAAMprB,IAAG,IAGpE0kC,EAAAnkC,UAAAigB,QAAA,SAAQ1O,GACNlR,KAAKsP,OAAOZ,KAAKwC,IAGnB4yB,EAAAnkC,UAAAswB,UAAA,WACEjwB,KAAK2sB,WAAa,IAAIL,GAAYtsB,KAAKoP,OAAQ,UAAWpP,KAAK+V,OAAQ/V,KAAKusB,eAG9EuX,EAAAnkC,UAAAuyB,WAAA,SAAW7gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACf9jB,EAAOrR,KAAK+P,QAAQiQ,MAAK,SAAA5gB,GACvB,OAAI+1B,EACK/1B,EAAEoR,QAAUa,EAAKZ,KAEjBrR,EAAEqR,OAASY,EAAKZ,QAIfzQ,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,OAASxB,EAAEuR,SAAWU,EAAKV,WAElE,IAIX3Q,KAAK+f,cAAaze,EAAA,CAAI+P,GAASrR,KAAK+f,eACpC/f,KAAK+d,SAASrP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,kBAGlD+jB,EAAAnkC,UAAAyyB,aAAA,SAAa/gB,EAAM8jB,QAAA,IAAAA,IAAAA,GAAA,GACjB9jB,EAAOrR,KAAK+P,QAAQiQ,MAAK,SAAA5gB,GACvB,OAAI+1B,EACK/1B,EAAEoR,QAAUa,EAAKZ,KAEjBrR,EAAEqR,OAASY,EAAKZ,QAI3B,IAAMhF,EAAMzL,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,OAASxB,EAAEuR,SAAWU,EAAKV,UAG7E3Q,KAAK+f,cAAcpU,OAAOF,EAAK,GAC/BzL,KAAK+f,cAAaze,EAAOtB,KAAK+f,eAE9B/f,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,oBAzJhB9Q,wBAtErCzF,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,sBACVC,SAAU,80EAiEVC,cAAeC,EAAAA,kBAAkBC,KACjC6D,gBAAiBC,EAAAA,wBAAwBC,4pDAGxC1D,EAAAA,+BACAA,EAAAA,2BACAA,EAAAA,qBACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,wBAEAgE,EAAAA,2BACAA,EAAAA,gCAUAmkB,EAAAA,aAAY1tB,KAAA,CAAC,wCCzDd,SAAAu/B,EAAY1hC,GAZHxC,KAAAs/B,YAAc,GACdt/B,KAAAy+B,YAAc,GACdz+B,KAAAsM,YAAsB,EAErBtM,KAAAsP,OAAS,IAAI9C,EAAAA,aACbxM,KAAA+d,SAAW,IAAIvR,EAAAA,aACfxM,KAAAge,WAAa,IAAIxR,EAAAA,aAOzBxM,KAAKwC,QAAUA,EAAQC,qBAGzByhC,EAAAvkC,UAAAgN,YAAA,SAAYC,GACV5M,KAAK6M,UAGPq3B,EAAAvkC,UAAAkN,OAAA,WACE7M,KAAKmkC,OAASC,EAAAA,MACXxjC,OAAM,SAAAxB,GAAK,OAAAA,EAAE8R,KAAKtQ,SAClBgwB,KAAK,MAER5wB,KAAKqkC,KAAOrkC,KAAKskC,WAGnBJ,EAAAvkC,UAAA2kC,QAAA,WAAA,IAAA17B,EAAA5I,KACE,OAAOA,KAAKmkC,OAAOnkC,KAAKkR,MAAMoH,KAAI,SAAC2oB,EAAK9X,GACtC,IAAM3Y,EAAQywB,EAAI/vB,KAAKA,KAAKT,KACtBwzB,EAAQhD,EAAI/vB,KAAKA,KAAK+yB,MAEd,IAAV9a,IACF8X,EAAI9B,WAAa,GAGnB,IAAMpgB,EAAQnW,EAAKwW,OAAO5O,GAC1B,MAAO,CACLU,KAAM+vB,EAAI/vB,KAAKA,KACf0P,MAAO,UAAiBuI,EACxB3S,KAAMuI,EACNogB,WAAY8E,EAAQ,EAAIhD,EAAI9B,WAC5BI,SAAU0B,EAAI1B,SACdtxB,QAASrF,EAAK0D,aAAe23B,EAC7B1C,eAAgB0C,OAKtBC,EAAAvkC,UAAAigB,QAAA,SAAQ1O,GACNlR,KAAKsP,OAAOZ,KAAK1O,KAAKkR,KAAK,GAAGA,OAGhCgzB,EAAAvkC,UAAAupB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKH,KAAKT,MAGnByzB,EAAAvkC,UAAA6Q,MAAA,SAAMywB,GACJ,OAAOA,EAAI/vB,KAAKT,MAGlByzB,EAAAvkC,UAAAof,MAAA,SAAMkiB,GACJ,OAAOjhC,KAAKof,OAAOpf,KAAKwQ,MAAMywB,+BA5FjCz3B,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,gCACVC,SAAU,iqBAsBVgE,gBAAiBC,EAAAA,wBAAwBC,qDA/BzC9D,EAAAA,+CAkCCI,EAAAA,oBACAA,EAAAA,2BACAA,EAAAA,2BACAA,EAAAA,0BACAA,EAAAA,sBAEAgE,EAAAA,yBACAA,EAAAA,2BACAA,EAAAA,4BChCH,SAAAq2B,IAkDWvkC,KAAA2Q,OAAc,GAEd3Q,KAAAs/B,YAAc,GACdt/B,KAAAy+B,YAAc,GAMdz+B,KAAA6iC,YAAsB,EACtB7iC,KAAA8iC,eAAyB,GAEzB9iC,KAAAia,iBAA2B,EAE3Bja,KAAAsM,YAAsB,EAErBtM,KAAAsP,OAAS,IAAI9C,EAAAA,aACbxM,KAAA+d,SAAW,IAAIvR,EAAAA,aACfxM,KAAAge,WAAa,IAAIxR,EAAAA,aACjBxM,KAAAwhC,SAAW,IAAIh1B,EAAAA,oBAKzB+3B,EAAA5kC,UAAAgN,YAAA,SAAYC,GACV5M,KAAK6M,UAGP03B,EAAA5kC,UAAAkN,OAAA,WACE,IAIM23B,EAJeJ,EAAAA,MAClBxjC,OAAM,SAAAxB,GAAK,OAAAA,EAAEwB,SACbgwB,KAAK,KAEQ6T,CAAazkC,KAAK2Q,QAElC3Q,KAAK2S,IAAMA,EAAAA,IAAI6xB,GAAS,SAAAplC,GACtB,OAAOA,EAAEwB,SAGXZ,KAAKkR,KAAOlR,KAAK0kC,wBAAwBF,GACzCxkC,KAAKm4B,YAAcn4B,KAAKm4B,aAAen4B,KAAKkgC,oBAG9CqE,EAAA5kC,UAAAyhC,SAAA,SAAShiC,GACP,OAAOA,EAAE+/B,YAAc//B,EAAEmgC,SAAWngC,EAAE+/B,YAAc,GAGtDoF,EAAA5kC,UAAAglC,SAAA,WAGE,OAAO1D,EAAAA,MACJ3B,YAHY,IAGAt/B,KAAKy+B,aACjBA,YAJY,IAIAz+B,KAAKy+B,cAGtB8F,EAAA5kC,UAAA+kC,wBAAA,SAAwBE,GAAxB,IAAAh8B,EAAA5I,KAGQ6kC,EAAiBD,EAEvBC,EAAe/a,SAAQ,SAAA1qB,GACrBA,EAAEogC,IAAM52B,EAAK+7B,WAAWzD,SAAS9hC,GACjCA,EAAEogC,IAAI,GANO,IAMO52B,EAAK61B,aAAe71B,EAAKw4B,SAAShiC,GAAKgO,KAAKqI,GAAK,GAAK,MAG5E,IAAK,IAAIhV,EAAI,EAAGA,EAAIokC,EAAenkC,OAAS,EAAGD,IAAK,CAClD,IAAMowB,EAAIgU,EAAepkC,GACzB,GAAKT,KAAK8kC,aAAajU,GAIvB,IAAK,IAAIjgB,EAAInQ,EAAI,EAAGmQ,EAAIi0B,EAAenkC,OAAQkQ,IAAK,CAClD,IAAMvR,EAAIwlC,EAAej0B,GACzB,GAAK5Q,KAAK8kC,aAAazlC,IAInBA,EAAEmgC,IAAI,GAAK3O,EAAE2O,IAAI,GAAK,EAAG,CAE3B,IAAMp/B,EAtBQ,GAsBUgN,KAAKsI,IAAIrW,EAAEmgC,IAAI,GAAK3O,EAAE2O,IAAI,IAC9Cp/B,EAAI,IAENf,EAAEmgC,IAAI,IAAMpyB,KAAKwK,KAAKvY,EAAEmgC,IAAI,IAAMp/B,KAM1C,OAAOykC,GAGTN,EAAA5kC,UAAAmlC,aAAA,SAAaC,GACX,OAAO/kC,KAAKglC,YAAcD,EAAMxF,SAAWwF,EAAM5F,WAAa/xB,KAAKqI,GAAK,IAG1E8uB,EAAA5kC,UAAAslC,gBAAA,SAAgBpU,GACd,OAAO7wB,KAAK4c,qBAAkB5Z,EAAYhD,KAAKm4B,YAAYtH,IAG7D0T,EAAA5kC,UAAAulC,UAAA,SAAUH,GACR,OAAI/kC,KAAKkqB,gBACAlqB,KAAKkqB,gBAAgB6a,EAAM7zB,KAAKT,MAElCzQ,KAAKwQ,MAAMu0B,IAGpBR,EAAA5kC,UAAA6Q,MAAA,SAAMu0B,GACJ,OAAOhoB,EAAYgoB,EAAM7zB,KAAKT,OAGhC8zB,EAAA5kC,UAAAugC,mBAAA,SAAmB6E,GACjB,IAAMv0B,EAAQxQ,KAAKwQ,MAAMu0B,GACnB1hB,EAAMtG,EAAYgoB,EAAM7zB,KAAKtQ,OAEnC,MAAO,uCACyBoc,EAAYxM,GAAM,4CACpB6S,EAAG,iBAInCkhB,EAAA5kC,UAAAof,MAAA,SAAMgmB,GACJ,OAAO/kC,KAAKof,OAAOC,SAASrf,KAAKwQ,MAAMu0B,KAGzCR,EAAA5kC,UAAAupB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKH,KAAKT,MAGnB8zB,EAAA5kC,UAAAigB,QAAA,SAAQ1O,GACNlR,KAAKsP,OAAOZ,KAAKwC,IAGnBqzB,EAAA5kC,UAAAkgB,SAAA,SAASC,GACP,QAAK9f,KAAK+f,oBAIM/c,IAHHhD,KAAK+f,cAAcC,MAAK,SAAA5gB,GACnC,OAAO0gB,EAAMrP,OAASrR,EAAEqR,MAAQqP,EAAMnP,SAAWvR,EAAEuR,qCAzLxDnH,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,2BACVC,SAAU,s3CA4CVgE,gBAAiBC,EAAAA,wBAAwBC,4CAGxC1D,EAAAA,sBACAA,EAAAA,oBACAA,EAAAA,2BACAA,EAAAA,2BACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,wBACAA,EAAAA,6BACAA,EAAAA,+BACAA,EAAAA,0BACAA,EAAAA,8BACAA,EAAAA,2BACAA,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,0BACAA,EAAAA,sBAEAgE,EAAAA,yBACAA,EAAAA,2BACAA,EAAAA,yBACAA,EAAAA,iBCrDH,kCArBCmL,EAAAA,SAAQ1U,KAAA,CAAC,CACR2U,QAAS,CAACya,IACVva,aAAc,CACZ4mB,GACAC,GACAgB,GACAoB,GACAqB,GACAI,GACAK,IAEF9qB,QAAS,CACP2mB,GACAC,GACAgB,GACAoB,GACAqB,GACAI,GACAK,eChBJ,sBCZgBY,GAAmBC,EAAmBC,EAAcC,GAClE,YADkE,IAAAA,IAAAA,EAAA,GAC3DD,EAAK7I,MAAM,IAAIjS,QAAO,SAACgb,EAAKC,GAEjC,OAAOD,GADOH,EAAcI,IAASF,KAEpC,wBDGJjsB,EAAAA,SAAQ1U,KAAA,CAAC,CACR2U,QAAS,CAACya,GAAmB0R,GAAgBC,IAC7ClsB,aAAc,CAACskB,GAAqB6B,IACpClmB,QAAS,CAACqkB,GAAqB6B,QEV1B,IAAMgG,GAA4B,CACvCC,EAAK,GACLC,EAAK,GACLC,EAAK,GACLC,EAAK,GACLC,EAAK,GACLC,EAAK,GACLC,EAAK,GACLC,EAAK,GACLC,EAAK,GACLC,EAAK,GACLC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,EACHC,EAAG,GACHC,EAAG,GACHC,EAAG,EACHC,EAAG,EACHC,EAAG,GACHzK,EAAG,EACH0K,EAAG,GACH3K,EAAG,GACH4K,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHhX,EAAG,GACHxxB,EAAG,GACHmL,EAAG,EACHpL,EAAG,GACH8B,EAAG,GACHu7B,EAAG,EACHlsB,EAAG,GACHyG,EAAG,GACHvW,EAAG,EACHmQ,EAAG,EACHk3B,EAAG,EACHC,EAAG,EACHvnC,EAAG,GACHQ,EAAG,GACHZ,EAAG,GACHV,EAAG,GACHsoC,EAAG,GACH/mC,EAAG,EACHZ,EAAG,EACHsY,EAAG,EACHsvB,EAAG,GACHxiB,EAAG,EACH1O,EAAG,GACHtE,EAAG,EACHF,EAAG,EACH21B,EAAG,EACHC,IAAK,EACLC,IAAK,GACLC,IAAK,GACLC,EAAG,GACHC,IAAK,GACLC,IAAK,GACLtrB,IAAK,GACLurB,IAAK,GACLC,IAAK,EACLC,IAAK,EACLC,EAAG,GACHC,IAAK,EACLC,IAAK,GACLC,IAAK,GACLC,IAAK,EACLC,IAAK,EACLC,IAAK,EACL/rB,IAAK,EACLgsB,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLhsB,IAAK,GACLC,IAAK,kBCwBL,SAAAgsB,EACE/mC,EACQ2M,EACAf,EACqB/F,GAFrBrI,KAAAmP,GAAAA,EACAnP,KAAAoO,KAAAA,EACqBpO,KAAAqI,WAAAA,EA7BtBrI,KAAAsM,YAAsB,EAErBtM,KAAAsP,OAAS,IAAI9C,EAAAA,aAKvBxM,KAAAY,MAAgB,GAMhBZ,KAAAwpC,aAAuB,GACvBxpC,KAAA+U,cAAwB,GACxB/U,KAAAshB,aAAuB,EAGvBthB,KAAAypC,WAAqB,GAErBzpC,KAAA0pC,YAAc,CAAC,GAAI,GAAI,EAAG,IAC1B1pC,KAAA2pC,cAAgB,GAUd3pC,KAAKwC,QAAUA,EAAQC,qBAGzB8mC,EAAA5pC,UAAAgN,YAAA,SAAYC,GACV5M,KAAK6M,UAGP08B,EAAA5pC,UAAA4P,SAAA,WACMC,EAAAA,iBAAiBxP,KAAKqI,aACxBrI,KAAK4pC,gBAITL,EAAA5pC,UAAAiQ,YAAA,WACM/G,EAAAA,kBAAkB7I,KAAKqI,aACzB6b,qBAAqBlkB,KAAKmkB,eAI9BolB,EAAA5pC,UAAAkN,OAAA,WAAA,IAAAjE,EAAA5I,KACEA,KAAKoO,KAAKK,KAAI,WACZ,IAAMo7B,EAAWjhC,EAAKsI,WAAmC,IAApBtI,EAAKsI,KAAKtQ,MACzCwjB,EAAkBxb,EAAKwb,iBAAe,SAAK0lB,GAAQ,OAAAA,EAAKlpC,MAAM8T,kBAC9DwV,EAAkBthB,EAAKshB,iBAAe,SAAK4f,GAAQ,OAAA9sB,EAAYtK,EAAUo3B,EAAKt5B,MAAO,MAE3F5H,EAAKyJ,UAAY,aAAazJ,EAAK6J,EAAC,MAAM7J,EAAK2J,EAAC,IAEhD3J,EAAKmhC,UAAY38B,KAAKuF,IAAI,EAAG/J,EAAK/B,OAAS+B,EAAK8gC,YAAY,GAAK9gC,EAAK8gC,YAAY,GAClF9gC,EAAK86B,UAAYt2B,KAAKuF,IAAI,EAAG/J,EAAK/B,OAClC+B,EAAK+6B,WAAav2B,KAAKuF,IAAI,EAAG/J,EAAKlC,QAEnCkC,EAAK4H,MAAQ5H,EAAK4H,MAAQ5H,EAAK4H,MAAQ5H,EAAKsI,KAAKT,KAEjD,IAAMu5B,EAAW,CACfx5B,MAAO5H,EAAK4H,MACZU,KAAMtI,EAAKsI,KACXtQ,MAAOgI,EAAKsI,KAAKtQ,OAGnBgI,EAAKogB,eAAiBkB,EAAgB8f,GACtCphC,EAAKqhC,cAAgB,kBAAiBrhC,EAAK+6B,WAAa/6B,EAAK6gC,YAAU,IAEvE,IAAM7oC,EAAQipC,EAAWzlB,EAAgB4lB,GAAY,GAErDphC,EAAKhI,MAAQgI,EAAKshC,YAAYtpC,GAC9BgI,EAAKuhC,aAELvhC,EAAKwhC,SAAWtzB,EAAY,EAAG,EAAGlO,EAAK86B,UAAW96B,EAAK6gC,WAAY,EAAG,EAAC,GAAO,GAAO,GAAM,IAE3FlkC,YAAW,WACLsD,EAAAA,kBAAkBD,EAAKP,aACzBO,EAAKyhC,YAEPzhC,EAAKhI,MAAQA,EACTipC,IAAajhC,EAAK0Y,aACpB/b,YAAW,WAAM,OAAAqD,EAAK0hC,eAAc,MAErC,OAIPf,EAAA5pC,UAAAuqC,YAAA,SAAYtpC,GAIV,OAHIZ,KAAKuqC,YAAcvqC,KAAKuqC,WAAa3pC,EAAMF,SAC7CE,GAAS,IAAS4pC,OAAOxqC,KAAKuqC,WAAa3pC,EAAMF,SAE5CE,GAGT2oC,EAAA5pC,UAAA2qC,WAAA,WAAA,IAAA1hC,EAAA5I,KACE,IAAKA,KAAKshB,aAAethB,KAAKsM,WAAY,CACxC4X,qBAAqBlkB,KAAKmkB,cAE1B,IAAMsmB,EAAMzqC,KAAKkR,KAAKtQ,MAChB8pC,EAAOpnB,GAAemnB,GACtBE,EAAkB3qC,KAAKokB,iBAAe,SAAK0lB,GAAQ,OAAAA,EAAKlpC,MAAM8T,kBAapE1U,KAAKmkB,aAAejC,GAAM,EAAGuoB,EAAKC,EAAM,GAXvB,SAACthC,OAAExI,EAAKwI,EAAAxI,MAAEuiB,EAAQ/Z,EAAA+Z,SACjCva,EAAKwF,KAAKK,KAAI,WACZ7N,EAAQuiB,EAAWsnB,EAAM7pC,EACzBgI,EAAKhI,MAAQ+pC,EAAgB,CAAEn6B,MAAO5H,EAAK4H,MAAOU,KAAMtI,EAAKsI,KAAMtQ,MAAKA,IACnEuiB,IACHva,EAAKhI,MAAQgI,EAAKshC,YAAYthC,EAAKhI,QAErCgI,EAAKuG,GAAGgB,qBAKZnQ,KAAKshB,aAAc,IAIvBioB,EAAA5pC,UAAA0qC,UAAA,WAAA,IAAAzhC,EAAA5I,KACEA,KAAKoO,KAAKK,KAAI,WACN,IAAArF,EAAoBR,EAAKgiC,OAAOnoC,cAAcuG,wBAA5CnC,EAAKuC,EAAAvC,MAAEH,EAAM0C,EAAA1C,OACrB,GAAc,IAAVG,GAA0B,IAAXH,EAAnB,CAIA,IAAMgjC,EAAe9gC,EAAK8gC,YAAY,GAAK9gC,EAAK8gC,YAAY,GAAK9gC,EAAK86B,UAAY,EAC5EmH,EAAiBjiC,EAAK86B,UAAY,EAAIgG,EACtCoB,EAAkBliC,EAAK+6B,WAAa,EAEpCoH,EAAc39B,KAAKiI,IAAIw1B,EAAiBhkC,EAAOikC,EAAkBpkC,GACvEkC,EAAK4gC,aAAep8B,KAAKC,MAAMzE,EAAK4gC,aAAeuB,GACnDniC,EAAK+gC,cAAgBv8B,KAAKiI,IAAIzM,EAAK4gC,aAAc,IAEjD5gC,EAAKuhC,aACLvhC,EAAKuG,GAAGgB,oBAIZo5B,EAAA5pC,UAAAiqC,aAAA,WACE,IAAM/iC,EAAQs+B,GAAmBQ,GAA2B3lC,KAAKY,MAAO,IAElE8oC,EAAe1pC,KAAK0pC,YAAY,GAAK1pC,KAAK0pC,YAAY,GAAK1pC,KAAK0jC,UAAY,EAC5EmH,EAAiB7qC,KAAK0jC,UAAY,EAAIgG,EACtCoB,EAAkB9qC,KAAK2jC,WAAa,EAEpCoH,EAAc39B,KAAKiI,IAAIw1B,EAAiBhkC,EAAOikC,EALtC,IAOf9qC,KAAKwpC,aAAep8B,KAAKC,MAAMrN,KAAKwpC,aAAeuB,GACnD/qC,KAAK2pC,cAAgBv8B,KAAKiI,IAAIrV,KAAKwpC,aAAc,IAEjDxpC,KAAKmqC,cAGPZ,EAAA5pC,UAAAwqC,WAAA,WACEnqC,KAAK0pC,YAAY,GAAK1pC,KAAK0pC,YAAY,GAAK1pC,KAAK0jC,UAAY,EAC7D,IAAMhtB,EAAU1W,KAAK2jC,WAAa,EAClC3jC,KAAK0pC,YAAY,GAAKhzB,EAAU1W,KAAKwpC,aAAexpC,KAAK2pC,cAAgB,EACzE3pC,KAAK0pC,YAAY,GAAKhzB,EAAU1W,KAAK2pC,eAGvCJ,EAAA5pC,UAAAigB,QAAA,WACE5f,KAAKsP,OAAOZ,KAAK1O,KAAKkR,qBCzOV85B,GAAYpqC,GAC1B,IAAMme,EAAQksB,EAAAA,IAAarqC,GACnBK,EAAqB8d,EAAK9d,EAAvBsP,EAAkBwO,EAAKxO,EAApBlR,EAAe0f,EAAK1f,EAClC,OAAgB,IADa0f,EAAK/Q,QAEzB+Q,EAAM9J,WAKRi2B,GAAcnsB,GAHJ,IAAJ9d,EAAc,IAAJsP,EAAc,IAAJlR,GAAW,KACvB,KAAO,GAAM,aAYpB6rC,GAAc9hC,EAAay6B,OAAX5iC,EAACmI,EAAAnI,EAAEsP,EAACnH,EAAAmH,EAAElR,EAAC+J,EAAA/J,EAC/BsZ,EAAIkrB,EAAU,EAAI,EAAI,IACtBnkC,EAAImkC,EAAU,GAAe,EAAXA,EAAeA,EAMvC,MAAO,QAJP5iC,EAAImM,KAAK8V,OAAOvK,EAAI1X,GAAKvB,GAAKuB,GAIf,MAHfsP,EAAInD,KAAK8V,OAAOvK,EAAIpI,GAAK7Q,GAAK6Q,GAGT,MAFrBlR,EAAI+N,KAAK8V,OAAOvK,EAAItZ,GAAKK,GAAKL,GAEH,yBDrB5BmK,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,qBACVC,SAAU,s0CA2CVgE,gBAAiBC,EAAAA,wBAAwBC,qDAhEzC9D,EAAAA,kBAKAiI,EAAAA,yBACA/C,EAAAA,uCAuGGhF,EAAAA,OAAMrF,KAAA,CAACsF,EAAAA,kDA1CTC,EAAAA,yBACAA,EAAAA,yBACAA,EAAAA,iBAEAA,EAAAA,iBACAA,EAAAA,qBACAA,EAAAA,sBACAA,EAAAA,qBACAA,EAAAA,oBACAA,EAAAA,0BACAA,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,0BACAA,EAAAA,sBAEAgE,EAAAA,uBAEA/D,EAAAA,UAASxF,KAAA,CAAC,SAAU,CAAEmiB,QAAQ,yBEnEjC,SAAAqkB,IAwCWnrC,KAAAk8B,aAAe,GAIfl8B,KAAAorC,WAAa,mBAIbprC,KAAAsM,YAAsB,EAErBtM,KAAAsP,OAAS,IAAI9C,EAAAA,oBAMvB2+B,EAAAxrC,UAAAgN,YAAA,SAAYC,GACV5M,KAAK6M,UAGPs+B,EAAAxrC,UAAAkN,OAAA,WACE,GAAI7M,KAAKkR,KAAKxQ,OAAS,EAAG,CACxB,IAAMiqC,EAAkB3qC,KAAKokB,iBAAe,SAAK0lB,GAAQ,OAAAA,EAAKlpC,MAAM8T,kBAE9D22B,EAAgBrrC,KAAKkR,KACxBoH,KAAI,SAAAlZ,GAEH,OADiBA,GAAKA,EAAE8R,WAAgC,IAAjB9R,EAAE8R,KAAKtQ,OAA0C,OAAjBxB,EAAE8R,KAAKtQ,MAE1E+pC,EAAgB,CACdz5B,KAAM9R,EAAE8R,KACRV,MAAOpR,EAAIA,EAAE8R,KAAKT,KAAO,GACzB7P,MAAOxB,GAAKA,EAAE8R,KAAO9R,EAAE8R,KAAKtQ,MAAQ,KACnCF,OACH,KAELkwB,MAAK,SAACC,EAAGxxB,GAAM,OAAAA,EAAIwxB,KAChBplB,EAAM2B,KAAKk2B,KAAKtjC,KAAKkR,KAAKxQ,OAAS,GACzCV,KAAKuqC,WAAac,EAAc5/B,GAGlC,IAAM6/B,EAAQtrC,KAAKurC,WACnBvrC,KAAKsrC,MAAQA,EAAM5jB,QAAO,SAAAtoB,GAAK,OAAiB,OAAjBA,EAAE8R,KAAKtQ,SACtCZ,KAAKwrC,WAAaF,EAAM5jB,QAAO,SAAAtoB,GAAK,OAAiB,OAAjBA,EAAE8R,KAAKtQ,UAG7CuqC,EAAAxrC,UAAA4rC,SAAA,WAAA,IAAA3iC,EAAA5I,KACQyrC,EACyB,iBAAtBzrC,KAAKk8B,aAA4Bl8B,KAAKk8B,aAAel8B,KAAKk8B,aAAa,GAAKl8B,KAAKk8B,aAAa,GACjGwP,EACyB,iBAAtB1rC,KAAKk8B,aAA4Bl8B,KAAKk8B,aAAel8B,KAAKk8B,aAAa,GAAKl8B,KAAKk8B,aAAa,GAEvG,OAAOl8B,KAAKkR,KAAKoH,KAAI,SAAClZ,EAAG+pB,GACvB,IAAI3Y,EAAQpR,EAAE8R,KAAKT,KAEjBD,EADEA,GAAoC,SAA3BA,EAAMvQ,YAAYwQ,KACrBD,EAAME,qBAENF,EAAQA,EAAMkE,iBAAmBlE,EAG3C,IAAM5P,EAAQxB,EAAE8R,KAAKtQ,MACf+qC,EAAan7B,EAAQ5H,EAAKwW,OAAOC,SAAS7O,GAAS5H,EAAKwiC,WACxDrsB,EAAQnW,EAAKgjC,WAAaD,GAAc,OAC9C,MAAO,CACLl5B,EAAGrT,EAAEqT,EACLF,EAAGnT,EAAEmT,EACL1L,MAAOzH,EAAEyH,MAAQ6kC,EACjBhlC,OAAQtH,EAAEsH,OAAS+kC,EACnB1sB,MAAKA,EACL8sB,UAAWjjC,EAAKijC,WAAaF,EAC7BG,UAAWljC,EAAKkjC,WAAad,GAAYjsB,GACzCvO,MAAKA,EACLU,KAAM9R,EAAE8R,KACRinB,YAAgB3nB,EAAK,KAAK5P,OAKhCuqC,EAAAxrC,UAAAupB,QAAA,SAAQC,EAAO2gB,GACb,OAAOA,EAAKt5B,OAGd26B,EAAAxrC,UAAAigB,QAAA,SAAQ1O,GACNlR,KAAKsP,OAAOZ,KAAKwC,8BA1HpB1H,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,4BACVC,SAAU,4wBA+BVgE,gBAAiBC,EAAAA,wBAAwBC,0CAGxC1D,EAAAA,qBACAA,EAAAA,oBACAA,EAAAA,sBACAA,EAAAA,4BACAA,EAAAA,yBAEAA,EAAAA,yBACAA,EAAAA,0BACAA,EAAAA,yBACAA,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,0BACAA,EAAAA,sBAEAgE,EAAAA,6BClEH,SAAA69B,IAAA,IAAAnjC,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YA8BW4I,EAAAwiC,WAAqB,mBACrBxiC,EAAAszB,aAAe,GAYxBtzB,EAAAsJ,OAAS,CAAC,GAAI,GAAI,GAAI,aAhBiBpS,EAAAisC,EAAA5/B,GAoBvC7M,OAAA0G,eAAI+lC,EAAApsC,UAAA,YAAS,KAAb,WACE,QAASK,KAAKsP,OAAO08B,UAAUtrC,wCAGjCqrC,EAAApsC,UAAAkN,OAAA,WACEV,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEZA,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,SAGhBlS,KAAKsQ,cAELtQ,KAAK+V,OAAS/V,KAAKw5B,YAEnBx5B,KAAKiwB,YACLjwB,KAAKqS,UAAY,aAAarS,KAAKiQ,KAAK+b,QAAO,MAAMhsB,KAAKkS,OAAO,GAAE,IAOnE,IALA,IAAMgjB,EAAO+N,GAASjjC,KAAKiQ,KAAMjQ,KAAK+P,QAAQrP,OAAQ,KAChD47B,EAAIpH,EAAK,GAAKA,EAAK,GAEnBhkB,EAAOlR,KAAK+P,QAAQ8C,QAEnB3B,EAAKxQ,OAAS47B,GACnBprB,EAAK9P,KAAK,CAAER,MAAO,OAGrBZ,KAAKkR,KAAOqyB,GAAWvjC,KAAKiQ,KAAMiB,EAAM,IAAKlR,KAAKwjC,kBAGpDuI,EAAApsC,UAAA65B,UAAA,WACE,OAAOx5B,KAAK+P,QAAQuI,KAAI,SAAAlZ,GAAK,OAAAA,EAAEoR,UAGjCu7B,EAAApsC,UAAAigB,QAAA,SAAQ1O,GACNlR,KAAKsP,OAAOZ,KAAKwC,IAGnB66B,EAAApsC,UAAAswB,UAAA,WACEjwB,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQ,UAAWpP,KAAK+V,OAAQ/V,KAAKusB,kBA7DnCtd,wBA3BxCzF,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,yBACVC,SAAU,iuBAsBVC,cAAeC,EAAAA,kBAAkBC,KACjC6D,gBAAiBC,EAAAA,wBAAwBC,6gEAGxC1D,EAAAA,yBACAA,EAAAA,0BACAA,EAAAA,4BACAA,EAAAA,yBACAA,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,gBC9BH,kCALCmP,EAAAA,SAAQ1U,KAAA,CAAC,CACR2U,QAAS,CAACya,IACVva,aAAc,CAAC+vB,GAAe4B,GAAqBY,IACnDtyB,QAAS,CAAC8vB,GAAe4B,GAAqBY,0BCwE9C,SAAAE,EAAYzpC,GAfHxC,KAAAqhB,UAAoB,EACpBrhB,KAAAsM,YAAsB,EAErBtM,KAAAsP,OAAS,IAAI9C,EAAAA,aAUvBxM,KAAAshB,aAAuB,EAGrBthB,KAAKwC,QAAUA,EAAQC,qBAGzBwpC,EAAAtsC,UAAAgN,YAAA,WACE3M,KAAK6M,SAEL7M,KAAKokB,gBAAkBpkB,KAAKokB,iBAAe,SAAKxjB,GAAS,OAAAA,EAAM8T,kBAC/D,IAAMwV,EAAkBlqB,KAAKkqB,iBAAe,SAAK8R,GAAQ,OAAAhf,EAAYtK,EAAUspB,EAAKxrB,MAAO,MAErF07B,EAAW,CACfh7B,KAAMlR,KAAKkR,KACXV,MAAOxQ,KAAKwQ,MACZ5P,MAAOZ,KAAKY,OAGdZ,KAAKmsC,eAAiBnsC,KAAKokB,gBAAgB8nB,EAAStrC,OACpDZ,KAAKgpB,eAAiBkB,EAAgBgiB,GAEtClsC,KAAKke,WAAa,OAASR,IAAKzI,WAChCjV,KAAK07B,YAAc,QAAQ17B,KAAKke,WAAU,IAC1Cle,KAAKwf,cAAgBxf,KAAKyf,oBAG5BwsB,EAAAtsC,UAAAkN,OAAA,WACM7M,KAAKshB,YACPthB,KAAK27B,wBAED37B,KAAKsM,YACPtM,KAAKwhB,gBAEPxhB,KAAKshB,aAAc,IAIvB2qB,EAAAtsC,UAAA6hB,cAAA,WACelS,EAAAA,OAAOtP,KAAKwC,SAAS8M,OAAO,SAEpCyS,KAAK,UAAW,GAAGA,KAAK,IAAK/hB,KAAKyS,GAAGsP,KAAK,IAAK/hB,KAAKuS,GAEzDvS,KAAK27B,wBAGPsQ,EAAAtsC,UAAAysC,aAAA,WACE,OAAOpB,GAAYhrC,KAAKwW,OAG1By1B,EAAAtsC,UAAAg8B,qBAAA,WACE,IAAM7Z,EAAOxS,EAAAA,OAAOtP,KAAKwC,SAAS8M,OAAO,SAErCtP,KAAKsM,WACPwV,EACGhU,aACArI,SAAS,KACTsc,KAAK,UAAW,GAChBA,KAAK,IAAK/hB,KAAKyS,GACfsP,KAAK,IAAK/hB,KAAKuS,GACfwP,KAAK,QAAS/hB,KAAK6G,OACnBkb,KAAK,SAAU/hB,KAAK0G,QAEvBob,EAAKC,KAAK,UAAW,GAAGA,KAAK,IAAK/hB,KAAKyS,GAAGsP,KAAK,IAAK/hB,KAAKuS,GAAGwP,KAAK,QAAS/hB,KAAK6G,OAAOkb,KAAK,SAAU/hB,KAAK0G,SAI9GulC,EAAAtsC,UAAAigB,QAAA,WACE5f,KAAKsP,OAAOZ,KAAK1O,KAAKkR,OAGxB+6B,EAAAtsC,UAAA8f,iBAAA,WACE,MAAO,CACL,CACEjN,OAAQ,EACRuM,MAAO/e,KAAKwW,KACZxI,QAAS,IAEX,CACEwE,OAAQ,IACRuM,MAAO/e,KAAKwW,KACZxI,QAAS,+BAvJhBxE,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,8BACVC,SAAU,y1CA0CVgE,gBAAiBC,EAAAA,wBAAwBC,qDApDM9D,EAAAA,6CAuD9CI,EAAAA,oBACAA,EAAAA,iBACAA,EAAAA,iBACAA,EAAAA,qBACAA,EAAAA,sBACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,yBACAA,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,wBACAA,EAAAA,0BACAA,EAAAA,sBAEAgE,EAAAA,4BCzDH,SAAAm+B,IAqCWrsC,KAAAqhB,UAAoB,EACpBrhB,KAAAia,iBAA2B,EAE3Bja,KAAAsM,YAAsB,EAErBtM,KAAAsP,OAAS,IAAI9C,EAAAA,oBAIvB6/B,EAAA1sC,UAAAgN,YAAA,SAAYC,GACV5M,KAAK67B,MAAQ77B,KAAK87B,YAGpBuQ,EAAA1sC,UAAAm8B,SAAA,WAAA,IAAAlzB,EAAA5I,KACE,OAAOA,KAAKkR,KAAKo7B,SACd5kB,QAAO,SAAAtoB,GACN,OAAmB,IAAZA,EAAEmtC,SAEVj0B,KAAI,SAAClZ,EAAG+pB,GACP,IAAM3Y,EAAQpR,EAAEse,GAEhB,MAAO,CACLxM,KAAM9R,EAAE8R,KACRuB,EAAGrT,EAAEotC,GACLj6B,EAAGnT,EAAEu0B,GACL9sB,MAAOzH,EAAEgZ,GAAKhZ,EAAEotC,GAChB9lC,OAAQtH,EAAE6Y,GAAK7Y,EAAEu0B,GACjBnd,KAAM5N,EAAKwW,OAAOC,SAAS7O,GAC3BA,MAAKA,EACL5P,MAAOxB,EAAEwB,MACT6rC,UAAWrtC,EAAEqtC,eAKrBJ,EAAA1sC,UAAA+f,eAAA,SAAetW,OAAEoH,EAAKpH,EAAAoH,MAAE5P,EAAKwI,EAAAxI,MAC3B,MAAO,uCACyBoc,EAAYxM,GAAM,4CACpB5P,EAAM8T,iBAAgB,iBAItD23B,EAAA1sC,UAAAigB,QAAA,SAAQ1O,GACNlR,KAAKsP,OAAOZ,KAAKwC,IAGnBm7B,EAAA1sC,UAAAupB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKb,iCApFfhH,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,qCACVC,SAAU,yxBA2BVgE,gBAAiBC,EAAAA,wBAAwBC,0CAGxC1D,EAAAA,oBACAA,EAAAA,sBACAA,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,wBACAA,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,0BACAA,EAAAA,sBAEAgE,EAAAA,6BCtCH,SAAAw+B,IAAA,IAAA9jC,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YA2BW4I,EAAAqR,iBAA2B,EAG3BrR,EAAAyY,UAAoB,EAEnBzY,EAAA0G,OAAS,IAAI9C,EAAAA,aAUvB5D,EAAAsJ,OAAS,CAAC,GAAI,GAAI,GAAI,aAjBcpS,EAAA4sC,EAAAvgC,GAmBpCugC,EAAA/sC,UAAAkN,OAAA,WACEV,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEZA,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,SAGhBlS,KAAK+V,OAAS/V,KAAKw5B,YAEnBx5B,KAAK2sC,QAAUA,EAAAA,UAAezX,KAAK,CAACl1B,KAAKiQ,KAAKpJ,MAAO7G,KAAKiQ,KAAKvJ,SAE/D,IAMM6c,EAAOqpB,EAAAA,WACVlvB,IAAG,SAAAte,GACF,IAAIoR,EAAQpR,EAAEqR,KAOd,OAJED,EAD6B,SAA3BA,EAAMvQ,YAAYwQ,KACZD,EAAME,qBAENF,EAAMkE,oBAIjBm4B,UAAS,SAAAztC,GAAK,OAACA,EAAE0tC,OAAS,KAAO,SAXvBF,CAW+BtrC,EAAA,CAjB3B,CACfmP,KAAM,OACN7P,MAAO,EACPksC,QAAQ,IAciD9sC,KAAK+P,UAC7Dya,KAAI,SAAAprB,GAAK,OAAAA,EAAEwB,SAEdZ,KAAKkR,KAAOlR,KAAK2sC,QAAQppB,GAEzBvjB,KAAKiwB,YAELjwB,KAAKqS,UAAY,aAAarS,KAAKiQ,KAAK+b,QAAO,MAAMhsB,KAAKkS,OAAO,GAAE,KAGrEw6B,EAAA/sC,UAAA65B,UAAA,WACE,OAAOx5B,KAAK+P,QAAQuI,KAAI,SAAAlZ,GAAK,OAAAA,EAAEqR,SAGjCi8B,EAAA/sC,UAAAigB,QAAA,SAAQ1O,GACNlR,KAAKsP,OAAOZ,KAAKwC,IAGnBw7B,EAAA/sC,UAAAswB,UAAA,WACEjwB,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQ,UAAWpP,KAAK+V,OAAQ/V,KAAKusB,kBApEtCtd,wBAzBrCzF,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,sBACVC,SAAU,ipBAoBVC,cAAeC,EAAAA,kBAAkBC,KACjC6D,gBAAiBC,EAAAA,wBAAwBC,6OAGxC1D,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,wBACAA,EAAAA,sBAEAgE,EAAAA,gCAEAmkB,EAAAA,aAAY1tB,KAAA,CAAC,6BCvChB,kCALC0U,EAAAA,SAAQ1U,KAAA,CAAC,CACR2U,QAAS,CAACya,IACVva,aAAc,CAACyyB,GAAsBI,GAA4BK,IACjEjzB,QAAS,CAACwyB,GAAsBI,GAA4BK,2BCS9D,SAAAK,IAAA,IAAAnkC,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YAmFW4I,EAAAyM,IAAc,EACdzM,EAAA+J,IAAc,IACd/J,EAAAhI,MAAgB,EAczBgI,EAAAsJ,OAAgB,CAAC,GAAI,GAAI,GAAI,IAG7BtJ,EAAAokC,iBAA2B,EAC3BpkC,EAAAqkC,iBAA2B,EAC3BrkC,EAAAskC,mBAA6B,GAC7BtkC,EAAAukC,eAAyB,GACzBvkC,EAAAwkC,mBAA6B,GAC7BxkC,EAAAykC,eAAyB,YAzBevtC,EAAAitC,EAAA5gC,GA6BxC4gC,EAAAptC,UAAA8I,gBAAA,WAAA,IAAAG,EAAA5I,KACEmM,EAAAxM,UAAM8I,gBAAe5I,KAAAG,MACjB6I,EAAAA,kBAAkB7I,KAAKqI,aACzB9C,YAAW,WACTqD,EAAKyhC,UAAU,SACfzhC,EAAKyhC,UAAU,aAKrB0C,EAAAptC,UAAAkN,OAAA,WAAA,IAAAjE,EAAA5I,KACEmM,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEZA,KAAKstC,sBAA0CtqC,IAAvBhD,KAAKutC,cAC7BvtC,KAAK2S,IAAMvF,KAAKuF,IAAI3S,KAAK2S,IAAK3S,KAAKY,OACnCZ,KAAKqV,IAAMjI,KAAKiI,IAAIrV,KAAKqV,IAAKrV,KAAKY,OAC/BZ,KAAKstC,mBACPttC,KAAK2S,IAAMvF,KAAKuF,IAAI3S,KAAK2S,IAAK3S,KAAKutC,eACnCvtC,KAAKqV,IAAMjI,KAAKiI,IAAIrV,KAAKqV,IAAKrV,KAAKutC,gBAGrCvtC,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,SAGhBlS,KAAKw2B,YAAcx2B,KAAK21B,iBACxB31B,KAAK+sB,WAAa/sB,KAAKg2B,gBACvBh2B,KAAKwtC,aAAextC,KAAKytC,kBAEzBztC,KAAKiwB,YAEL,IAAMjE,EAAUhsB,KAAKkS,OAAO,GAAKlS,KAAKiQ,KAAKpJ,MAAQ,EAC7C63B,EAAU1+B,KAAKkS,OAAO,GAAKlS,KAAKiQ,KAAKvJ,OAAS,EAEpD1G,KAAKqS,UAAY,aAAa2Z,EAAO,KAAK0S,EAAO,IACjD1+B,KAAK0tC,cAAgB,cAAa1tC,KAAKkS,OAAO,GAAKlS,KAAK+sB,WAAW/sB,KAAKutC,gBAAc,KAAK7O,EAAO,IAClG1+B,KAAKmtC,eAAiB,oBACtBntC,KAAKqtC,eAAiB,mBAElB79B,EAAAA,iBAAiBxP,KAAKqI,aACxBrI,KAAK4pC,aAAa,SAClB5pC,KAAK4pC,aAAa,WAElBrkC,YAAW,WAAM,OAAAqD,EAAKyhC,UAAU,WAAU,IAC1C9kC,YAAW,WAAM,OAAAqD,EAAKyhC,UAAU,WAAU,MAI9C0C,EAAAptC,UAAAg2B,eAAA,WACE,MAAO,CAAC31B,KAAKqV,IAAKrV,KAAK2S,MAGzBo6B,EAAAptC,UAAAq2B,cAAA,WACE,OAAOhO,EAAAA,cAAc7I,MAAM,CAAC,EAAGnf,KAAKiQ,KAAKpJ,QAAQkP,OAAO/V,KAAKw2B,cAG/DuW,EAAAptC,UAAA8tC,gBAAA,WACE,OAAIztC,KAAKokB,gBACApkB,KAAKokB,gBAAgBpkB,KAAKY,OAE5BZ,KAAKY,MAAM8T,kBAGpBq4B,EAAAptC,UAAA0qC,UAAA,SAAU7nC,EAASgoC,GAAnB,IACMmD,EACA5C,EAFNniC,EAAA5I,UAAmB,IAAAwqC,IAAAA,GAAA,GAGD,UAAZhoC,GACFmrC,EAAK3tC,KAAK4tC,YACV7C,EAAc/qC,KAAKgtC,mBAEnBW,EAAK3tC,KAAK6tC,YACV9C,EAAc/qC,KAAKitC,kBAGf,IAAA7jC,EAAoBukC,EAAGlrC,cAAcuG,wBAAnCnC,EAAKuC,EAAAvC,MAAEH,EAAM0C,EAAA1C,OACrB,GAAc,IAAVG,GAA0B,IAAXH,EAAnB,CACA,IAAMonC,EAAW/C,EACXF,EAAiB7qC,KAAKiQ,KAAKpJ,MAC3BikC,EAAkB19B,KAAKuF,IAAI3S,KAAKiQ,KAAKvJ,OAAS,EAAI,GAAI,GACtDqnC,EAAmB3gC,KAAKC,MAAOw9B,GAAkBhkC,EAAQkkC,GAAgB,KAAO,IAChFiD,EAAoB5gC,KAAKC,MAAOy9B,GAAmBpkC,EAASqkC,GAAgB,KAAO,KACzFA,EAAc39B,KAAKiI,IAAI24B,EAAmBD,MAEtBD,IACF,UAAZtrC,GACFxC,KAAKgtC,iBAAmBjC,EACxB/qC,KAAKktC,mBAAqB,SAASnC,EAAW,KAAKA,EAAW,MAE9D/qC,KAAKitC,iBAAmBlC,EACxB/qC,KAAKotC,mBAAqB,SAASrC,EAAW,KAAKA,EAAW,KAEhE/qC,KAAKmP,GAAGgB,eACJq6B,GAAU3hC,EAAAA,kBAAkB7I,KAAKqI,aACnC9C,YAAW,WACTqD,EAAKyhC,UAAU7nC,GAAS,KACvB,OAKTuqC,EAAAptC,UAAAiqC,aAAA,SAAapnC,GACX,IAAIuoC,EAAc,EAEZnqC,EAAoB,UAAZ4B,EAAsBxC,KAAKwtC,aAAextC,KAAKiuC,MACvDpnC,EAAQs+B,GAAmBQ,GAA2B/kC,EAAO,IAG7DiqC,EAAiB7qC,KAAKiQ,KAAKpJ,MAC3BikC,EAAkB19B,KAAKuF,IAAI3S,KAAKiQ,KAAKvJ,OAAS,EAAI,GAAI,GACtDqnC,EAAmB3gC,KAAKC,MAAOw9B,GAAkBhkC,EAAQkkC,GAAgB,KAAO,IAChFiD,EAAoB5gC,KAAKC,MAAOy9B,GALvB,GAKmDC,GAAgB,KAAO,IACzFA,EAAc39B,KAAKiI,IAAI24B,EAAmBD,GAE1B,UAAZvrC,GACFxC,KAAKgtC,iBAAmBjC,EACxB/qC,KAAKktC,mBAAqB,SAASnC,EAAW,KAAKA,EAAW,MAE9D/qC,KAAKitC,iBAAmBlC,EACxB/qC,KAAKotC,mBAAqB,SAASrC,EAAW,KAAKA,EAAW,KAGhE/qC,KAAKmP,GAAGgB,gBAGV48B,EAAAptC,UAAAigB,QAAA,WACE5f,KAAKsP,OAAOZ,KAAK,CACf+B,KAAM,QACN7P,MAAOZ,KAAKY,SAIhBmsC,EAAAptC,UAAAswB,UAAA,WACEjwB,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQ,UAAW,CAACpP,KAAKY,OAAQZ,KAAKusB,kBAnKnCtd,wBAlFzCzF,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,0BACVC,SAAU,krEA6EVC,cAAeC,EAAAA,kBAAkBC,KACjC6D,gBAAiBC,EAAAA,wBAAwBC,irDAGxC1D,EAAAA,mBACAA,EAAAA,qBACAA,EAAAA,qBACAA,EAAAA,6BACAA,EAAAA,+BACAA,EAAAA,2BAEAC,EAAAA,UAASxF,KAAA,CAAC,oCACVwF,EAAAA,UAASxF,KAAA,CAAC,qCC1Fb,SAAAupC,IAAA,IAAAtlC,EAAAuD,EAAAjH,MAAAlF,KAAAsB,EAAAC,aAAAvB,YAgEW4I,EAAA4mB,QAAS,EACT5mB,EAAA4lB,YAAsB,SACtB5lB,EAAAijB,eAAyB,QACzBjjB,EAAAyM,IAAc,EACdzM,EAAA+J,IAAc,IAGd/J,EAAAulC,YAAsB,GACtBvlC,EAAAwlC,cAAwB,EAExBxlC,EAAAylC,UAAoB,EACpBzlC,EAAAu2B,YAAsB,IACtBv2B,EAAA0lC,UAAoB,IACpB1lC,EAAAmX,cAAuB,GAEvBnX,EAAAqR,iBAA2B,EAE3BrR,EAAA2lC,UAAoB,EAKnB3lC,EAAAmV,SAA8B,IAAIvR,EAAAA,aAClC5D,EAAAoV,WAAgC,IAAIxR,EAAAA,aAgB9C5D,EAAAmiC,YAAsB,EACtBniC,EAAA4lC,SAAmB,GACnB5lC,EAAAmM,cAAwB,cACxBnM,EAAA04B,aAAuB,YA3CWxhC,EAAAouC,EAAA/hC,GAgDlC+hC,EAAAvuC,UAAA8I,gBAAA,WAAA,IAAAG,EAAA5I,KACEmM,EAAAxM,UAAM8I,gBAAe5I,KAAAG,MACrBuF,YAAW,WAAM,OAAAqD,EAAKyhC,gBAGxB6D,EAAAvuC,UAAAkN,OAAA,WAAA,IAAAjE,EAAA5I,KACEmM,EAAAxM,UAAMkN,OAAMhN,KAAAG,MAEPA,KAAKquC,SAKHruC,KAAKkS,SACRlS,KAAKkS,OAAS,CAAC,GAAI,IAAK,GAAI,MALzBlS,KAAKkS,SACRlS,KAAKkS,OAAS,CAAC,GAAI,GAAI,GAAI,KAS3BlS,KAAKm/B,WAAa,IACpBn/B,KAAKm/B,WAAcn/B,KAAKm/B,WAAa,IAAO,KAG9Cn/B,KAAKsuC,UAAYlhC,KAAKiI,IAAIrV,KAAKsuC,UAAW,KAE1CtuC,KAAKiQ,KAAOgb,GAAwB,CAClCpkB,MAAO7G,KAAK6G,MACZH,OAAQ1G,KAAK0G,OACbwkB,QAASlrB,KAAKkS,OACd7F,WAAYrM,KAAKwvB,OACjB3D,eAAgB7rB,KAAK6rB,iBAGvB7rB,KAAK+V,OAAS/V,KAAKw5B,YACnBx5B,KAAKw2B,YAAcx2B,KAAK21B,iBACxB31B,KAAK+sB,WAAa/sB,KAAKg2B,gBACvBh2B,KAAKwtC,aAAextC,KAAKytC,kBAEzBztC,KAAKy+B,YAAcrxB,KAAKiI,IAAIrV,KAAKiQ,KAAKpJ,MAAO7G,KAAKiQ,KAAKvJ,QAAU,EAEjE1G,KAAKqkC,KAAOrkC,KAAKskC,UAEjBtkC,KAAKiwB,YACLjwB,KAAKiN,cAAgBjN,KAAKkwB,mBAE1B,IAAMlE,EAAUhsB,KAAKkS,OAAO,GAAKlS,KAAKiQ,KAAKpJ,MAAQ,EAC7C63B,EAAU1+B,KAAKkS,OAAO,GAAKlS,KAAKiQ,KAAKvJ,OAAS,EAEpD1G,KAAKqS,UAAY,aAAa2Z,EAAO,KAAK0S,EAAO,IACjD1+B,KAAKwuC,SAAW,UAAUxuC,KAAKm/B,WAAU,IACzC55B,YAAW,WAAM,OAAAqD,EAAKyhC,cAAa,KAGrC6D,EAAAvuC,UAAA2kC,QAAA,mBACQD,EAAO,GAEPoK,EAAqC,GAAnBzuC,KAAKy+B,YAEvBiQ,EAAethC,KAAKiI,IAAIo5B,EAAkBzuC,KAAK+P,QAAQrP,OAAQ,IAC/DkiC,EAA0B,GAAf8L,EACjB1uC,KAAK2uC,WAAa3uC,KAAKy+B,YAAcz+B,KAAK+P,QAAQrP,OAASguC,EAC3D1uC,KAAKshC,aAAel0B,KAAKC,MAAMu1B,EAAW,GAE1C,IAAIniC,EAAI,MACR,IAAgB,IAAAwW,EAAA9W,EAAAH,KAAK+P,SAAOwB,EAAA0F,EAAAtW,QAAA4Q,EAAA1Q,KAAA0Q,EAAA0F,EAAAtW,OAAE,CAAzB,IAAMvB,EAACmS,EAAA3Q,MACJ69B,EAAcz+B,KAAKy+B,YAAch+B,EAAIiuC,EACrCpP,EAAcb,EAAcmE,EAsB5B3B,EAAM,CACV2N,cArBoB,CACpBrP,SAAWv/B,KAAKsuC,UAAYlhC,KAAKqI,GAAM,IACvC6pB,YAAWA,EACXb,YAAWA,EACXvtB,KAAM,CACJtQ,MAAOZ,KAAK2S,IACZlC,KAAMrR,EAAEqR,OAgBVo+B,SAZe,CACftP,SAAWnyB,KAAKiI,IAAIrV,KAAK+sB,WAAW3tB,EAAEwB,OAAQZ,KAAKsuC,WAAalhC,KAAKqI,GAAM,IAC3E6pB,YAAWA,EACXb,YAAWA,EACXvtB,KAAM,CACJtQ,MAAOxB,EAAEwB,MACT6P,KAAMrR,EAAEqR,QASZ4zB,EAAKjjC,KAAK6/B,GACVxgC,sGAGF,OAAO4jC,GAGT6J,EAAAvuC,UAAA65B,UAAA,WACE,OAAOx5B,KAAK+P,QAAQuI,KAAI,SAAAlZ,GAAK,OAAAA,EAAEqR,SAGjCy9B,EAAAvuC,UAAAg2B,eAAA,WACE,IAAMhO,EAAS3nB,KAAK+P,QAAQuI,KAAI,SAAAlZ,GAAK,OAAAA,EAAEwB,SACjCkuC,EAAU1hC,KAAKiI,IAAGnQ,MAARkI,KAAI9L,EAAQqmB,IACtBonB,EAAU3hC,KAAKuF,IAAGzN,MAARkI,KAAI9L,EAAQqmB,IAc5B,YAZiB3kB,IAAbhD,KAAKqV,IACPrV,KAAKqV,IAAMjI,KAAKiI,IAAIrV,KAAKqV,IAAKy5B,GAE9B9uC,KAAKqV,IAAMy5B,OAGI9rC,IAAbhD,KAAK2S,IACP3S,KAAK2S,IAAMvF,KAAKuF,IAAI3S,KAAK2S,IAAKo8B,GAE9B/uC,KAAK2S,IAAMo8B,EAGN,CAAC/uC,KAAKqV,IAAKrV,KAAK2S,MAGzBu7B,EAAAvuC,UAAAq2B,cAAA,WACE,OAAOhO,EAAAA,cAAc7I,MAAM,CAAC,EAAGnf,KAAKsuC,YAAYld,OAAOrb,OAAO/V,KAAKw2B,cAGrE0X,EAAAvuC,UAAA8tC,gBAAA,WACE,IAAM7sC,EAAQZ,KAAK+P,QAAQuI,KAAI,SAAAlZ,GAAK,OAAAA,EAAEwB,SAAO2pB,QAAO,SAACsG,EAAGxxB,GAAM,OAAAwxB,EAAIxxB,IAAG,GAErE,OAAIW,KAAKgvC,WAAa,IAAMhvC,KAAKgvC,UAAUtuC,OAClCV,KAAKgvC,UAAUt6B,iBAGpB1U,KAAKokB,gBACApkB,KAAKokB,gBAAgBxjB,GAGvBA,EAAM8T,kBAGfw5B,EAAAvuC,UAAA0qC,UAAA,SAAUG,GAAV,IAAA5hC,EAAA5I,KACE,QADQ,IAAAwqC,IAAAA,GAAA,GACHxqC,KAAKuuC,SAAV,CAGQ,IAAA1nC,EAAU7G,KAAK4qC,OAAOnoC,cAAcuG,wBAAuBnC,MAC7DinC,EAAW9tC,KAAK+qC,YAEtB,GAAc,IAAVlkC,EACF7G,KAAK+qC,YAAc,MACd,CACL,IAAMkE,EAAiBjvC,KAAK2uC,WAC5B3uC,KAAK+qC,YAAc39B,KAAKC,MAAO4hC,GAAkBpoC,EAAQ7G,KAAK+qC,aAAgB,KAAO,IAGnF/qC,KAAK+qC,cAAgB+C,IACvB9tC,KAAK+U,cAAgB,SAAS/U,KAAK+qC,YAAW,KAAK/qC,KAAK+qC,YAAW,IACnE/qC,KAAKmP,GAAGgB,eACJq6B,GACFjlC,YAAW,WAAM,OAAAqD,EAAKyhC,WAAU,KAAQ,OAK9C6D,EAAAvuC,UAAAigB,QAAA,SAAQ1O,GACNlR,KAAKsP,OAAOZ,KAAKwC,IAGnBg9B,EAAAvuC,UAAAuwB,iBAAA,WACE,MAAO,CACL1iB,UAAW,UACX4R,OAAQpf,KAAKof,OACbrJ,OAAQ/V,KAAK+V,OACb4G,MAAO3c,KAAKwuB,YACZ9lB,SAAU1I,KAAK6rB,iBAInBqiB,EAAAvuC,UAAAswB,UAAA,WACEjwB,KAAKof,OAAS,IAAIkN,GAAYtsB,KAAKoP,OAAQ,UAAWpP,KAAK+V,OAAQ/V,KAAKusB,eAG1E2hB,EAAAvuC,UAAAuyB,WAAA,SAAW7gB,GACGrR,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,UAEvC,IAIXZ,KAAK+f,cAAaze,EAAA,CAAI+P,GAASrR,KAAK+f,eACpC/f,KAAK+d,SAASrP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,kBAGlDmuB,EAAAvuC,UAAAyyB,aAAA,SAAa/gB,GACX,IAAM5F,EAAMzL,KAAK+f,cAAcxB,WAAU,SAAAnf,GACvC,OAAOA,EAAEqR,OAASY,EAAKZ,MAAQrR,EAAEwB,QAAUyQ,EAAKzQ,SAGlDZ,KAAK+f,cAAcpU,OAAOF,EAAK,GAC/BzL,KAAK+f,cAAaze,EAAOtB,KAAK+f,eAE9B/f,KAAKge,WAAWtP,KAAK,CAAE9N,MAAOyQ,EAAM8gB,QAASnyB,KAAK+f,iBAGpDmuB,EAAAvuC,UAAAkgB,SAAA,SAASC,GACP,QAAK9f,KAAK+f,oBAIM/c,IAHHhD,KAAK+f,cAAcC,MAAK,SAAA5gB,GACnC,OAAO0gB,EAAMrP,OAASrR,EAAEqR,MAAQqP,EAAMnP,SAAWvR,EAAEuR,WAKvDu9B,EAAAvuC,UAAAupB,QAAA,SAAQC,EAAO9X,GACb,OAAOA,EAAKw9B,SAAS39B,KAAKT,SAvQMxB,wBA/DnCzF,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,mBACVC,SAAU,+4DA0DVC,cAAeC,EAAAA,kBAAkBC,KACjC6D,gBAAiBC,EAAAA,wBAAwBC,ozDAGxC1D,EAAAA,2BACAA,EAAAA,8BACAA,EAAAA,mBACAA,EAAAA,mBACAA,EAAAA,yBACAA,EAAAA,qBACAA,EAAAA,2BACAA,EAAAA,6BACAA,EAAAA,uBACAA,EAAAA,wBACAA,EAAAA,0BACAA,EAAAA,yBACAA,EAAAA,6BACAA,EAAAA,kCACAA,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,wBACAA,EAAAA,sBAGAA,EAAAA,wBAEAgE,EAAAA,2BACAA,EAAAA,gCAEAmkB,EAAAA,aAAY1tB,KAAA,CAAC,mCAEbwF,EAAAA,UAASxF,KAAA,CAAC,+BC1Gb,SAAAuqC,IA6CWlvC,KAAA6f,UAAoB,EACpB7f,KAAAia,iBAA2B,EAG3Bja,KAAAsM,YAAsB,EAErBtM,KAAAsP,OAAS,IAAI9C,EAAAA,aACbxM,KAAA+d,SAAW,IAAIvR,EAAAA,aACfxM,KAAAge,WAAa,IAAIxR,EAAAA,oBAE3B0iC,EAAAvvC,UAAAw4B,YAAA,SAAY8I,GACV,IACI5d,EADE7S,EAAQuM,EAAYkkB,EAAI/vB,KAAKT,MASnC,OALE4S,EADErjB,KAAKokB,gBACDpkB,KAAKokB,gBAAgB6c,EAAI/vB,KAAKtQ,OAE9Bmc,EAAYkkB,EAAI/vB,KAAKtQ,OAGtB,uCACyBoc,EAAYxM,GAAM,4CACpB6S,EAAG,2CAnEpC7Z,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,0BACVC,SAAU,8pCAoCVgE,gBAAiBC,EAAAA,wBAAwBC,mDAGxC1D,EAAAA,wBACAA,EAAAA,4BACAA,EAAAA,sBACAA,EAAAA,wBACAA,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,+BACAA,EAAAA,0BACAA,EAAAA,sBAEAgE,EAAAA,yBACAA,EAAAA,2BACAA,EAAAA,4BCtDH,SAAAihC,IAoCEnvC,KAAAovC,OAAiB,UAEjBD,EAAAxvC,UAAAgN,YAAA,SAAYC,GACV5M,KAAK6M,UAGPsiC,EAAAxvC,UAAAkN,OAAA,WACE7M,KAAKqvC,eAAiB,GAAKrvC,KAAKm/B,WAChCn/B,KAAKovC,OAAS,UAAUpvC,KAAKqvC,cAAa,IAC1CrvC,KAAK+S,MAAQ/S,KAAKuU,YAGpB46B,EAAAxvC,UAAA4U,SAAA,WAYE,IAXA,IAAM+6B,EAAiBtvC,KAAKsuC,UAAYtuC,KAAKmuC,YACvCoB,EAAmBD,EAAiBtvC,KAAKouC,cAEzCr7B,EAAQ,CACZy8B,IAAK,GACLC,MAAO,IAGHC,EAAgB1vC,KAAKuf,OAAS,GAC9BowB,EAAWD,EAPE,GAO2B,GAErCjvC,EAAI,EAAGA,GAAKT,KAAKmuC,YAAa1tC,IAAK,CAC1C,IAAMmvC,EAAWnvC,EAAI6uC,EACf36B,EAASi7B,EAAWxiC,KAAKqI,GAAM,IAE/BrD,EAAapS,KAAK6vC,cAAcD,GAElCE,GAAO,EAKX,GAJU,IAANrvC,GAA8B,MAAnBT,KAAKsuC,YAClBwB,GAAO,IAGJA,EAAM,CACT,IAAIzK,EAAOvmB,OAAOkF,WAAWhkB,KAAK+sB,WAAWxE,OAAOqnB,GAAU36B,YAAYP,iBACtE1U,KAAKwU,iBACP6wB,EAAOrlC,KAAKwU,eAAe6wB,IAE7BtyB,EAAMy8B,IAAIpuC,KAAK,CACbu8B,KAAM39B,KAAK+vC,YAAYL,EA1BV,GA0BqC/6B,GAClDvC,WAAUA,EACVizB,KAAIA,EACJtwB,cAAe,2BACD46B,EAAWviC,KAAKoI,IAAIb,GAAM,KAAKg7B,EAAWviC,KAAKuI,IAAIhB,GAAM,aAAa3U,KAAKqvC,cAAa,kBAK1G,GAAI5uC,IAAMT,KAAKmuC,YAIf,IAAK,IAAIv9B,EAAI,EAAGA,GAAK5Q,KAAKouC,cAAex9B,IAAK,CAC5C,IACMo/B,GADgBJ,EAAWh/B,EAAI2+B,GACDniC,KAAKqI,GAAM,IAE/C1C,EAAM08B,MAAMruC,KAAK,CACfu8B,KAAM39B,KAAK+vC,YAAYL,EAAex6B,GAAgB86B,MAK5D,OAAOj9B,GAGTo8B,EAAAxvC,UAAAkwC,cAAA,SAAcl7B,GAOZ,IAAIvC,EAAa,SAMjB,OAPAuC,GAAS3U,KAAKm/B,WAAaxqB,GAAS,KAExB,IAAMA,GAAS,IACzBvC,EAAa,QACJuC,EAAQ,KAAOA,GAAS,MACjCvC,EAAa,OAERA,GAGT+8B,EAAAxvC,UAAAowC,YAAA,SAAYL,EAAex6B,EAAYP,GACrC,IAAMsD,EAAKy3B,EAAgBtiC,KAAKuI,IAAIhB,GAC9BqD,GAAM03B,EAAgBx6B,GAAc9H,KAAKuI,IAAIhB,GAI7CmY,EAAS,CACb,CAAEra,EAJOi9B,EAAgBtiC,KAAKoI,IAAIb,GAIzBpC,EAAG0F,GACZ,CAAExF,GAJQi9B,EAAgBx6B,GAAc9H,KAAKoI,IAAIb,GAIxCpC,EAAGyF,IAKd,OAHsB2lB,EAAAA,OACnBlrB,GAAE,SAAArT,GAAK,OAAAA,EAAEqT,KACTF,GAAE,SAAAnT,GAAK,OAAAA,EAAEmT,IACL09B,CAAcnjB,8BApIxBtjB,EAAAA,UAAS7E,KAAA,CAAC,CACT8E,SAAU,2BACVC,SAAU,ipBAmBVgE,gBAAiBC,EAAAA,wBAAwBC,iDAGxC1D,EAAAA,6BACAA,EAAAA,mBACAA,EAAAA,mBACAA,EAAAA,yBACAA,EAAAA,0BACAA,EAAAA,sBACAA,EAAAA,0BACAA,EAAAA,8BACAA,EAAAA,gBCrBH,kCALCmP,EAAAA,SAAQ1U,KAAA,CAAC,CACR2U,QAAS,CAACya,GAAmB0R,GAAgByK,IAC7C12B,aAAc,CAACuzB,GAAsBmB,GAAgBgB,GAAmBC,IACxE11B,QAAS,CAACszB,GAAsBmB,GAAgBgB,GAAmBC,eCkBnE,WC1B0B,oBAAfgB,iBAAuE,IAAlCA,WAAWxwC,UAAUgc,WACnEw0B,WAAWxwC,UAAUgc,SAAWy0B,eAAezwC,UAAUgc,gCDS5DtC,EAAAA,SAAQ1U,KAAA,CAAC,CACR8U,QAAS,CACPsa,GACAsc,GACAH,GACAI,GACAC,GACA7K,GACA8K,GACAC,GACAhL,GACAiL,GACAC,0uEbnBqB/vC,GAEvB,OAAOqqC,EAAAA,IAAarqC,qKePKgwC,EAAWC,GACpC,OAAO,SAAUrgC,GACf,MAAc,aAAVA,GAAkC,UAAVA,EACnBA,EAES,SAAdogC,GAAwC,YAAhBC,EACRC,EAAAA,WAAW,aACtBC,CAAevgC,GAGjBA,EAAMyE","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum PlacementTypes {\n  top = 'top' as any,\n  bottom = 'bottom' as any,\n  left = 'left' as any,\n  right = 'right' as any\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Injectable,\n  Injector,\n  ViewContainerRef,\n  EmbeddedViewRef,\n  Type\n} from '@angular/core';\nimport { DomPortalHost, ComponentPortal } from '@angular/cdk/portal';\n\nfunction isViewContainerRef(x: any): x is ViewContainerRef {\n  return x.element;\n}\n\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\n@Injectable()\nexport class InjectionService {\n  static globalRootViewContainer: ViewContainerRef = null;\n\n  /**\n   * Sets a default global root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   */\n  static setGlobalRootViewContainer(container: ViewContainerRef): void {\n    InjectionService.globalRootViewContainer = container;\n  }\n\n  private _container: ViewContainerRef;\n\n  constructor(\n    private applicationRef: ApplicationRef,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector\n  ) {}\n\n  /**\n   * Gets the root view container to inject the component to.\n   *\n   * @memberOf InjectionService\n   */\n  getRootViewContainer(): ViewContainerRef | ComponentRef<any> {\n    if (this._container) return this._container;\n    if (InjectionService.globalRootViewContainer) return InjectionService.globalRootViewContainer;\n\n    if (this.applicationRef.components.length) return this.applicationRef.components[0];\n\n    throw new Error(\n      'View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.'\n    );\n  }\n\n  /**\n   * Overrides the default root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   *\n   * @memberOf InjectionService\n   */\n  setRootViewContainer(container: ViewContainerRef): void {\n    this._container = container;\n  }\n\n  /**\n   * Gets the html element for a component ref.\n   *\n   * @param componentRef\n   *\n   * @memberOf InjectionService\n   */\n  getComponentRootNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\n    if (isViewContainerRef(component)) {\n      return component.element.nativeElement;\n    }\n    if (component.hostView && (component.hostView as EmbeddedViewRef<any>).rootNodes.length > 0) {\n      return (component.hostView as EmbeddedViewRef<any>).rootNodes[0] as HTMLElement;\n    }\n\n    // the top most component root node has no `hostView`\n    return component.location.nativeElement;\n  }\n\n  /**\n   * Gets the root component container html element.\n   *\n   * @memberOf InjectionService\n   */\n  getRootViewContainerNode(component: ViewContainerRef | ComponentRef<any>): HTMLElement {\n    return this.getComponentRootNode(component);\n  }\n\n  /**\n   * Projects the bindings onto the component\n   *\n   * @param component\n   * @param options\n   *\n   * @memberOf InjectionService\n   */\n  projectComponentBindings(component: ComponentRef<any>, bindings: any): ComponentRef<any> {\n    if (bindings) {\n      if (bindings.inputs !== undefined) {\n        const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n        for (const bindingName of bindingKeys) {\n          component.instance[bindingName] = bindings.inputs[bindingName];\n        }\n      }\n\n      if (bindings.outputs !== undefined) {\n        const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n        for (const eventName of eventKeys) {\n          component.instance[eventName] = bindings.outputs[eventName];\n        }\n      }\n    }\n\n    return component;\n  }\n\n  /**\n   * Appends a component to a adjacent location\n   *\n   * @param componentClass\n   * @param [options={}]\n   * @param [location]\n   *\n   * @memberOf InjectionService\n   */\n  appendComponent<T>(componentClass: Type<T>, bindings: any = {}, location?: any): ComponentRef<any> {\n    if (!location) location = this.getRootViewContainer();\n    const appendLocation = this.getComponentRootNode(location);\n\n    const portalHost = new DomPortalHost(\n      appendLocation,\n      this.componentFactoryResolver,\n      this.applicationRef,\n      this.injector\n    );\n\n    const portal = new ComponentPortal(componentClass);\n\n    const componentRef = portalHost.attach(portal);\n    this.projectComponentBindings(componentRef, bindings);\n    return componentRef;\n  }\n}\n","/**\n * Throttle a function\n *\n */\nexport function throttle(func: any, wait: number, options?: any) {\n  options = options || {};\n  let context;\n  let args;\n  let result;\n  let timeout = null;\n  let previous = 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n\n  return function () {\n    const now = +new Date();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    const remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nexport function throttleable(duration: number, options?: any) {\n  return function innerDecorator(target, key, descriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n\n        return this[key];\n      }\n    };\n  };\n}\n","import { PlacementTypes } from './placement.type';\n\nconst caretOffset = 7;\n\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === 'top') {\n    return elDimensions.top - caretOffset;\n  }\n\n  if (alignment === 'bottom') {\n    return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n  }\n\n  if (alignment === 'center') {\n    return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n  }\n\n  return undefined;\n}\n\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === 'left') {\n    return elDimensions.left - caretOffset;\n  }\n\n  if (alignment === 'right') {\n    return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n  }\n\n  if (alignment === 'center') {\n    return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n  }\n\n  return undefined;\n}\n\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\nexport class PositionHelper {\n  /**\n   * Calculate vertical alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment): number {\n    let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.height > window.innerHeight) {\n      result = window.innerHeight - popoverDimensions.height;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate vertical caret position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment): number {\n    let result;\n\n    if (alignment === 'top') {\n      result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n    }\n\n    if (alignment === 'bottom') {\n      result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n    }\n\n    if (alignment === 'center') {\n      result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n    }\n\n    const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n    if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n      result += popoverPosition + popoverDimensions.height - window.innerHeight;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate horz alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment): number {\n    let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.width > window.innerWidth) {\n      result = window.innerWidth - popoverDimensions.width;\n    }\n\n    return result;\n  }\n\n  /**\n   * Calculate horz caret position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment): number {\n    let result;\n\n    if (alignment === 'left') {\n      result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n    }\n\n    if (alignment === 'right') {\n      result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n    }\n\n    if (alignment === 'center') {\n      result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n    }\n\n    const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n    if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n      result += popoverPosition + popoverDimensions.width - window.innerWidth;\n    }\n\n    return result;\n  }\n\n  /**\n   * Checks if the element's position should be flipped\n   *\n   * @memberOf PositionHelper\n   */\n  static shouldFlip(elDimensions, popoverDimensions, placement, spacing): boolean {\n    let flip = false;\n\n    if (placement === 'right') {\n      if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'left') {\n      if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'top') {\n      if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === 'bottom') {\n      if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n        flip = true;\n      }\n    }\n\n    return flip;\n  }\n\n  /**\n   * Position caret\n   *\n   * @memberOf PositionHelper\n   */\n  static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment): any {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.right) {\n      left = -7;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.left) {\n      left = elmDim.width;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.top) {\n      top = elmDim.height;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.bottom) {\n      top = -7;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    }\n\n    return { top, left };\n  }\n\n  /**\n   * Position content\n   *\n   * @memberOf PositionHelper\n   */\n  static positionContent(placement, elmDim, hostDim, spacing, alignment): any {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.right) {\n      left = hostDim.left + hostDim.width + spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.left) {\n      left = hostDim.left - elmDim.width - spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.top) {\n      top = hostDim.top - elmDim.height - spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.bottom) {\n      top = hostDim.top + hostDim.height + spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    }\n\n    return { top, left };\n  }\n\n  /**\n   * Determine placement based on flip\n   *\n   * @memberOf PositionHelper\n   */\n  static determinePlacement(placement, elmDim, hostDim, spacing): any {\n    const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n\n    if (shouldFlip) {\n      if (placement === PlacementTypes.right) {\n        return PlacementTypes.left;\n      } else if (placement === PlacementTypes.left) {\n        return PlacementTypes.right;\n      } else if (placement === PlacementTypes.top) {\n        return PlacementTypes.bottom;\n      } else if (placement === PlacementTypes.bottom) {\n        return PlacementTypes.top;\n      }\n    }\n\n    return placement;\n  }\n}\n","import {\n  Input,\n  Component,\n  ElementRef,\n  AfterViewInit,\n  ViewEncapsulation,\n  HostListener,\n  ViewChild,\n  HostBinding,\n  Renderer2,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\n\nimport { throttleable } from '../../utils/throttle';\nimport { PositionHelper, PlacementTypes } from './position';\n\nimport { StyleTypes } from './style.type';\nimport { AlignmentTypes } from './alignment.type';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Component({\n  selector: 'ngx-tooltip-content',\n  template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: ['./tooltip.component.scss']\n})\nexport class TooltipContentComponent implements AfterViewInit {\n  @Input() host: any;\n  @Input() showCaret: boolean;\n  @Input() type: StyleTypes;\n  @Input() placement: PlacementTypes;\n  @Input() alignment: AlignmentTypes;\n  @Input() spacing: number;\n  @Input() cssClass: string;\n  @Input() title: string;\n  @Input() template: any;\n  @Input() context: any;\n\n  @ViewChild('caretElm') caretElm;\n\n  @HostBinding('class')\n  get cssClasses(): string {\n    let clz = 'ngx-charts-tooltip-content';\n    clz += ` position-${this.placement}`;\n    clz += ` type-${this.type}`;\n    clz += ` ${this.cssClass}`;\n    return clz;\n  }\n\n  constructor(public element: ElementRef, private renderer: Renderer2, @Inject(PLATFORM_ID) private platformId: any) {}\n\n  ngAfterViewInit(): void {\n    setTimeout(this.position.bind(this));\n  }\n\n  position(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const nativeElm = this.element.nativeElement;\n    const hostDim = this.host.nativeElement.getBoundingClientRect();\n\n    // if no dims were found, never show\n    if (!hostDim.height && !hostDim.width) return;\n\n    const elmDim = nativeElm.getBoundingClientRect();\n    this.checkFlip(hostDim, elmDim);\n    this.positionContent(nativeElm, hostDim, elmDim);\n\n    if (this.showCaret) {\n      this.positionCaret(hostDim, elmDim);\n    }\n\n    // animate its entry\n    setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n  }\n\n  positionContent(nativeElm, hostDim, elmDim): void {\n    const { top, left } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n\n    this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n    this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n  }\n\n  positionCaret(hostDim, elmDim): void {\n    const caretElm = this.caretElm.nativeElement;\n    const caretDimensions = caretElm.getBoundingClientRect();\n    const { top, left } = PositionHelper.positionCaret(\n      this.placement,\n      elmDim,\n      hostDim,\n      caretDimensions,\n      this.alignment\n    );\n\n    this.renderer.setStyle(caretElm, 'top', `${top}px`);\n    this.renderer.setStyle(caretElm, 'left', `${left}px`);\n  }\n\n  checkFlip(hostDim, elmDim): void {\n    this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n  }\n\n  @HostListener('window:resize')\n  @throttleable(100)\n  onWindowResize(): void {\n    this.position();\n  }\n}\n","import { ComponentRef, Type } from '@angular/core';\nimport { InjectionService } from './injection.service';\n\nexport interface PartialBindings {\n  inputs?: object;\n  outputs?: object;\n}\n\nexport abstract class InjectionRegisteryService<T = any> {\n  protected abstract type: Type<T>;\n\n  protected defaults: PartialBindings = {};\n  protected components: Map<any, Array<ComponentRef<T>>> = new Map();\n\n  constructor(public injectionService: InjectionService) {}\n\n  getByType(type: Type<T> = this.type) {\n    return this.components.get(type);\n  }\n\n  create(bindings: object): ComponentRef<T> {\n    return this.createByType(this.type, bindings);\n  }\n\n  createByType(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\n    bindings = this.assignDefaults(bindings);\n\n    const component = this.injectComponent(type, bindings);\n    this.register(type, component);\n\n    return component;\n  }\n\n  destroy(instance: ComponentRef<T>): void {\n    const compsByType = this.components.get(instance.componentType);\n\n    if (compsByType && compsByType.length) {\n      const idx = compsByType.indexOf(instance);\n\n      if (idx > -1) {\n        const component = compsByType[idx];\n        component.destroy();\n        compsByType.splice(idx, 1);\n      }\n    }\n  }\n\n  destroyAll(): void {\n    this.destroyByType(this.type);\n  }\n\n  destroyByType(type: Type<T>): void {\n    const comps = this.components.get(type);\n\n    if (comps && comps.length) {\n      let i = comps.length - 1;\n      while (i >= 0) {\n        this.destroy(comps[i--]);\n      }\n    }\n  }\n\n  protected injectComponent(type: Type<T>, bindings: PartialBindings): ComponentRef<T> {\n    return this.injectionService.appendComponent(type, bindings);\n  }\n\n  protected assignDefaults(bindings: PartialBindings): PartialBindings {\n    const inputs = { ...this.defaults.inputs };\n    const outputs = { ...this.defaults.outputs };\n\n    if (!bindings.inputs && !bindings.outputs) {\n      bindings = { inputs: bindings };\n    }\n\n    if (inputs) {\n      bindings.inputs = { ...inputs, ...bindings.inputs };\n    }\n\n    if (outputs) {\n      bindings.outputs = { ...outputs, ...bindings.outputs };\n    }\n\n    return bindings;\n  }\n\n  protected register(type: Type<T>, component: ComponentRef<T>): void {\n    if (!this.components.has(type)) {\n      this.components.set(type, []);\n    }\n\n    const types = this.components.get(type);\n    types.push(component);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { InjectionService } from './injection.service';\nimport { TooltipContentComponent } from './tooltip.component';\nimport { InjectionRegisteryService } from './injection-registery.service';\n@Injectable()\nexport class TooltipService extends InjectionRegisteryService<TooltipContentComponent> {\n  type: any = TooltipContentComponent;\n\n  constructor(injectionService: InjectionService) {\n    super(injectionService);\n  }\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { TooltipService } from '../tooltip/tooltip.service';\n\n@Component({\n  providers: [TooltipService],\n  selector: 'ngx-charts-chart',\n  template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [@animationState]=\"'active'\" [@.disabled]=\"!animations\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === 'scaleLegend'\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === 'below'\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === 'legend'\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === 'below'\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [style({ opacity: 0 }), animate('500ms 100ms', style({ opacity: 1 }))])\n    ])\n  ]\n})\nexport class ChartComponent implements OnChanges {\n  @Input() view;\n  @Input() showLegend = false;\n  @Input() legendOptions: any;\n\n  // remove\n  @Input() data;\n  @Input() legendData;\n  @Input() legendType: any;\n  @Input() colors: any;\n  @Input() activeEntries: any[];\n  @Input() animations: boolean = true;\n\n  @Output() legendLabelClick: EventEmitter<any> = new EventEmitter();\n  @Output() legendLabelActivate: EventEmitter<any> = new EventEmitter();\n  @Output() legendLabelDeactivate: EventEmitter<any> = new EventEmitter();\n\n  chartWidth: any;\n  title: any;\n  legendWidth: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    let legendColumns = 0;\n    if (this.showLegend) {\n      this.legendType = this.getLegendType();\n\n      if (!this.legendOptions || this.legendOptions.position === 'right') {\n        if (this.legendType === 'scaleLegend') {\n          legendColumns = 1;\n        } else {\n          legendColumns = 2;\n        }\n      }\n    }\n\n    const chartColumns = 12 - legendColumns;\n\n    this.chartWidth = Math.floor((this.view[0] * chartColumns) / 12.0);\n    this.legendWidth =\n      !this.legendOptions || this.legendOptions.position === 'right'\n        ? Math.floor((this.view[0] * legendColumns) / 12.0)\n        : this.chartWidth;\n  }\n\n  getLegendType(): string {\n    if (this.legendOptions.scaleType === 'linear') {\n      return 'scaleLegend';\n    } else {\n      return 'legend';\n    }\n  }\n}\n","import { Output, EventEmitter, NgZone, Directive, ElementRef } from '@angular/core';\n\n/**\n * Visibility Observer\n */\n@Directive({\n  selector: 'visibility-observer'\n})\nexport class VisibilityObserver {\n  @Output() visible: EventEmitter<any> = new EventEmitter();\n\n  timeout: any;\n  isVisible: boolean = false;\n\n  constructor(private element: ElementRef, private zone: NgZone) {\n    this.runCheck();\n  }\n\n  destroy(): void {\n    clearTimeout(this.timeout);\n  }\n\n  onVisibilityChange(): void {\n    // trigger zone recalc for columns\n    this.zone.run(() => {\n      this.isVisible = true;\n      this.visible.emit(true);\n    });\n  }\n\n  runCheck(): void {\n    const check = () => {\n      if (!this.element) {\n        return;\n      }\n\n      // https://davidwalsh.name/offsetheight-visibility\n      const { offsetHeight, offsetWidth } = this.element.nativeElement;\n\n      if (offsetHeight && offsetWidth) {\n        clearTimeout(this.timeout);\n        this.onVisibilityChange();\n      } else {\n        clearTimeout(this.timeout);\n        this.zone.runOutsideAngular(() => {\n          this.timeout = setTimeout(() => check(), 100);\n        });\n      }\n    };\n\n    this.zone.runOutsideAngular(() => {\n      this.timeout = setTimeout(() => check());\n    });\n  }\n}\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport {\n  ElementRef,\n  NgZone,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  AfterViewInit,\n  OnDestroy,\n  OnChanges,\n  SimpleChanges,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\n\nimport { fromEvent as observableFromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { VisibilityObserver } from '../utils/visibility-observer';\n\n@Component({\n  selector: 'base-chart',\n  template: ` <div></div> `\n})\nexport class BaseChartComponent implements OnChanges, AfterViewInit, OnDestroy {\n  @Input() results: any;\n  @Input() view: [number, number];\n  @Input() scheme: any = 'cool';\n  @Input() schemeType: string = 'ordinal';\n  @Input() customColors: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  width: number;\n  height: number;\n  resizeSubscription: any;\n  visibilityObserver: VisibilityObserver;\n\n  constructor(\n    protected chartElement: ElementRef,\n    protected zone: NgZone,\n    protected cd: ChangeDetectorRef,\n    @Inject(PLATFORM_ID) public platformId: any\n  ) {}\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.animations = false;\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.bindWindowResizeEvent();\n\n    // listen for visibility of the element for hidden by default scenario\n    this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n    this.visibilityObserver.visible.subscribe(this.update.bind(this));\n  }\n\n  ngOnDestroy(): void {\n    this.unbindEvents();\n    if (this.visibilityObserver) {\n      this.visibilityObserver.visible.unsubscribe();\n      this.visibilityObserver.destroy();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    if (this.results) {\n      this.results = this.cloneData(this.results);\n    } else {\n      this.results = [];\n    }\n\n    if (this.view) {\n      this.width = this.view[0];\n      this.height = this.view[1];\n    } else {\n      const dims = this.getContainerDims();\n      if (dims) {\n        this.width = dims.width;\n        this.height = dims.height;\n      }\n    }\n\n    // default values if width or height are 0 or undefined\n    if (!this.width) {\n      this.width = 600;\n    }\n\n    if (!this.height) {\n      this.height = 400;\n    }\n\n    this.width = Math.floor(this.width);\n    this.height = Math.floor(this.height);\n\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n\n  getContainerDims(): any {\n    let width;\n    let height;\n    const hostElem = this.chartElement.nativeElement;\n\n    if (isPlatformBrowser(this.platformId) && hostElem.parentNode !== null) {\n      // Get the container dimensions\n      const dims = hostElem.parentNode.getBoundingClientRect();\n      width = dims.width;\n      height = dims.height;\n    }\n\n    if (width && height) {\n      return { width, height };\n    }\n\n    return null;\n  }\n\n  /**\n   * Converts all date objects that appear as name\n   * into formatted date strings\n   */\n  formatDates(): void {\n    for (let i = 0; i < this.results.length; i++) {\n      const g = this.results[i];\n      g.label = g.name;\n      if (g.label instanceof Date) {\n        g.label = g.label.toLocaleDateString();\n      }\n\n      if (g.series) {\n        for (let j = 0; j < g.series.length; j++) {\n          const d = g.series[j];\n          d.label = d.name;\n          if (d.label instanceof Date) {\n            d.label = d.label.toLocaleDateString();\n          }\n        }\n      }\n    }\n  }\n\n  protected unbindEvents(): void {\n    if (this.resizeSubscription) {\n      this.resizeSubscription.unsubscribe();\n    }\n  }\n\n  private bindWindowResizeEvent(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const source = observableFromEvent(window, 'resize');\n    const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n      this.update();\n      if (this.cd) {\n        this.cd.markForCheck();\n      }\n    });\n    this.resizeSubscription = subscription;\n  }\n\n  /**\n   * Clones the data into a new object\n   *\n   * @memberOf BaseChart\n   */\n  private cloneData(data): any {\n    const results = [];\n\n    for (const item of data) {\n      const copy = {\n        name: item['name']\n      };\n\n      if (item['value'] !== undefined) {\n        copy['value'] = item['value'];\n      }\n\n      if (item['series'] !== undefined) {\n        copy['series'] = [];\n        for (const seriesItem of item['series']) {\n          const seriesItemCopy = Object.assign({}, seriesItem);\n          copy['series'].push(seriesItemCopy);\n        }\n      }\n\n      if (item['extra'] !== undefined) {\n        copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n      }\n\n      results.push(copy);\n    }\n\n    return results;\n  }\n}\n","import { Component, Input, ElementRef, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-axis-label]',\n  template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AxisLabelComponent implements OnChanges {\n  @Input() orient;\n  @Input() label;\n  @Input() offset;\n  @Input() width;\n  @Input() height;\n\n  x: any;\n  y: any;\n  transform: any;\n  strokeWidth: any;\n  textAnchor: any;\n  element: ElementRef;\n  textHeight = 25;\n  margin = 5;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.strokeWidth = '0.01';\n    this.textAnchor = 'middle';\n    this.transform = '';\n\n    switch (this.orient) {\n      case 'top':\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n      case 'bottom':\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n      case 'left':\n        this.y = -(this.offset + this.textHeight + this.margin);\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n      case 'right':\n        this.y = this.offset + this.margin;\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n      default:\n    }\n  }\n}\n","export function trimLabel(s, max = 16): string {\n  if (typeof s !== 'string') {\n    if (typeof s === 'number') {\n      return s + '';\n    } else {\n      return '';\n    }\n  }\n\n  s = s.trim();\n  if (s.length <= max) {\n    return s;\n  } else {\n    return `${s.slice(0, max)}...`;\n  }\n}\n","export function reduceTicks(ticks, maxTicks) {\n  if (ticks.length > maxTicks) {\n    const reduced = [];\n    const modulus = Math.floor(ticks.length / maxTicks);\n    for (let i = 0; i < ticks.length; i++) {\n      if (i % modulus === 0) {\n        reduced.push(ticks[i]);\n      }\n    }\n    ticks = reduced;\n  }\n\n  return ticks;\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ElementRef,\n  ViewChild,\n  SimpleChanges,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Inject,\n  PLATFORM_ID\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { reduceTicks } from './ticks.helper';\n\n@Component({\n  selector: 'g[ngx-charts-x-axis-ticks]',\n  template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.text-anchor]=\"textAnchor\"\n          [attr.transform]=\"textTransform\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class XAxisTicksComponent implements OnChanges, AfterViewInit {\n  @Input() scale;\n  @Input() orient;\n  @Input() tickArguments = [5];\n  @Input() tickValues: any[];\n  @Input() tickStroke = '#ccc';\n  @Input() trimTicks: boolean = true;\n  @Input() maxTickLength: number = 16;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() gridLineHeight;\n  @Input() width;\n  @Input() rotateTicks: boolean = true;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  verticalSpacing: number = 20;\n  rotateLabels: boolean = false;\n  innerTickSize: number = 6;\n  outerTickSize: number = 6;\n  tickPadding: number = 3;\n  textAnchor: string = 'middle';\n  maxTicksLength: number = 0;\n  maxAllowedLength: number = 16;\n  adjustedScale: any;\n  textTransform: any;\n  ticks: any;\n  tickFormat: (o: any) => any;\n  height: number = 0;\n  approxHeight: number = 10;\n\n  @ViewChild('ticksel') ticksElement: ElementRef;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      // for SSR, use approximate value instead of measured\n      this.dimensionsChanged.emit({ height: this.approxHeight });\n      return;\n    }\n\n    const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n    if (height !== this.height) {\n      this.height = height;\n      this.dimensionsChanged.emit({ height: this.height });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update(): void {\n    const scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n\n    this.adjustedScale = this.scale.bandwidth\n      ? function (d) {\n          return this.scale(d) + this.scale.bandwidth() * 0.5;\n        }\n      : this.scale;\n\n    this.textTransform = '';\n    if (angle && angle !== 0) {\n      this.textTransform = `rotate(${angle})`;\n      this.textAnchor = 'end';\n      this.verticalSpacing = 10;\n    } else {\n      this.textAnchor = 'middle';\n    }\n\n    setTimeout(() => this.updateDims());\n  }\n\n  getRotationAngle(ticks): number {\n    let angle = 0;\n    this.maxTicksLength = 0;\n    for (let i = 0; i < ticks.length; i++) {\n      const tick = this.tickFormat(ticks[i]).toString();\n      let tickLength = tick.length;\n      if (this.trimTicks) {\n        tickLength = this.tickTrim(tick).length;\n      }\n\n      if (tickLength > this.maxTicksLength) {\n        this.maxTicksLength = tickLength;\n      }\n    }\n\n    const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n    const charWidth = 7; // need to measure this\n    const wordWidth = len * charWidth;\n\n    let baseWidth = wordWidth;\n    const maxBaseWidth = Math.floor(this.width / ticks.length);\n\n    // calculate optimal angle\n    while (baseWidth > maxBaseWidth && angle > -90) {\n      angle -= 30;\n      baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n    }\n\n    this.approxHeight = Math.max(Math.abs(Math.sin(angle * (Math.PI / 180)) * wordWidth), 10);\n\n    return angle;\n  }\n\n  getTicks() {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(100);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickWidth: number): number {\n    return Math.floor(this.width / tickWidth);\n  }\n\n  tickTransform(tick): string {\n    return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n  }\n\n  gridLineTransform(): string {\n    return `translate(0,${-this.verticalSpacing - 5})`;\n  }\n\n  tickTrim(label: string): string {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ViewChild,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\n\n@Component({\n  selector: 'g[ngx-charts-x-axis]',\n  template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"'bottom'\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class XAxisComponent implements OnChanges {\n  @Input() xScale;\n  @Input() dims;\n  @Input() trimTicks: boolean;\n  @Input() rotateTicks: boolean = true;\n  @Input() maxTickLength: number;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() showLabel;\n  @Input() labelText;\n  @Input() ticks: any[];\n  @Input() xAxisTickInterval;\n  @Input() xAxisTickCount: any;\n  @Input() xOrient: string = 'bottom';\n  @Input() xAxisOffset: number = 0;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  xAxisClassName: string = 'x axis';\n\n  tickArguments: any;\n  transform: any;\n  labelOffset: number = 0;\n  fill: string = 'none';\n  stroke: string = 'stroke';\n  tickStroke: string = '#ccc';\n  strokeWidth: string = 'none';\n  padding: number = 5;\n\n  @ViewChild(XAxisTicksComponent) ticksComponent: XAxisTicksComponent;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n\n    if (typeof this.xAxisTickCount !== 'undefined') {\n      this.tickArguments = [this.xAxisTickCount];\n    }\n  }\n\n  emitTicksHeight({ height }): void {\n    const newLabelOffset = height + 25 + 5;\n    if (newLabelOffset !== this.labelOffset) {\n      this.labelOffset = newLabelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ height });\n      }, 0);\n    }\n  }\n}\n","/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\nexport function roundedRect(x, y, w, h, r, [tl, tr, bl, br]: boolean[]) {\n  let retval = '';\n\n  w = Math.floor(w);\n  h = Math.floor(h);\n\n  w = w === 0 ? 1 : w;\n  h = h === 0 ? 1 : h;\n\n  retval = `M${[x + r, y]}`;\n  retval += `h${w - 2 * r}`;\n\n  if (tr) {\n    retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n  } else {\n    retval += `h${r}v${r}`;\n  }\n\n  retval += `v${h - 2 * r}`;\n\n  if (br) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n  } else {\n    retval += `v${r}h${-r}`;\n  }\n\n  retval += `h${2 * r - w}`;\n\n  if (bl) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n  } else {\n    retval += `h${-r}v${-r}`;\n  }\n\n  retval += `v${2 * r - h}`;\n\n  if (tl) {\n    retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n  } else {\n    retval += `v${-r}h${r}`;\n  }\n\n  retval += `z`;\n\n  return retval;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  OnChanges,\n  ElementRef,\n  ViewChild,\n  EventEmitter,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  SimpleChanges,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { reduceTicks } from './ticks.helper';\nimport { roundedRect } from '../../common/shape.helper';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Component({\n  selector: 'g[ngx-charts-y-axis-ticks]',\n  template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.dy]=\"dy\"\n          [attr.x]=\"x1\"\n          [attr.y]=\"y1\"\n          [attr.text-anchor]=\"textAnchor\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === 'left'\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === 'right'\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YAxisTicksComponent implements OnChanges, AfterViewInit {\n  @Input() scale;\n  @Input() orient;\n  @Input() tickArguments = [5];\n  @Input() tickValues: any[];\n  @Input() tickStroke = '#ccc';\n  @Input() trimTicks: boolean = true;\n  @Input() maxTickLength: number = 16;\n  @Input() tickFormatting;\n  @Input() showGridLines = false;\n  @Input() gridLineWidth;\n  @Input() height;\n  @Input() referenceLines;\n  @Input() showRefLabels: boolean = false;\n  @Input() showRefLines: boolean = false;\n\n  @Output() dimensionsChanged = new EventEmitter();\n\n  innerTickSize: any = 6;\n  tickPadding: any = 3;\n  tickSpacing: any;\n  verticalSpacing: number = 20;\n  textAnchor: any = 'middle';\n  dy: any;\n  x1: any;\n  x2: any;\n  y1: any;\n  y2: any;\n  adjustedScale: any;\n  transform: (o: any) => string;\n  tickFormat: (o: any) => string;\n  ticks: any;\n  width: number = 0;\n  outerTickSize: number = 6;\n  rotateLabels: boolean = false;\n  refMax: number;\n  refMin: number;\n  referenceLineLength: number = 0;\n  referenceAreaPath: string;\n\n  @ViewChild('ticksel') ticksElement: ElementRef;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngAfterViewInit(): void {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims(): void {\n    if (!isPlatformBrowser(this.platformId)) {\n      // for SSR, use approximate value instead of measured\n      this.width = this.getApproximateAxisWidth();\n      this.dimensionsChanged.emit({ width: this.width });\n      return;\n    }\n\n    const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n    if (width !== this.width) {\n      this.width = width;\n      this.dimensionsChanged.emit({ width });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update(): void {\n    let scale;\n    const sign = this.orient === 'top' || this.orient === 'right' ? -1 : 1;\n    this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n\n    scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    this.adjustedScale = scale.bandwidth\n      ? function (d) {\n          return scale(d) + scale.bandwidth() * 0.5;\n        }\n      : scale;\n\n    if (this.showRefLines && this.referenceLines) {\n      this.setReferencelines();\n    }\n\n    switch (this.orient) {\n      case 'top':\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n        this.textAnchor = 'middle';\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n      case 'bottom':\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n        this.textAnchor = 'middle';\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n      case 'left':\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n        this.textAnchor = 'end';\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n      case 'right':\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n        this.textAnchor = 'start';\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n      default:\n    }\n    setTimeout(() => this.updateDims());\n  }\n\n  setReferencelines(): void {\n    this.refMin = this.adjustedScale(\n      Math.min.apply(\n        null,\n        this.referenceLines.map(item => item.value)\n      )\n    );\n    this.refMax = this.adjustedScale(\n      Math.max.apply(\n        null,\n        this.referenceLines.map(item => item.value)\n      )\n    );\n    this.referenceLineLength = this.referenceLines.length;\n\n    this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [\n      false,\n      false,\n      false,\n      false\n    ]);\n  }\n\n  getTicks(): any {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(50);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickHeight: number): number {\n    return Math.floor(this.height / tickHeight);\n  }\n\n  tickTransform(tick): string {\n    return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n  }\n\n  gridLineTransform(): string {\n    return `translate(5,0)`;\n  }\n\n  tickTrim(label: string): string {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n\n  getApproximateAxisWidth() {\n    const maxChars = Math.max(...this.ticks.map(t => this.tickTrim(this.tickFormat(t)).length));\n    const charWidth = 7;\n    return maxChars * charWidth;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ViewChild,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\n\n@Component({\n  selector: 'g[ngx-charts-y-axis]',\n  template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class YAxisComponent implements OnChanges {\n  @Input() yScale;\n  @Input() dims;\n  @Input() trimTicks: boolean;\n  @Input() maxTickLength: number;\n  @Input() tickFormatting;\n  @Input() ticks: any[];\n  @Input() showGridLines = false;\n  @Input() showLabel;\n  @Input() labelText;\n  @Input() yAxisTickInterval;\n  @Input() yAxisTickCount: any;\n  @Input() yOrient: string = 'left';\n  @Input() referenceLines;\n  @Input() showRefLines;\n  @Input() showRefLabels;\n  @Input() yAxisOffset: number = 0;\n  @Output() dimensionsChanged = new EventEmitter();\n\n  yAxisClassName: string = 'y axis';\n  tickArguments: any;\n  offset: any;\n  transform: any;\n  labelOffset: number = 15;\n  fill: string = 'none';\n  stroke: string = '#CCC';\n  tickStroke: string = '#CCC';\n  strokeWidth: number = 1;\n  padding: number = 5;\n\n  @ViewChild(YAxisTicksComponent) ticksComponent: YAxisTicksComponent;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.offset = -(this.yAxisOffset + this.padding);\n    if (this.yOrient === 'right') {\n      this.labelOffset = 65;\n      this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n    } else {\n      this.offset = this.offset;\n      this.transform = `translate(${this.offset} , 0)`;\n    }\n\n    if (this.yAxisTickCount !== undefined) {\n      this.tickArguments = [this.yAxisTickCount];\n    }\n  }\n\n  emitTicksWidth({ width }): void {\n    if (width !== this.labelOffset && this.yOrient === 'right') {\n      this.labelOffset = width + this.labelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ width });\n      }, 0);\n    } else if (width !== this.labelOffset) {\n      this.labelOffset = width;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({ width });\n      }, 0);\n    }\n  }\n}\n","export enum StyleTypes {\n  popover = 'popover' as any,\n  tooltip = 'tooltip' as any\n}\n","export enum AlignmentTypes {\n  left = 'left' as any,\n  center = 'center' as any,\n  right = 'right' as any\n}\n","export enum ShowTypes {\n  all = 'all' as any,\n  focus = 'focus' as any,\n  mouseover = 'mouseover' as any\n}\n","import { NgModule } from '@angular/core';\nimport { AxisLabelComponent } from './axis-label.component';\nimport { XAxisComponent } from './x-axis.component';\nimport { XAxisTicksComponent } from './x-axis-ticks.component';\nimport { YAxisComponent } from './y-axis.component';\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n  exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n})\nexport class AxesModule {}\n","import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewContainerRef,\n  Renderer2,\n  OnDestroy\n} from '@angular/core';\n\nimport { PlacementTypes } from './position';\nimport { StyleTypes } from './style.type';\nimport { AlignmentTypes } from './alignment.type';\nimport { ShowTypes } from './show.type';\n\nimport { TooltipService } from './tooltip.service';\n\n@Directive({ selector: '[ngx-tooltip]' })\nexport class TooltipDirective implements OnDestroy {\n  @Input() tooltipCssClass: string = '';\n  @Input() tooltipTitle: string = '';\n  @Input() tooltipAppendToBody: boolean = true;\n  @Input() tooltipSpacing: number = 10;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipShowCaret: boolean = true;\n  @Input() tooltipPlacement: PlacementTypes = PlacementTypes.top;\n  @Input() tooltipAlignment: AlignmentTypes = AlignmentTypes.center;\n  @Input() tooltipType: StyleTypes = StyleTypes.popover;\n  @Input() tooltipCloseOnClickOutside: boolean = true;\n  @Input() tooltipCloseOnMouseLeave: boolean = true;\n  @Input() tooltipHideTimeout: number = 300;\n  @Input() tooltipShowTimeout: number = 100;\n  @Input() tooltipTemplate: any;\n  @Input() tooltipShowEvent: ShowTypes = ShowTypes.all;\n  @Input() tooltipContext: any;\n  @Input() tooltipImmediateExit: boolean = false;\n\n  @Output() show = new EventEmitter();\n  @Output() hide = new EventEmitter();\n\n  private get listensForFocus(): boolean {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n  }\n\n  private get listensForHover(): boolean {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n  }\n\n  private component: any;\n  private timeout: any;\n  private mouseLeaveContentEvent: any;\n  private mouseEnterContentEvent: any;\n  private documentClickEvent: any;\n\n  constructor(\n    private tooltipService: TooltipService,\n    private viewContainerRef: ViewContainerRef,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnDestroy(): void {\n    this.hideTooltip(true);\n  }\n\n  @HostListener('focusin')\n  onFocus(): void {\n    if (this.listensForFocus) {\n      this.showTooltip();\n    }\n  }\n\n  @HostListener('blur')\n  onBlur(): void {\n    if (this.listensForFocus) {\n      this.hideTooltip(true);\n    }\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    if (this.listensForHover) {\n      this.showTooltip();\n    }\n  }\n\n  @HostListener('mouseleave', ['$event.target'])\n  onMouseLeave(target): void {\n    if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n      clearTimeout(this.timeout);\n\n      if (this.component) {\n        const contentDom = this.component.instance.element.nativeElement;\n        const contains = contentDom.contains(target);\n        if (contains) return;\n      }\n\n      this.hideTooltip(this.tooltipImmediateExit);\n    }\n  }\n\n  @HostListener('click')\n  onMouseClick() {\n    if (this.listensForHover) {\n      this.hideTooltip(true);\n    }\n  }\n\n  showTooltip(immediate?: boolean): void {\n    if (this.component || this.tooltipDisabled) return;\n\n    const time = immediate\n      ? 0\n      : this.tooltipShowTimeout + (navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) ? 300 : 0);\n\n    clearTimeout(this.timeout);\n    this.timeout = setTimeout(() => {\n      this.tooltipService.destroyAll();\n\n      const options = this.createBoundOptions();\n      this.component = this.tooltipService.create(options);\n\n      // add a tiny timeout to avoid event re-triggers\n      setTimeout(() => {\n        if (this.component) {\n          this.addHideListeners(this.component.instance.element.nativeElement);\n        }\n      }, 10);\n\n      this.show.emit(true);\n    }, time);\n  }\n\n  addHideListeners(tooltip): void {\n    // on mouse enter, cancel the hide triggered by the leave\n    this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n      clearTimeout(this.timeout);\n    });\n\n    // content mouse leave listener\n    if (this.tooltipCloseOnMouseLeave) {\n      this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n        this.hideTooltip(this.tooltipImmediateExit);\n      });\n    }\n\n    // content close on click outside\n    if (this.tooltipCloseOnClickOutside) {\n      this.documentClickEvent = this.renderer.listen('window', 'click', event => {\n        const contains = tooltip.contains(event.target);\n        if (!contains) this.hideTooltip();\n      });\n    }\n  }\n\n  hideTooltip(immediate: boolean = false): void {\n    if (!this.component) return;\n\n    const destroyFn = () => {\n      // remove events\n      if (this.mouseLeaveContentEvent) this.mouseLeaveContentEvent();\n      if (this.mouseEnterContentEvent) this.mouseEnterContentEvent();\n      if (this.documentClickEvent) this.documentClickEvent();\n\n      // emit events\n      this.hide.emit(true);\n\n      // destroy component\n      this.tooltipService.destroy(this.component);\n      this.component = undefined;\n    };\n\n    clearTimeout(this.timeout);\n    if (!immediate) {\n      this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n    } else {\n      destroyFn();\n    }\n  }\n\n  private createBoundOptions(): any {\n    return {\n      title: this.tooltipTitle,\n      template: this.tooltipTemplate,\n      host: this.viewContainerRef.element,\n      placement: this.tooltipPlacement,\n      alignment: this.tooltipAlignment,\n      type: this.tooltipType,\n      showCaret: this.tooltipShowCaret,\n      cssClass: this.tooltipCssClass,\n      spacing: this.tooltipSpacing,\n      context: this.tooltipContext\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TooltipDirective } from './tooltip.directive';\nimport { TooltipContentComponent } from './tooltip.component';\nimport { TooltipService } from './tooltip.service';\n\nimport { InjectionService } from './injection.service';\n\n@NgModule({\n  declarations: [TooltipContentComponent, TooltipDirective],\n  providers: [InjectionService, TooltipService],\n  exports: [TooltipContentComponent, TooltipDirective],\n  imports: [CommonModule],\n  entryComponents: [TooltipContentComponent]\n})\nexport class TooltipModule {}\n","/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\nexport function formatLabel(label: any): string {\n  if (label instanceof Date) {\n    label = label.toLocaleDateString();\n  } else {\n    label = label.toLocaleString();\n  }\n\n  return label;\n}\n\n/**\n * Escapes a label.\n *\n * @export\n */\nexport function escapeLabel(label: any): string {\n  return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n    return {\n      '&': '&amp;',\n      // tslint:disable-next-line: quotemark\n      \"'\": '&#x27;',\n      '`': '&#x60;',\n      '\"': '&quot;',\n      '<': '&lt;',\n      '>': '&gt;'\n    }[match];\n  });\n}\n","const cache = {};\n\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\nexport function id(): string {\n  let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n\n  // append a 'a' because neo gets mad\n  newId = `a${newId}`;\n\n  // ensure not already used\n  if (!cache[newId]) {\n    cache[newId] = true;\n    return newId;\n  }\n\n  return id();\n}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  OnChanges,\n  OnInit,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { id } from '../utils/id';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'g[ngx-charts-circle-series]',\n  template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          orientation=\"vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          opacity: 0\n        }),\n        animate(250, style({ opacity: 1 }))\n      ])\n    ])\n  ]\n})\nexport class CircleSeriesComponent implements OnChanges, OnInit {\n  @Input() data;\n  @Input() type = 'standard';\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors: ColorHelper;\n  @Input() scaleType;\n  @Input() visibleValue;\n  @Input() activeEntries: any[];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  areaPath: any;\n  circle: any; // active circle\n  barVisible: boolean = false;\n  gradientId: string;\n  gradientFill: string;\n\n  ngOnInit() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.circle = this.getActiveCircle();\n  }\n\n  getActiveCircle(): {} {\n    const indexActiveDataPoint = this.data.series.findIndex(d => {\n      const label = d.name;\n      return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n    });\n\n    if (indexActiveDataPoint === -1) {\n      // No valid point is 'active/hovered over' at this moment.\n      return undefined;\n    }\n\n    return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n  }\n\n  mapDataPointToCircle(d: any, i: number): any {\n    const seriesName = this.data.name;\n\n    const value = d.value;\n    const label = d.name;\n    const tooltipLabel = formatLabel(label);\n\n    let cx;\n    if (this.scaleType === 'time') {\n      cx = this.xScale(label);\n    } else if (this.scaleType === 'linear') {\n      cx = this.xScale(Number(label));\n    } else {\n      cx = this.xScale(label);\n    }\n\n    const cy = this.yScale(this.type === 'standard' ? value : d.d1);\n    const radius = 5;\n    const height = this.yScale.range()[0] - cy;\n    const opacity = 1;\n\n    let color;\n    if (this.colors.scaleType === 'linear') {\n      if (this.type === 'standard') {\n        color = this.colors.getColor(value);\n      } else {\n        color = this.colors.getColor(d.d1);\n      }\n    } else {\n      color = this.colors.getColor(seriesName);\n    }\n\n    const data = Object.assign({}, d, {\n      series: seriesName,\n      value,\n      name: label\n    });\n\n    return {\n      classNames: [`circle-data-${i}`],\n      value,\n      label,\n      data,\n      cx,\n      cy,\n      radius,\n      height,\n      tooltipLabel,\n      color,\n      opacity,\n      seriesName,\n      gradientStops: this.getGradientStops(color),\n      min: d.min,\n      max: d.max\n    };\n  }\n\n  getTooltipText({ tooltipLabel, value, seriesName, min, max }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n  }\n\n  getTooltipMinMaxText(min: any, max: any) {\n    if (min !== undefined || max !== undefined) {\n      let result = ' (';\n      if (min !== undefined) {\n        if (max === undefined) {\n          result += '≥';\n        }\n        result += min.toLocaleString();\n        if (max !== undefined) {\n          result += ' - ';\n        }\n      } else if (max !== undefined) {\n        result += '≤';\n      }\n      if (max !== undefined) {\n        result += max.toLocaleString();\n      }\n      result += ')';\n      return result;\n    } else {\n      return '';\n    }\n  }\n\n  getGradientStops(color) {\n    return [\n      {\n        offset: 0,\n        color,\n        opacity: 0.2\n      },\n      {\n        offset: 100,\n        color,\n        opacity: 1\n      }\n    ];\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activateCircle(): void {\n    this.barVisible = true;\n    this.activate.emit({ name: this.data.name });\n  }\n\n  deactivateCircle(): void {\n    this.barVisible = false;\n    this.circle.opacity = 0;\n    this.deactivate.emit({ name: this.data.name });\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  HostListener\n} from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-circle]',\n  template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CircleComponent implements OnChanges {\n  @Input() cx;\n  @Input() cy;\n  @Input() r;\n  @Input() fill;\n  @Input() stroke;\n  @Input() data;\n  @Input() classNames;\n  @Input() circleOpacity;\n  @Input() pointerEvents;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  @HostListener('click')\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n    this.classNames += 'circle';\n  }\n}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-grid-panel]',\n  template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GridPanelComponent {\n  @Input() path;\n  @Input() width;\n  @Input() height;\n  @Input() x;\n  @Input() y;\n}\n","import { Component, SimpleChanges, Input, OnChanges, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-grid-panel-series]',\n  template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GridPanelSeriesComponent implements OnChanges {\n  gridPanels: any[];\n\n  @Input()\n  data;\n\n  @Input()\n  dims;\n\n  @Input()\n  xScale;\n\n  @Input()\n  yScale;\n\n  @Input()\n  orient;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.gridPanels = this.getGridPanels();\n  }\n\n  getGridPanels(): any[] {\n    return this.data.map(d => {\n      let offset;\n      let width;\n      let height;\n      let x;\n      let y;\n      let className = 'odd';\n\n      if (this.orient === 'vertical') {\n        const position: number = this.xScale(d.name);\n        const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = 'even';\n        }\n        offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n        width = this.xScale.bandwidth() + offset;\n        height = this.dims.height;\n        x = this.xScale(d.name) - offset / 2;\n        y = 0;\n      } else if (this.orient === 'horizontal') {\n        const position = this.yScale(d.name);\n        const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = 'even';\n        }\n        offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n\n        width = this.dims.width;\n        height = this.yScale.bandwidth() + offset;\n        x = 0;\n        y = this.yScale(d.name) - offset / 2;\n      }\n\n      return {\n        name: d.name,\n        class: className,\n        height,\n        width,\n        x,\n        y\n      };\n    });\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-svg-linear-gradient]',\n  template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SvgLinearGradientComponent implements OnChanges {\n  @Input() orientation = 'vertical';\n  @Input() name;\n  @Input() stops: any[];\n\n  x1: any;\n  x2: any;\n  y1: any;\n  y2: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.x1 = '0%';\n    this.x2 = '0%';\n    this.y1 = '0%';\n    this.y2 = '0%';\n\n    if (this.orientation === 'horizontal') {\n      this.x2 = '100%';\n    } else if (this.orientation === 'vertical') {\n      this.y1 = '100%';\n    }\n  }\n}\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'g[ngx-charts-svg-radial-gradient]',\n  template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SvgRadialGradientComponent implements OnChanges {\n  @Input() color: string;\n  @Input() name: string;\n  @Input() startOpacity: number;\n  @Input() endOpacity = 1;\n  @Input() cx: number = 0;\n  @Input() cy: number = 0;\n\n  @Input()\n  get stops(): any[] {\n    return this.stopsInput || this.stopsDefault;\n  }\n\n  set stops(value: any[]) {\n    this.stopsInput = value;\n  }\n\n  r: string;\n\n  private stopsInput: any[];\n  private stopsDefault: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.r = '30%';\n    if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n      this.stopsDefault = [\n        {\n          offset: 0,\n          color: this.color,\n          opacity: this.startOpacity\n        },\n        {\n          offset: 100,\n          color: this.color,\n          opacity: this.endOpacity\n        }\n      ];\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { select } from 'd3-selection';\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-area]',\n  template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AreaComponent implements OnChanges {\n  @Input() data;\n  @Input() path;\n  @Input() startingPath;\n  @Input() fill;\n  @Input() opacity = 1;\n  @Input() startOpacity = 0.5;\n  @Input() endOpacity = 1;\n  @Input() activeLabel;\n  @Input() gradient: boolean = false;\n  @Input() stops: any[];\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  element: HTMLElement;\n  gradientId: string;\n  gradientFill: string;\n  areaPath: string;\n  initialized: boolean = false;\n  gradientStops: any[];\n  hasGradient: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.initialized) {\n      this.loadAnimation();\n      this.initialized = true;\n    } else {\n      this.update();\n    }\n  }\n\n  update(): void {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n  }\n\n  loadAnimation(): void {\n    this.areaPath = this.startingPath;\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element).select('.area');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.startOpacity\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: this.endOpacity\n      }\n    ];\n  }\n}\n","// Robert Penner's easeOutExpo\nfunction easeOutExpo(t, b, c, d) {\n  return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;\n}\n\n/**\n * Counts from a number to the end incrementally.\n */\nexport function count(countFrom, countTo, countDecimals, countDuration, callback) {\n  const startVal = Number(countFrom);\n  const endVal = Number(countTo);\n  const countDown = startVal > endVal;\n  const decimals = Math.max(0, countDecimals);\n  const dec = Math.pow(10, decimals);\n  const duration = Number(countDuration) * 1000;\n  let startTime;\n\n  function runCount(timestamp) {\n    let frameVal;\n    const progress = timestamp - startTime;\n\n    if (countDown) {\n      frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n    } else {\n      frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n    }\n\n    if (countDown) {\n      frameVal = frameVal < endVal ? endVal : frameVal;\n    } else {\n      frameVal = frameVal > endVal ? endVal : frameVal;\n    }\n\n    frameVal = Math.round(frameVal * dec) / dec;\n\n    const tick = progress < duration;\n    callback({\n      value: frameVal,\n      progress,\n      timestamp,\n      finished: !tick\n    });\n\n    if (tick) {\n      return requestAnimationFrame(val => runCount(val));\n    }\n  }\n\n  return requestAnimationFrame(timestamp => {\n    startTime = timestamp;\n    return runCount(timestamp);\n  });\n}\n\n/**\n * Determine decimals places\n *\n * @export\n */\nexport function decimalChecker(countTo) {\n  const endVal = Number(countTo);\n\n  if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n    return 2;\n  }\n\n  return 0;\n}\n","declare let global: any;\n\n// If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\nlet root: any;\nif (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n}\n\n// tslint:disable-next-line:variable-name\nexport const MouseEvent = root.MouseEvent as MouseEvent & {\n  prototype?: MouseEvent;\n  new (typeArg: string, eventInitDict?: MouseEventInit): MouseEvent;\n};\n\nexport function createMouseEvent(name: string, bubbles: boolean = false, cancelable: boolean = true): MouseEvent {\n  // Calling new of an event does not work correctly on IE. The following is a tested workaround\n  // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n  if (typeof MouseEvent === 'function') {\n    // Sane browsers\n    return new MouseEvent(name, { bubbles, cancelable });\n  } else {\n    // IE\n    const event = document.createEvent('MouseEvent');\n    event.initEvent(name, bubbles, cancelable);\n    return event;\n  }\n}\n","import { Component, Input, Output, EventEmitter, ChangeDetectorRef, OnDestroy, ElementRef } from '@angular/core';\nimport { count, decimalChecker } from './count.helper';\n\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\n@Component({\n  selector: '[ngx-charts-count-up]',\n  template: ` {{ value }} `\n})\nexport class CountUpDirective implements OnDestroy {\n  @Input() countDuration: number = 1;\n  @Input() countPrefix: string = '';\n  @Input() countSuffix: string = '';\n  @Input() valueFormatting: any;\n\n  @Input()\n  set countDecimals(val: number) {\n    this._countDecimals = val;\n  }\n\n  get countDecimals(): number {\n    if (this._countDecimals) return this._countDecimals;\n    return decimalChecker(this.countTo);\n  }\n\n  @Input()\n  set countTo(val) {\n    this._countTo = parseFloat(val);\n    this.start();\n  }\n\n  get countTo(): any {\n    return this._countTo;\n  }\n\n  @Input()\n  set countFrom(val) {\n    this._countFrom = parseFloat(val);\n    this.start();\n  }\n\n  get countFrom(): any {\n    return this._countFrom;\n  }\n\n  @Output() countChange = new EventEmitter();\n  @Output() countFinish = new EventEmitter();\n\n  nativeElement: any;\n\n  value: any = '';\n  formattedValue: string;\n\n  private animationReq: any;\n\n  private _countDecimals: number = 0;\n  private _countTo: number = 0;\n  private _countFrom: number = 0;\n\n  constructor(private cd: ChangeDetectorRef, element: ElementRef) {\n    this.nativeElement = element.nativeElement;\n  }\n\n  ngOnDestroy(): void {\n    cancelAnimationFrame(this.animationReq);\n  }\n\n  start(): void {\n    cancelAnimationFrame(this.animationReq);\n\n    const valueFormatting =\n      this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n\n    const callback = ({ value, progress, finished }) => {\n      this.value = valueFormatting(value);\n      this.cd.markForCheck();\n      if (!finished) this.countChange.emit({ value: this.value, progress });\n      if (finished) this.countFinish.emit({ value: this.value, progress });\n    };\n\n    this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewChild,\n  ChangeDetectionStrategy,\n  TemplateRef,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { createMouseEvent } from '../events';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Component({\n  selector: 'g[ngx-charts-tooltip-area]',\n  template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'right'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition('inactive => active', [\n        style({\n          opacity: 0\n        }),\n        animate(250, style({ opacity: 0.7 }))\n      ]),\n      transition('active => inactive', [\n        style({\n          opacity: 0.7\n        }),\n        animate(250, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class TooltipArea {\n  anchorOpacity: number = 0;\n  anchorPos: number = -1;\n  anchorValues: any[] = [];\n  lastAnchorPos: number;\n\n  @Input() dims;\n  @Input() xSet;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() results;\n  @Input() colors;\n  @Input() showPercentage: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() hover = new EventEmitter();\n\n  @ViewChild('tooltipAnchor', { static: false }) tooltipAnchor;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {}\n\n  getValues(xVal): any[] {\n    const results = [];\n\n    for (const group of this.results) {\n      const item = group.series.find(d => d.name.toString() === xVal.toString());\n      let groupName = group.name;\n      if (groupName instanceof Date) {\n        groupName = groupName.toLocaleDateString();\n      }\n\n      if (item) {\n        const label = item.name;\n        let val = item.value;\n        if (this.showPercentage) {\n          val = (item.d1 - item.d0).toFixed(2) + '%';\n        }\n        let color;\n        if (this.colors.scaleType === 'linear') {\n          let v = val;\n          if (item.d1) {\n            v = item.d1;\n          }\n          color = this.colors.getColor(v);\n        } else {\n          color = this.colors.getColor(group.name);\n        }\n\n        const data = Object.assign({}, item, {\n          value: val,\n          name: label,\n          series: groupName,\n          min: item.min,\n          max: item.max,\n          color\n        });\n\n        results.push(data);\n      }\n    }\n\n    return results;\n  }\n\n  mouseMove(event) {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const xPos = event.pageX - event.target.getBoundingClientRect().left;\n\n    const closestIndex = this.findClosestPointIndex(xPos);\n    const closestPoint = this.xSet[closestIndex];\n    this.anchorPos = this.xScale(closestPoint);\n    this.anchorPos = Math.max(0, this.anchorPos);\n    this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n\n    this.anchorValues = this.getValues(closestPoint);\n    if (this.anchorPos !== this.lastAnchorPos) {\n      const ev = createMouseEvent('mouseleave');\n      this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n      this.anchorOpacity = 0.7;\n      this.hover.emit({\n        value: closestPoint\n      });\n      this.showTooltip();\n\n      this.lastAnchorPos = this.anchorPos;\n    }\n  }\n\n  findClosestPointIndex(xPos) {\n    let minIndex = 0;\n    let maxIndex = this.xSet.length - 1;\n    let minDiff = Number.MAX_VALUE;\n    let closestIndex = 0;\n\n    while (minIndex <= maxIndex) {\n      const currentIndex = ((minIndex + maxIndex) / 2) | 0;\n      const currentElement = this.xScale(this.xSet[currentIndex]);\n\n      const curDiff = Math.abs(currentElement - xPos);\n\n      if (curDiff < minDiff) {\n        minDiff = curDiff;\n        closestIndex = currentIndex;\n      }\n\n      if (currentElement < xPos) {\n        minIndex = currentIndex + 1;\n      } else if (currentElement > xPos) {\n        maxIndex = currentIndex - 1;\n      } else {\n        minDiff = 0;\n        closestIndex = currentIndex;\n        break;\n      }\n    }\n\n    return closestIndex;\n  }\n\n  showTooltip(): void {\n    const event = createMouseEvent('mouseenter');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n  }\n\n  hideTooltip(): void {\n    const event = createMouseEvent('mouseleave');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    this.anchorOpacity = 0;\n    this.lastAnchorPos = -1;\n  }\n\n  getToolTipText(tooltipItem: any): string {\n    let result: string = '';\n    if (tooltipItem.series !== undefined) {\n      result += tooltipItem.series;\n    } else {\n      result += '???';\n    }\n    result += ': ';\n    if (tooltipItem.value !== undefined) {\n      result += tooltipItem.value.toLocaleString();\n    }\n    if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n      result += ' (';\n      if (tooltipItem.min !== undefined) {\n        if (tooltipItem.max === undefined) {\n          result += '≥';\n        }\n        result += tooltipItem.min.toLocaleString();\n        if (tooltipItem.max !== undefined) {\n          result += ' - ';\n        }\n      } else if (tooltipItem.max !== undefined) {\n        result += '≤';\n      }\n      if (tooltipItem.max !== undefined) {\n        result += tooltipItem.max.toLocaleString();\n      }\n      result += ')';\n    }\n    return result;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport { brushX } from 'd3-brush';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport { id } from '../..//utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-timeline]',\n  template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `,\n  styleUrls: ['./timeline.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class Timeline implements OnChanges {\n  @Input() view;\n  @Input() state;\n  @Input() results;\n  @Input() scheme;\n  @Input() customColors;\n  @Input() legend;\n  @Input() miniChart;\n  @Input() autoScale;\n  @Input() scaleType;\n  @Input() height: number = 50;\n\n  @Output() select = new EventEmitter();\n  @Output() onDomainChange = new EventEmitter();\n\n  element: HTMLElement;\n  dims: any;\n  xDomain: any[];\n  xScale: any;\n  brush: any;\n  transform: string;\n  initialized: boolean = false;\n  filterId: any;\n  filter: any;\n\n  constructor(element: ElementRef, private cd: ChangeDetectorRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n\n    if (!this.initialized) {\n      this.addBrush();\n      this.initialized = true;\n    }\n  }\n\n  update(): void {\n    this.dims = this.getDims();\n    this.height = this.dims.height;\n    const offsetY = this.view[1] - this.height;\n\n    this.xDomain = this.getXDomain();\n    this.xScale = this.getXScale();\n\n    if (this.brush) {\n      this.updateBrush();\n    }\n\n    this.transform = `translate(0 , ${offsetY})`;\n\n    this.filterId = 'filter' + id().toString();\n    this.filter = `url(#${this.filterId})`;\n\n    this.cd.markForCheck();\n  }\n\n  getXDomain(): any[] {\n    let values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n\n    let domain = [];\n    if (this.scaleType === 'time') {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else {\n      domain = values;\n    }\n\n    return domain;\n  }\n\n  getXScale() {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\n    }\n\n    return scale;\n  }\n\n  addBrush(): void {\n    if (this.brush) return;\n\n    const height = this.height;\n    const width = this.view[0];\n\n    this.brush = brushX()\n      .extent([\n        [0, 0],\n        [width, height]\n      ])\n      .on('brush end', ({ d3selection }) => {\n        const selection = d3selection || this.xScale.range();\n        const newDomain = selection.map(this.xScale.invert);\n\n        this.onDomainChange.emit(newDomain);\n        this.cd.markForCheck();\n      });\n\n    select(this.element).select('.brush').call(this.brush);\n  }\n\n  updateBrush(): void {\n    if (!this.brush) return;\n\n    const height = this.height;\n    const width = this.view[0];\n\n    this.brush.extent([\n      [0, 0],\n      [width, height]\n    ]);\n    select(this.element).select('.brush').call(this.brush);\n\n    // clear hardcoded properties so they can be defined by CSS\n    select(this.element)\n      .select('.selection')\n      .attr('fill', undefined)\n      .attr('stroke', undefined)\n      .attr('fill-opacity', undefined);\n\n    this.cd.markForCheck();\n  }\n\n  getDims(): any {\n    const width = this.view[0];\n\n    const dims = {\n      width,\n      height: this.height\n    };\n\n    return dims;\n  }\n}\n","import {\n  Component,\n  Input,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectorRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport { formatLabel } from '../label.helper';\n\n@Component({\n  selector: 'ngx-charts-legend',\n  template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LegendComponent implements OnChanges {\n  @Input() data;\n  @Input() title;\n  @Input() colors;\n  @Input() height;\n  @Input() width;\n  @Input() activeEntries;\n  @Input() horizontal = false;\n\n  @Output() labelClick: EventEmitter<any> = new EventEmitter();\n  @Output() labelActivate: EventEmitter<any> = new EventEmitter();\n  @Output() labelDeactivate: EventEmitter<any> = new EventEmitter();\n\n  legendEntries: any[] = [];\n\n  constructor(private cd: ChangeDetectorRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.cd.markForCheck();\n    this.legendEntries = this.getLegendEntries();\n  }\n\n  getLegendEntries(): any[] {\n    const items = [];\n\n    for (const label of this.data) {\n      const formattedLabel = formatLabel(label);\n\n      const idx = items.findIndex(i => {\n        return i.label === formattedLabel;\n      });\n\n      if (idx === -1) {\n        items.push({\n          label,\n          formattedLabel,\n          color: this.colors.getColor(label)\n        });\n      }\n    }\n\n    return items;\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.label === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activate(item) {\n    this.labelActivate.emit(item);\n  }\n\n  deactivate(item) {\n    this.labelDeactivate.emit(item);\n  }\n\n  trackBy(index, item): string {\n    return item.label;\n  }\n}\n","import { Component, Input, Output, ChangeDetectionStrategy, HostListener, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'ngx-charts-legend-entry',\n  template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LegendEntryComponent {\n  @Input() color: string;\n  @Input() label: any;\n  @Input() formattedLabel: string;\n  @Input() isActive: boolean = false;\n\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n  @Output() toggle: EventEmitter<any> = new EventEmitter();\n\n  get trimmedLabel(): string {\n    return this.formattedLabel || '(empty)';\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit({ name: this.label });\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit({ name: this.label });\n  }\n}\n","import { Component, Input, OnChanges, ChangeDetectionStrategy, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n  selector: 'ngx-charts-scale-legend',\n  template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./scale-legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ScaleLegendComponent implements OnChanges {\n  @Input() valueRange;\n  @Input() colors;\n  @Input() height;\n  @Input() width;\n  @Input() horizontal = false;\n\n  gradient: any;\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n    const direction = this.horizontal ? 'right' : 'bottom';\n    this.gradient = `linear-gradient(to ${direction}, ${gradientValues})`;\n  }\n\n  /**\n   * Generates the string used in the gradient stylesheet properties\n   * @param colors array of colors\n   * @param splits array of splits on a scale of (0, 1)\n   */\n  gradientString(colors, splits): string {\n    // add the 100%\n    splits.push(1);\n    const pairs = [];\n    colors.reverse().forEach((c, i) => {\n      pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n    });\n\n    return pairs.join(', ');\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport { trimLabel } from '../trim-label.helper';\nimport { formatLabel } from '../label.helper';\n\n@Component({\n  selector: 'ngx-charts-advanced-legend',\n  template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./advanced-legend.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AdvancedLegendComponent implements OnChanges {\n  @Input() width: number;\n  @Input() data;\n  @Input() colors;\n  @Input() label: string = 'Total';\n  @Input() animations: boolean = true;\n\n  @Output() select: EventEmitter<any> = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  legendItems: any[] = [];\n  total: number;\n  roundedTotal: number;\n\n  @Input() valueFormatting: (value: number) => any;\n  @Input() labelFormatting: (value: string) => any = label => label;\n  @Input() percentageFormatting: (value: number) => any = percentage => percentage;\n\n  defaultValueFormatting: (value: number) => any = value => value.toLocaleString();\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getTotal(): number {\n    return this.data.map(d => d.value).reduce((sum, d) => sum + d, 0);\n  }\n\n  update(): void {\n    this.total = this.getTotal();\n    this.roundedTotal = this.total;\n\n    this.legendItems = this.getLegendItems();\n  }\n\n  getLegendItems(): any {\n    return this.data.map(d => {\n      const label = formatLabel(d.name);\n      const value = d.value;\n      const color = this.colors.getColor(label);\n      const percentage = this.total > 0 ? (value / this.total) * 100 : 0;\n      const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n\n      return {\n        _value: value,\n        data: d,\n        value,\n        color,\n        label: formattedLabel,\n        displayLabel: trimLabel(formattedLabel, 20),\n        origialLabel: d.name,\n        percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n      };\n    });\n  }\n\n  trackBy(item) {\n    return item.formattedLabel;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ChartComponent } from './charts/chart.component';\nimport { BaseChartComponent } from './base-chart.component';\nimport { AxesModule } from './axes/axes.module';\nimport { TooltipModule } from './tooltip/tooltip.module';\nimport { CircleSeriesComponent } from './circle-series.component';\nimport { CircleComponent } from './circle.component';\nimport { GridPanelComponent } from './grid-panel.component';\nimport { GridPanelSeriesComponent } from './grid-panel-series.component';\nimport { SvgLinearGradientComponent } from './svg-linear-gradient.component';\nimport { SvgRadialGradientComponent } from './svg-radial-gradient.component';\nimport { AreaComponent } from './area.component';\nimport { CountUpDirective } from './count/count.directive';\nimport { TooltipArea } from './tooltip-area.component';\nimport { Timeline } from './timeline/timeline.component';\nimport { VisibilityObserver } from '../utils/visibility-observer';\nimport { LegendComponent } from './legend/legend.component';\nimport { LegendEntryComponent } from './legend/legend-entry.component';\nimport { ScaleLegendComponent } from './legend/scale-legend.component';\nimport { AdvancedLegendComponent } from './legend/advanced-legend.component';\n\nconst COMPONENTS = [\n  AreaComponent,\n  BaseChartComponent,\n  CountUpDirective,\n  TooltipArea,\n  ChartComponent,\n  LegendComponent,\n  LegendEntryComponent,\n  ScaleLegendComponent,\n  CircleComponent,\n  CircleSeriesComponent,\n  GridPanelComponent,\n  GridPanelSeriesComponent,\n  SvgLinearGradientComponent,\n  SvgRadialGradientComponent,\n  Timeline,\n  AdvancedLegendComponent\n];\n\n@NgModule({\n  imports: [CommonModule, AxesModule, TooltipModule],\n  declarations: [...COMPONENTS, VisibilityObserver],\n  exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\n})\nexport class ChartCommonModule {}\n","export interface ViewDimensions {\n  width: number;\n  height: number;\n  xOffset: number;\n}\n\nexport function calculateViewDimensions({\n  width,\n  height,\n  margins,\n  showXAxis = false,\n  showYAxis = false,\n  xAxisHeight = 0,\n  yAxisWidth = 0,\n  showXLabel = false,\n  showYLabel = false,\n  showLegend = false,\n  legendType = 'ordinal',\n  legendPosition = 'right',\n  columns = 12\n}): ViewDimensions {\n  let xOffset = margins[3];\n  let chartWidth = width;\n  let chartHeight = height - margins[0] - margins[2];\n\n  if (showLegend && legendPosition === 'right') {\n    if (legendType === 'ordinal') {\n      columns -= 2;\n    } else {\n      columns -= 1;\n    }\n  }\n\n  chartWidth = (chartWidth * columns) / 12;\n\n  chartWidth = chartWidth - margins[1] - margins[3];\n\n  if (showXAxis) {\n    chartHeight -= 5;\n    chartHeight -= xAxisHeight;\n\n    if (showXLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartHeight -= offset;\n    }\n  }\n\n  if (showYAxis) {\n    chartWidth -= 5;\n    chartWidth -= yAxisWidth;\n    xOffset += yAxisWidth;\n    xOffset += 10;\n\n    if (showYLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartWidth -= offset;\n      xOffset += offset;\n    }\n  }\n\n  chartWidth = Math.max(0, chartWidth);\n  chartHeight = Math.max(0, chartHeight);\n\n  return {\n    width: Math.floor(chartWidth),\n    height: Math.floor(chartHeight),\n    xOffset: Math.floor(xOffset)\n  };\n}\n","export let colorSets = [\n  {\n    name: 'vivid',\n    selectable: true,\n    group: 'Ordinal',\n    domain: [\n      '#647c8a',\n      '#3f51b5',\n      '#2196f3',\n      '#00b862',\n      '#afdf0a',\n      '#a7b61a',\n      '#f3e562',\n      '#ff9800',\n      '#ff5722',\n      '#ff4514'\n    ]\n  },\n  {\n    name: 'natural',\n    selectable: true,\n    group: 'Ordinal',\n    domain: [\n      '#bf9d76',\n      '#e99450',\n      '#d89f59',\n      '#f2dfa7',\n      '#a5d7c6',\n      '#7794b1',\n      '#afafaf',\n      '#707160',\n      '#ba9383',\n      '#d9d5c3'\n    ]\n  },\n  {\n    name: 'cool',\n    selectable: true,\n    group: 'Ordinal',\n    domain: [\n      '#a8385d',\n      '#7aa3e5',\n      '#a27ea8',\n      '#aae3f5',\n      '#adcded',\n      '#a95963',\n      '#8796c0',\n      '#7ed3ed',\n      '#50abcc',\n      '#ad6886'\n    ]\n  },\n  {\n    name: 'fire',\n    selectable: true,\n    group: 'Ordinal',\n    domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n  },\n  {\n    name: 'solar',\n    selectable: true,\n    group: 'Continuous',\n    domain: [\n      '#fff8e1',\n      '#ffecb3',\n      '#ffe082',\n      '#ffd54f',\n      '#ffca28',\n      '#ffc107',\n      '#ffb300',\n      '#ffa000',\n      '#ff8f00',\n      '#ff6f00'\n    ]\n  },\n  {\n    name: 'air',\n    selectable: true,\n    group: 'Continuous',\n    domain: [\n      '#e1f5fe',\n      '#b3e5fc',\n      '#81d4fa',\n      '#4fc3f7',\n      '#29b6f6',\n      '#03a9f4',\n      '#039be5',\n      '#0288d1',\n      '#0277bd',\n      '#01579b'\n    ]\n  },\n  {\n    name: 'aqua',\n    selectable: true,\n    group: 'Continuous',\n    domain: [\n      '#e0f7fa',\n      '#b2ebf2',\n      '#80deea',\n      '#4dd0e1',\n      '#26c6da',\n      '#00bcd4',\n      '#00acc1',\n      '#0097a7',\n      '#00838f',\n      '#006064'\n    ]\n  },\n  {\n    name: 'flame',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#A10A28',\n      '#D3342D',\n      '#EF6D49',\n      '#FAAD67',\n      '#FDDE90',\n      '#DBED91',\n      '#A9D770',\n      '#6CBA67',\n      '#2C9653',\n      '#146738'\n    ]\n  },\n  {\n    name: 'ocean',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#1D68FB',\n      '#33C0FC',\n      '#4AFFFE',\n      '#AFFFFF',\n      '#FFFC63',\n      '#FDBD2D',\n      '#FC8A25',\n      '#FA4F1E',\n      '#FA141B',\n      '#BA38D1'\n    ]\n  },\n  {\n    name: 'forest',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#55C22D',\n      '#C1F33D',\n      '#3CC099',\n      '#AFFFFF',\n      '#8CFC9D',\n      '#76CFFA',\n      '#BA60FB',\n      '#EE6490',\n      '#C42A1C',\n      '#FC9F32'\n    ]\n  },\n  {\n    name: 'horizon',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#2597FB',\n      '#65EBFD',\n      '#99FDD0',\n      '#FCEE4B',\n      '#FEFCFA',\n      '#FDD6E3',\n      '#FCB1A8',\n      '#EF6F7B',\n      '#CB96E8',\n      '#EFDEE0'\n    ]\n  },\n  {\n    name: 'neons',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#FF3333',\n      '#FF33FF',\n      '#CC33FF',\n      '#0000FF',\n      '#33CCFF',\n      '#33FFFF',\n      '#33FF66',\n      '#CCFF33',\n      '#FFCC00',\n      '#FF6600'\n    ]\n  },\n  {\n    name: 'picnic',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#FAC51D',\n      '#66BD6D',\n      '#FAA026',\n      '#29BB9C',\n      '#E96B56',\n      '#55ACD2',\n      '#B7332F',\n      '#2C83C9',\n      '#9166B8',\n      '#92E7E8'\n    ]\n  },\n  {\n    name: 'night',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#2B1B5A',\n      '#501356',\n      '#183356',\n      '#28203F',\n      '#391B3C',\n      '#1E2B3C',\n      '#120634',\n      '#2D0432',\n      '#051932',\n      '#453080',\n      '#75267D',\n      '#2C507D',\n      '#4B3880',\n      '#752F7D',\n      '#35547D'\n    ]\n  },\n  {\n    name: 'nightLights',\n    selectable: false,\n    group: 'Ordinal',\n    domain: [\n      '#4e31a5',\n      '#9c25a7',\n      '#3065ab',\n      '#57468b',\n      '#904497',\n      '#46648b',\n      '#32118d',\n      '#a00fb3',\n      '#1052a2',\n      '#6e51bd',\n      '#b63cc3',\n      '#6c97cb',\n      '#8671c1',\n      '#b455be',\n      '#7496c3'\n    ]\n  }\n];\n","import { range } from 'd3-array';\nimport { scaleBand, scaleLinear, scaleOrdinal, scaleQuantile } from 'd3-scale';\n\nimport { colorSets } from '../utils/color-sets';\n\nexport class ColorHelper {\n  scale: any;\n  scaleType: any;\n  colorDomain: any[];\n  domain: any;\n  customColors: any;\n\n  constructor(scheme, type, domain, customColors?) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n    this.colorDomain = scheme.domain;\n    this.scaleType = type;\n    this.domain = domain;\n    this.customColors = customColors;\n\n    this.scale = this.generateColorScheme(scheme, type, this.domain);\n  }\n\n  generateColorScheme(scheme, type, domain) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n    let colorScale;\n    if (type === 'quantile') {\n      colorScale = scaleQuantile().range(scheme.domain).domain(domain);\n    } else if (type === 'ordinal') {\n      colorScale = scaleOrdinal().range(scheme.domain).domain(domain);\n    } else if (type === 'linear') {\n      // linear schemes must have at least 2 colors\n      const colorDomain = [...scheme.domain];\n      if (colorDomain.length === 1) {\n        colorDomain.push(colorDomain[0]);\n        this.colorDomain = colorDomain;\n      }\n\n      const points = range(0, 1, 1.0 / colorDomain.length);\n      colorScale = scaleLinear().domain(points).range(colorDomain);\n    }\n\n    return colorScale;\n  }\n\n  getColor(value) {\n    if (value === undefined || value === null) {\n      throw new Error('Value can not be null');\n    }\n    if (this.scaleType === 'linear') {\n      const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n\n      return this.scale(valueScale(value));\n    } else {\n      if (typeof this.customColors === 'function') {\n        return this.customColors(value);\n      }\n\n      const formattedValue = value.toString();\n      let found: any; // todo type customColors\n      if (this.customColors && this.customColors.length > 0) {\n        found = this.customColors.find(mapping => {\n          return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n        });\n      }\n\n      if (found) {\n        return found.value;\n      } else {\n        return this.scale(value);\n      }\n    }\n  }\n\n  getLinearGradientStops(value, start) {\n    if (start === undefined) {\n      start = this.domain[0];\n    }\n\n    const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n\n    const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\n\n    const endColor = this.getColor(value);\n\n    // generate the stops\n    const startVal = valueScale(start);\n    const startColor = this.getColor(start);\n\n    const endVal = valueScale(value);\n    let i = 1;\n    let currentVal = startVal;\n    const stops = [];\n\n    stops.push({\n      color: startColor,\n      offset: startVal,\n      originalOffset: startVal,\n      opacity: 1\n    });\n\n    while (currentVal < endVal && i < this.colorDomain.length) {\n      const color = this.colorDomain[i];\n      const offset = colorValueScale(color);\n      if (offset <= startVal) {\n        i++;\n        continue;\n      }\n\n      if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n        break;\n      }\n\n      stops.push({\n        color,\n        offset,\n        opacity: 1\n      });\n      currentVal = offset;\n      i++;\n    }\n\n    if (stops[stops.length - 1].offset < 100) {\n      stops.push({\n        color: endColor,\n        offset: endVal,\n        opacity: 1\n      });\n    }\n\n    if (endVal === startVal) {\n      stops[0].offset = 0;\n      stops[1].offset = 100;\n    } else {\n      // normalize the offsets into percentages\n      if (stops[stops.length - 1].offset !== 100) {\n        for (const s of stops) {\n          s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\n        }\n      }\n    }\n\n    return stops;\n  }\n}\n","/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\nexport function getUniqueXDomainValues(results: any[]): any[] {\n  const valueSet = new Set();\n  for (const result of results) {\n    for (const d of result.series) {\n      valueSet.add(d.name);\n    }\n  }\n  return Array.from(valueSet);\n}\n\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\nexport function getScaleType(values: any[], checkDateType = true): string {\n  if (checkDateType) {\n    const allDates = values.every(value => value instanceof Date);\n    if (allDates) {\n      return 'time';\n    }\n  }\n\n  const allNumbers = values.every(value => typeof value === 'number');\n  if (allNumbers) {\n    return 'linear';\n  }\n\n  return 'ordinal';\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-area-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartComponent extends BaseChartComponent {\n  @Input() legend;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() state;\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() baseValue: any = 'auto';\n  @Input() autoScale;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() timeline;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xSet: any;\n  xDomain: any;\n  yDomain: any;\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  clipPathId: string;\n  clipPath: string;\n  scaleType: string;\n  series: any;\n  margin = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === 'time') {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const values = [...domain];\n    if (!this.autoScale) {\n      values.push(0);\n    }\n    if (this.baseValue !== 'auto') {\n      values.push(this.baseValue);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime();\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear();\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getScaleType(values): string {\n    let date = true;\n    let num = true;\n    for (const value of values) {\n      if (!this.isDate(value)) {\n        date = false;\n      }\n      if (typeof value !== 'number') {\n        num = false;\n      }\n    }\n\n    if (date) {\n      return 'time';\n    }\n\n    if (num) {\n      return 'linear';\n    }\n\n    return 'ordinal';\n  }\n\n  isDate(value): boolean {\n    if (value instanceof Date) {\n      return true;\n    }\n\n    return false;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-area-chart-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              normalized=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                type=\"stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            normalized=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartNormalizedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() timeline;\n  @Input() gradient;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  scaleType: string;\n  xDomain: any[];\n  xSet: any[]; // the set of all values on the X Axis\n  yDomain: any[];\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  clipPathId: string;\n  clipPath: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  tooltipAreas: any[];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n\n      let total = 0;\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n        if (d) {\n          total += d.value;\n        }\n      }\n\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n\n        if (total > 0) {\n          d.d0 = (d.d0 * 100) / total;\n          d.d1 = (d.d1 * 100) / total;\n        } else {\n          d.d0 = 0;\n          d.d1 = 0;\n        }\n      }\n    }\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'time') {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    return [0, 100];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime();\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear();\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-area-chart-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              stacked=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                type=\"stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            stacked=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AreaChartStackedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() timeline;\n  @Input() gradient;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  scaleType: string;\n  xDomain: any[];\n  xSet: any[]; // the set of all values on the X Axis\n  yDomain: any[];\n  seriesDomain: any;\n  xScale: any;\n  yScale: any;\n  transform: string;\n  clipPathId: string;\n  clipPath: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n      }\n    }\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === 'time') {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let sum = 0;\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n          if (this.scaleType === 'time') {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n          return a === b;\n        });\n\n        if (d) {\n          sum += d.value;\n        }\n      }\n\n      domain.push(sum);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime();\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear();\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","export function sortLinear(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    if (direction === 'asc') {\n      return a[property] - b[property];\n    } else {\n      return b[property] - a[property];\n    }\n  });\n}\n\nexport function sortByDomain(data, property, direction = 'asc', domain) {\n  return data.sort((a, b) => {\n    const aVal = a[property];\n    const bVal = b[property];\n\n    const aIdx = domain.indexOf(aVal);\n    const bIdx = domain.indexOf(bVal);\n\n    if (direction === 'asc') {\n      return aIdx - bIdx;\n    } else {\n      return bIdx - aIdx;\n    }\n  });\n}\n\nexport function sortByTime(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    const aDate = a[property].getTime();\n    const bDate = b[property].getTime();\n\n    if (direction === 'asc') {\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    } else {\n      if (aDate > bDate) return -1;\n      if (bDate > aDate) return 1;\n      return 0;\n    }\n  });\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { area } from 'd3-shape';\n\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\n\n@Component({\n  selector: 'g[ngx-charts-area-series]',\n  template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AreaSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() baseValue: any = 'auto';\n  @Input() colors;\n  @Input() scaleType;\n  @Input() stacked: boolean = false;\n  @Input() normalized: boolean = false;\n  @Input() gradient;\n  @Input() curve;\n  @Input() activeEntries: any[];\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  opacity: number;\n  path: string;\n  startingPath: string;\n\n  hasGradient: boolean;\n  gradientStops: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradient();\n\n    let currentArea;\n    let startingArea;\n\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    if (this.stacked || this.normalized) {\n      currentArea = area<any>()\n        .x(xProperty)\n        .y0((d, i) => this.yScale(d.d0))\n        .y1((d, i) => this.yScale(d.d1));\n\n      startingArea = area<any>()\n        .x(xProperty)\n        .y0(d => this.yScale.range()[0])\n        .y1(d => this.yScale.range()[0]);\n    } else {\n      currentArea = area<any>()\n        .x(xProperty)\n        .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n        .y1(d => this.yScale(d.value));\n\n      startingArea = area<any>()\n        .x(xProperty)\n        .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n        .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));\n    }\n\n    currentArea.curve(this.curve);\n    startingArea.curve(this.curve);\n\n    this.opacity = 0.8;\n\n    let data = this.data.series;\n    if (this.scaleType === 'linear') {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === 'time') {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    this.path = currentArea(data);\n    this.startingPath = startingArea(data);\n  }\n\n  updateGradient() {\n    if (this.colors.scaleType === 'linear') {\n      this.hasGradient = true;\n      if (this.stacked || this.normalized) {\n        const d0values = this.data.series.map(d => d.d0);\n        const d1values = this.data.series.map(d => d.d1);\n        const max = Math.max(...d1values);\n        const min = Math.min(...d0values);\n        this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      } else {\n        const values = this.data.series.map(d => d.value);\n        const max = Math.max(...values);\n        this.gradientStops = this.colors.getLinearGradientStops(max);\n      }\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n    }\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AreaChartComponent } from './area-chart.component';\nimport { AreaChartNormalizedComponent } from './area-chart-normalized.component';\nimport { AreaChartStackedComponent } from './area-chart-stacked.component';\nimport { AreaSeriesComponent } from './area-series.component';\nimport { ChartCommonModule } from '../common/chart-common.module';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n  exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n})\nexport class AreaChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { select } from 'd3-selection';\nimport { roundedRect } from '../common/shape.helper';\nimport { id } from '../utils/id';\n\n/* tslint:disable-next-line */\nimport { transition } from 'd3-transition';\n\n@Component({\n  selector: 'g[ngx-charts-bar]',\n  template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BarComponent implements OnChanges {\n  @Input() fill;\n  @Input() data: any;\n  @Input() width: number;\n  @Input() height: number;\n  @Input() x: number;\n  @Input() y: number;\n  @Input() orientation;\n  @Input() roundEdges: boolean = true;\n  @Input() gradient: boolean = false;\n  @Input() offset = 0;\n  @Input() isActive: boolean = false;\n  @Input() stops: any[];\n  @Input() animations: boolean = true;\n  @Input() ariaLabel: string;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  element: any;\n  path: any;\n  gradientId: any;\n  gradientFill: any;\n  startOpacity: any;\n  gradientStops: any[];\n  hasGradient: boolean = false;\n  hideBar: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.roundEdges) {\n      this.loadAnimation();\n    }\n    this.update();\n  }\n\n  update(): void {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n    this.checkToHideBar();\n  }\n\n  loadAnimation(): void {\n    this.path = this.getStartingPath();\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element).select('.bar');\n    const path = this.getPath();\n    if (this.animations) {\n      node.transition().duration(500).attr('d', path);\n    } else {\n      node.attr('d', path);\n    }\n  }\n\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.getStartOpacity()\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n\n  getStartingPath() {\n    if (!this.animations) {\n      return this.getPath();\n    }\n\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === 'vertical') {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === 'horizontal') {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    } else {\n      if (this.orientation === 'vertical') {\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === 'horizontal') {\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    }\n\n    return path;\n  }\n\n  getPath() {\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === 'vertical') {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      } else if (this.orientation === 'horizontal') {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      }\n    } else {\n      path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n    }\n\n    return path;\n  }\n\n  getRadius(): number {\n    let radius = 0;\n\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n    }\n\n    return radius;\n  }\n\n  getStartOpacity(): number {\n    if (this.roundEdges) {\n      return 0.2;\n    } else {\n      return 0.5;\n    }\n  }\n\n  get edges() {\n    let edges = [false, false, false, false];\n    if (this.roundEdges) {\n      if (this.orientation === 'vertical') {\n        if (this.data.value > 0) {\n          edges = [true, true, false, false];\n        } else {\n          edges = [false, false, true, true];\n        }\n      } else if (this.orientation === 'horizontal') {\n        if (this.data.value > 0) {\n          edges = [false, true, false, true];\n        } else {\n          edges = [true, false, true, false];\n        }\n      }\n    }\n    return edges;\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n\n  private checkToHideBar() {\n    this.hideBar =\n      this.noBarWhenZero &&\n      ((this.orientation === 'vertical' && this.height === 0) ||\n        (this.orientation === 'horizontal' && this.width === 0));\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class BarHorizontalComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() xScaleMax: number;\n  @Input() xScaleMin: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  yScale: any;\n  xScale: any;\n  xDomain: any;\n  yDomain: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getXScale(): any {\n    this.xDomain = this.getXDomain();\n\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(): any {\n    this.yDomain = this.getYDomain();\n    const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\n  }\n\n  getXDomain(): any[] {\n    const values = this.results.map(d => d.value);\n    const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n    return [min, max];\n  }\n\n  getYDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.yDomain;\n    } else {\n      domain = this.xDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-2d',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          orient=\"horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            [xScale]=\"valueScale\"\n            [activeEntries]=\"activeEntries\"\n            [yScale]=\"innerScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontal2DComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() groupPadding = 16;\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() xScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valuesDomain: any[];\n  groupScale: any;\n  innerScale: any;\n  valueScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valuesDomain = this.getValueDomain();\n\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.height])\n      .paddingInner(spacing)\n      .paddingOuter(spacing / 2)\n      .domain(this.groupDomain);\n  }\n\n  getInnerScale(): any {\n    const height = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\n  }\n\n  getValueScale(): any {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valuesDomain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n    return [min, max];\n  }\n\n  groupTransform(group) {\n    return `translate(0, ${this.groupScale(group.label)})`;\n  }\n\n  onClick(data, group?): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valuesDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valuesDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            type=\"normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontalNormalizedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    return [0, 100];\n  }\n\n  getYScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getXScale(): any {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group): string {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group?): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\n\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-horizontal-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-horizontal\n            type=\"stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [activeEntries]=\"activeEntries\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarHorizontalStackedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() xScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxWidth: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n    domain.push(smallest);\n    domain.push(biggest);\n\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getYScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getXScale(): any {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group): string {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group?): void {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class BarVerticalComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() yScaleMax: number;\n  @Input() yScaleMin: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xScale: any;\n  yScale: any;\n  xDomain: any;\n  yDomain: any;\n  transform: string;\n  colors: ColorHelper;\n  margin: any[] = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getXScale(): any {\n    this.xDomain = this.getXDomain();\n    const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\n  }\n\n  getYScale(): any {\n    this.yDomain = this.getYDomain();\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getXDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  getYDomain(): [number, number] {\n    const values = this.results.map(d => d.value);\n\n    let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      min = Math.min(min, ...this.yAxisTicks);\n    }\n\n    let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      max = Math.max(max, ...this.yAxisTicks);\n    }\n    return [min, max];\n  }\n\n  onClick(data: DataItem) {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.xDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxHeightChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-2d',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          orient=\"vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVertical2DComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() scaleType = 'ordinal';\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() groupPadding = 16;\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() roundEdges: boolean = true;\n  @Input() yScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valuesDomain: any[];\n  groupScale: any;\n  innerScale: any;\n  valueScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valuesDomain = this.getValueDomain();\n\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  getGroupScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n\n    return scaleBand()\n      .rangeRound([0, this.dims.width])\n      .paddingInner(spacing)\n      .paddingOuter(spacing / 2)\n      .domain(this.groupDomain);\n  }\n\n  getInnerScale(): any {\n    const width = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\n  }\n\n  getValueScale(): any {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valuesDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n\n    return [min, max];\n  }\n\n  groupTransform(group) {\n    return `translate(${this.groupScale(group.label)}, 0)`;\n  }\n\n  onClick(data, group?) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valuesDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valuesDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-normalized',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            type=\"normalized\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVerticalNormalizedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    return [0, 100];\n  }\n\n  getXScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getYScale(): any {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name)}, 0)`;\n  }\n\n  onClick(data, group?) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import { Component, Input, Output, EventEmitter, OnChanges, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { DataItem } from '../models/chart-data.model';\n\nexport enum D0Types {\n  positive = 'positive',\n  negative = 'negative'\n}\n\n@Component({\n  selector: 'g[ngx-charts-series-vertical]',\n  template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"'vertical'\"\n      [roundEdges]=\"bar.roundEdges\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [isActive]=\"isActive(bar.data)\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n      [animations]=\"animations\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"'vertical'\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(500, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class SeriesVerticalComponent implements OnChanges {\n  @Input() dims;\n  @Input() type = 'standard';\n  @Input() series;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() seriesName: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() roundEdges: boolean;\n  @Input() animations: boolean = true;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dataLabelHeightChanged = new EventEmitter();\n\n  tooltipPlacement: string;\n  tooltipType: string;\n\n  bars: any;\n  x: any;\n  y: any;\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\n\n  ngOnChanges(changes): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateTooltipSettings();\n    let width;\n    if (this.series.length) {\n      width = this.xScale.bandwidth();\n    }\n    width = Math.round(width);\n    const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type = D0Types.positive;\n\n    let total;\n    if (this.type === 'normalized') {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n\n    this.bars = this.series.map((d, index) => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n\n      const bar: any = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        width,\n        formattedLabel,\n        height: 0,\n        x: 0,\n        y: 0\n      };\n\n      if (this.type === 'standard') {\n        bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n        bar.x = this.xScale(label);\n\n        if (value < 0) {\n          bar.y = this.yScale(0);\n        } else {\n          bar.y = this.yScale(value);\n        }\n      } else if (this.type === 'stacked') {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === 'normalized') {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = (offset0 * 100) / total;\n          offset1 = (offset1 * 100) / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === 'ordinal') {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === 'standard') {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n      if (this.seriesName) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled\n        ? undefined\n        : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${\n          this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()\n        }</span>\n      `;\n\n      return bar;\n    });\n\n    this.updateDataLabels();\n  }\n\n  updateDataLabels() {\n    if (this.type === 'stacked') {\n      this.barsForDataLabels = [];\n      const section: any = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n      if (section.total > 0) {\n        section.height = this.yScale(totalPositive);\n      } else {\n        section.height = this.yScale(totalNegative);\n      }\n      section.width = this.xScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section: any = {};\n        section.series = this.seriesName ? this.seriesName : d.label;\n        section.total = d.value;\n        section.x = this.xScale(d.label);\n        section.y = this.yScale(0);\n        section.height = this.yScale(section.total) - this.yScale(0);\n        section.width = this.xScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\n    this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  getLabel(dataItem): string {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n    return dataItem.name;\n  }\n\n  trackBy(index, bar): string {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleBand, scaleLinear } from 'd3-scale';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\n\n@Component({\n  selector: 'ngx-charts-bar-vertical-stacked',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [@animationState]=\"'active'\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            type=\"stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1,\n          transform: '*'\n        }),\n        animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n      ])\n    ])\n  ]\n})\nexport class BarVerticalStackedComponent extends BaseChartComponent {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() barPadding = 8;\n  @Input() roundDomains: boolean = false;\n  @Input() yScaleMax: number;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  groupDomain: any[];\n  innerDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  transform: string;\n  tickFormatting: (label: string) => string;\n  colors: ColorHelper;\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  dataLabelMaxHeight: any = { negative: 0, positive: 0 };\n\n  update(): void {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n    domain.push(smallest);\n    domain.push(biggest);\n\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getXScale(): any {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getYScale(): any {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name) || 0}, 0)`;\n  }\n\n  onClick(data, group?) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({ width }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { D0Types } from './series-vertical.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'g[ngx-charts-series-horizontal]',\n  template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"'horizontal'\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"'horizontal'\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(500, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class SeriesHorizontal implements OnChanges {\n  bars: any;\n  x: any;\n  y: any;\n  barsForDataLabels: Array<{ x: number; y: number; width: number; height: number; total: number; series: string }> = [];\n\n  @Input() dims;\n  @Input() type = 'standard';\n  @Input() series;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() seriesName: string;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() roundEdges: boolean;\n  @Input() animations: boolean = true;\n  @Input() showDataLabel: boolean = false;\n  @Input() dataLabelFormatting: any;\n  @Input() noBarWhenZero: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dataLabelWidthChanged = new EventEmitter();\n\n  tooltipPlacement: string;\n  tooltipType: string;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateTooltipSettings();\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type: D0Types;\n    d0Type = D0Types.positive;\n    let total;\n    if (this.type === 'normalized') {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n    const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n\n    this.bars = this.series.map((d, index) => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n\n      const bar: any = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        formattedLabel\n      };\n\n      bar.height = this.yScale.bandwidth();\n\n      if (this.type === 'standard') {\n        bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n        if (value < 0) {\n          bar.x = this.xScale(value);\n        } else {\n          bar.x = this.xScale(xScaleMin);\n        }\n        bar.y = this.yScale(label);\n      } else if (this.type === 'stacked') {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === 'normalized') {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = (offset0 * 100) / total;\n          offset1 = (offset1 * 100) / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === 'ordinal') {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === 'standard') {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n      if (this.seriesName) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled\n        ? undefined\n        : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${\n          this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()\n        }</span>\n      `;\n\n      return bar;\n    });\n\n    this.updateDataLabels();\n  }\n\n  updateDataLabels() {\n    if (this.type === 'stacked') {\n      this.barsForDataLabels = [];\n      const section: any = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n      // if total is positive then we show it on the right, otherwise on the left\n      if (section.total > 0) {\n        section.width = this.xScale(totalPositive);\n      } else {\n        section.width = this.xScale(totalNegative);\n      }\n      section.height = this.yScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section: any = {};\n        section.series = this.seriesName ? this.seriesName : d.label;\n        section.total = d.value;\n        section.x = this.xScale(0);\n        section.y = this.yScale(d.label);\n        section.width = this.xScale(section.total) - this.xScale(0);\n        section.height = this.yScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : 'top';\n    this.tooltipType = this.tooltipDisabled ? undefined : 'tooltip';\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  getLabel(dataItem): string {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n    return dataItem.name;\n  }\n\n  trackBy(index, bar) {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n\n  click(data: DataItem): void {\n    this.select.emit(data);\n  }\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { formatLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-bar-label]',\n  template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `,\n  styleUrls: ['./bar-label.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BarLabelComponent implements OnChanges {\n  @Input() value;\n  @Input() valueFormatting: any;\n  @Input() barX;\n  @Input() barY;\n  @Input() barWidth;\n  @Input() barHeight;\n  @Input() orientation;\n\n  @Output() dimensionsChanged: EventEmitter<any> = new EventEmitter();\n\n  element: any;\n  x: number;\n  y: number;\n  horizontalPadding: number = 2;\n  verticalPadding: number = 5;\n  formatedValue: string;\n  transform: string;\n  textAnchor: string;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getSize(): any {\n    const h = this.element.getBoundingClientRect().height;\n    const w = this.element.getBoundingClientRect().width;\n    return { height: h, width: w, negative: this.value < 0 };\n  }\n\n  ngAfterViewInit() {\n    this.dimensionsChanged.emit(this.getSize());\n  }\n\n  update(): void {\n    if (this.valueFormatting) {\n      this.formatedValue = this.valueFormatting(this.value);\n    } else {\n      this.formatedValue = formatLabel(this.value);\n    }\n\n    if (this.orientation === 'horizontal') {\n      this.x = this.barX + this.barWidth;\n      // if the value is negative then it's on the left of the x0.\n      // we need to put the data label in front of the bar\n      if (this.value < 0) {\n        this.x = this.x - this.horizontalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.x = this.x + this.horizontalPadding;\n        this.textAnchor = 'start';\n      }\n      this.y = this.barY + this.barHeight / 2;\n    } else {\n      // orientation must be \"vertical\"\n      this.x = this.barX + this.barWidth / 2;\n      this.y = this.barY + this.barHeight;\n\n      if (this.value < 0) {\n        this.y = this.y + this.verticalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.y = this.y - this.verticalPadding;\n        this.textAnchor = 'start';\n      }\n      this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { BarComponent } from './bar.component';\nimport { BarHorizontalComponent } from './bar-horizontal.component';\nimport { BarHorizontal2DComponent } from './bar-horizontal-2d.component';\nimport { BarHorizontalNormalizedComponent } from './bar-horizontal-normalized.component';\nimport { BarHorizontalStackedComponent } from './bar-horizontal-stacked.component';\nimport { BarVerticalComponent } from './bar-vertical.component';\nimport { BarVertical2DComponent } from './bar-vertical-2d.component';\nimport { BarVerticalNormalizedComponent } from './bar-vertical-normalized.component';\nimport { BarVerticalStackedComponent } from './bar-vertical-stacked.component';\nimport { SeriesHorizontal } from './series-horizontal.component';\nimport { SeriesVerticalComponent } from './series-vertical.component';\nimport { BarLabelComponent } from './bar-label.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [\n    BarComponent,\n    BarHorizontalComponent,\n    BarHorizontal2DComponent,\n    BarHorizontalNormalizedComponent,\n    BarHorizontalStackedComponent,\n    BarVerticalComponent,\n    BarVertical2DComponent,\n    BarVerticalNormalizedComponent,\n    BarVerticalStackedComponent,\n    BarLabelComponent,\n    SeriesHorizontal,\n    SeriesVerticalComponent\n  ],\n  exports: [\n    BarComponent,\n    BarHorizontalComponent,\n    BarHorizontal2DComponent,\n    BarHorizontalNormalizedComponent,\n    BarHorizontalStackedComponent,\n    BarVerticalComponent,\n    BarVertical2DComponent,\n    BarVerticalNormalizedComponent,\n    BarVerticalStackedComponent,\n    BarLabelComponent,\n    SeriesHorizontal,\n    SeriesVerticalComponent\n  ]\n})\nexport class BarChartModule {}\n","import { scaleLinear, scalePoint, scaleTime } from 'd3-scale';\n\nexport function getDomain(values, scaleType, autoScale, minVal?, maxVal?): number[] {\n  let domain: number[] = [];\n  if (scaleType === 'linear') {\n    values = values.map(v => Number(v));\n    if (!autoScale) {\n      values.push(0);\n    }\n  }\n\n  if (scaleType === 'time' || scaleType === 'linear') {\n    const min = minVal ? minVal : Math.min(...values);\n    const max = maxVal ? maxVal : Math.max(...values);\n\n    domain = [min, max];\n  } else {\n    domain = values;\n  }\n\n  return domain;\n}\n\nexport function getScale(domain, range: number[], scaleType, roundDomains): any {\n  let scale: any;\n\n  if (scaleType === 'time') {\n    scale = scaleTime().range(range).domain(domain);\n  } else if (scaleType === 'linear') {\n    scale = scaleLinear().range(range).domain(domain);\n\n    if (roundDomains) {\n      scale = scale.nice();\n    }\n  } else if (scaleType === 'ordinal') {\n    scale = scalePoint().range([range[0], range[1]]).domain(domain);\n  }\n\n  return scale;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { getScaleType } from '../common/domain.helper';\nimport { getDomain, getScale } from './bubble-chart.utils';\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'ngx-charts-bubble-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class BubbleChartComponent extends BaseChartComponent {\n  @Input() showGridLines: boolean = true;\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis: boolean = true;\n  @Input() yAxis: boolean = true;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() maxRadius = 10;\n  @Input() minRadius = 3;\n  @Input() autoScale: boolean;\n  @Input() schemeType = 'ordinal';\n  @Input() tooltipDisabled: boolean = false;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: any;\n  @Input() yScaleMax: any;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  colors: ColorHelper;\n  scaleType = 'linear';\n  margin = [10, 20, 10, 20];\n  bubblePadding = [0, 0, 0, 0];\n  data: any;\n\n  legendOptions: any;\n  transform: string;\n\n  clipPath: string;\n  clipPathId: string;\n\n  seriesDomain: any[];\n  xDomain: any[];\n  yDomain: any[];\n  rDomain: number[];\n\n  xScaleType: string;\n  yScaleType: string;\n\n  yScale: any;\n  xScale: any;\n  rScale: any;\n\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n\n  activeEntries: any[] = [];\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    this.seriesDomain = this.results.map(d => d.name);\n    this.rDomain = this.getRDomain();\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n\n    this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n\n    const colorDomain = this.schemeType === 'ordinal' ? this.seriesDomain : this.rDomain;\n    this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n\n    this.data = this.results;\n\n    this.minRadius = Math.max(this.minRadius, 1);\n    this.maxRadius = Math.max(this.maxRadius, 1);\n\n    this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n\n    this.bubblePadding = [0, 0, 0, 0];\n    this.setScales();\n\n    this.bubblePadding = this.getBubblePadding();\n    this.setScales();\n\n    this.legendOptions = this.getLegendOptions();\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.deactivateAll();\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  getBubblePadding() {\n    let yMin = 0;\n    let xMin = 0;\n    let yMax = this.dims.height;\n    let xMax = this.dims.width;\n\n    for (const s of this.data) {\n      for (const d of s.series) {\n        const r = this.rScale(d.r);\n        const cx = this.xScaleType === 'linear' ? this.xScale(Number(d.x)) : this.xScale(d.x);\n        const cy = this.yScaleType === 'linear' ? this.yScale(Number(d.y)) : this.yScale(d.y);\n        xMin = Math.max(r - cx, xMin);\n        yMin = Math.max(r - cy, yMin);\n        yMax = Math.max(cy + r, yMax);\n        xMax = Math.max(cx + r, xMax);\n      }\n    }\n\n    xMax = Math.max(xMax - this.dims.width, 0);\n    yMax = Math.max(yMax - this.dims.height, 0);\n\n    return [yMin, xMax, yMax, xMin];\n  }\n\n  setScales() {\n    let width = this.dims.width;\n    if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n      width = width - this.bubblePadding[1];\n    }\n    let height = this.dims.height;\n    if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n      height = height - this.bubblePadding[2];\n    }\n    this.xScale = this.getXScale(this.xDomain, width);\n    this.yScale = this.getYScale(this.yDomain, height);\n  }\n\n  getYScale(domain, height): any {\n    return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n  }\n\n  getXScale(domain, width): any {\n    return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n  }\n\n  getRScale(domain, range): any {\n    const scale = scaleLinear().range(range).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getLegendOptions(): any {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      position: this.legendPosition,\n      title: undefined\n    };\n\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.rDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  getXDomain(): any[] {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.x)) {\n          values.push(d.x);\n        }\n      }\n    }\n\n    this.xScaleType = getScaleType(values);\n    return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n  }\n\n  getYDomain(): any[] {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.y)) {\n          values.push(d.y);\n        }\n      }\n    }\n\n    this.yScaleType = getScaleType(values);\n    return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n  }\n\n  getRDomain(): number[] {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        const value = Number(d.r) || 1;\n        min = Math.min(min, value);\n        max = Math.max(max, value);\n      }\n    }\n\n    return [min, max];\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-bubble-series]',\n  template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"'top'\"\n          [tooltipType]=\"'tooltip'\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          opacity: 0,\n          transform: 'scale(0)'\n        }),\n        animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n      ])\n    ])\n  ]\n})\nexport class BubbleSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() rScale;\n  @Input() xScaleType;\n  @Input() yScaleType;\n  @Input() colors;\n  @Input() visibleValue;\n  @Input() activeEntries: any[];\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  areaPath: any;\n  circles: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.circles = this.getCircles();\n  }\n\n  getCircles(): any[] {\n    const seriesName = this.data.name;\n\n    return this.data.series\n      .map((d, i) => {\n        if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n          const y = d.y;\n          const x = d.x;\n          const r = d.r;\n\n          const radius = this.rScale(r || 1);\n          const tooltipLabel = formatLabel(d.name);\n\n          const cx = this.xScaleType === 'linear' ? this.xScale(Number(x)) : this.xScale(x);\n          const cy = this.yScaleType === 'linear' ? this.yScale(Number(y)) : this.yScale(y);\n\n          const color = this.colors.scaleType === 'linear' ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n\n          const isActive = !this.activeEntries.length ? true : this.isActive({ name: seriesName });\n          const opacity = isActive ? 1 : 0.3;\n\n          const data = Object.assign({}, d, {\n            series: seriesName,\n            name: d.name,\n            value: d.y,\n            x: d.x,\n            radius: d.r\n          });\n\n          return {\n            data,\n            x,\n            y,\n            r,\n            classNames: [`circle-data-${i}`],\n            value: y,\n            label: x,\n            cx,\n            cy,\n            radius,\n            tooltipLabel,\n            color,\n            opacity,\n            seriesName,\n            isActive,\n            transform: `translate(${cx},${cy})`\n          };\n        }\n      })\n      .filter(circle => circle !== undefined);\n  }\n\n  getTooltipText(circle): string {\n    const hasRadius = typeof circle.r !== 'undefined';\n    const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n    const hasSeriesName = circle.seriesName && circle.seriesName.length;\n\n    const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n    const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n    const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n    const x = formatLabel(circle.x);\n    const y = formatLabel(circle.y);\n    const name =\n      hasSeriesName && hasTooltipLabel\n        ? `${circle.seriesName} • ${circle.tooltipLabel}`\n        : circle.seriesName + circle.tooltipLabel;\n    const tooltipTitle =\n      hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n\n    return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isVisible(circle): boolean {\n    if (this.activeEntries.length > 0) {\n      return this.isActive({ name: circle.seriesName });\n    }\n\n    return circle.opacity !== 0;\n  }\n\n  activateCircle(circle): void {\n    circle.barVisible = true;\n    this.activate.emit({ name: this.data.name });\n  }\n\n  deactivateCircle(circle): void {\n    circle.barVisible = false;\n    this.deactivate.emit({ name: this.data.name });\n  }\n\n  trackBy(index, circle): string {\n    return `${circle.data.series} ${circle.data.name}`;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { BubbleChartComponent } from './bubble-chart.component';\nimport { BubbleSeriesComponent } from './bubble-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [BubbleChartComponent, BubbleSeriesComponent],\n  exports: [BubbleChartComponent, BubbleSeriesComponent]\n})\nexport class BubbleChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  SimpleChanges,\n  ElementRef,\n  OnChanges,\n  ChangeDetectionStrategy,\n  HostListener\n} from '@angular/core';\nimport { select } from 'd3-selection';\n\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-heat-map-cell]',\n  template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        style=\"cursor: pointer\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeatMapCellComponent implements OnChanges {\n  @Input() fill;\n  @Input() x;\n  @Input() y;\n  @Input() width;\n  @Input() height;\n  @Input() data;\n  @Input() label;\n  @Input() gradient: boolean = false;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  element: HTMLElement;\n  transform: string;\n  activeRange: any[];\n  startOpacity: number;\n  gradientId: string;\n  gradientUrl: string;\n  gradientStops: any[];\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.transform = `translate(${this.x} , ${this.y})`;\n\n    this.startOpacity = 0.3;\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n\n    if (this.animations) {\n      this.loadAnimation();\n    }\n  }\n\n  getGradientStops() {\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: this.startOpacity\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element).select('.cell');\n    node.attr('opacity', 0);\n    this.animateToCurrentForm();\n  }\n\n  animateToCurrentForm(): void {\n    const node = select(this.element).select('.cell');\n\n    node.transition().duration(750).attr('opacity', 1);\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  @HostListener('mouseenter')\n  onMouseEnter(): void {\n    this.activate.emit(this.data);\n  }\n\n  @HostListener('mouseleave')\n  onMouseLeave(): void {\n    this.deactivate.emit(this.data);\n  }\n}\n","import {\n  Component,\n  Input,\n  SimpleChanges,\n  Output,\n  EventEmitter,\n  OnChanges,\n  OnInit,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-heat-map-cell-series]',\n  template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HeatCellSeriesComponent implements OnChanges, OnInit {\n  @Input() data;\n  @Input() colors;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() gradient: boolean;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  cells: any[];\n\n  ngOnInit() {\n    if (!this.tooltipText) {\n      this.tooltipText = this.getTooltipText;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.cells = this.getCells();\n  }\n\n  getCells() {\n    const cells = [];\n\n    this.data.map(row => {\n      row.series.map(cell => {\n        const value = cell.value;\n        cell.series = row.name;\n\n        cells.push({\n          row,\n          cell,\n          x: this.xScale(row.name),\n          y: this.yScale(cell.name),\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: this.colors.getColor(value),\n          data: value,\n          label: formatLabel(cell.name),\n          series: row.name\n        });\n      });\n    });\n\n    return cells;\n  }\n\n  getTooltipText({ label, data, series }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n  }\n\n  trackBy(index, item): string {\n    return item.tooltipText;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { scaleBand } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-heat-map',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class HeatMapComponent extends BaseChartComponent {\n  @Input() legend;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() gradient: boolean;\n  @Input() innerPadding: number | number[] = 8;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() min: any;\n  @Input() max: any;\n  @Input() activeEntries: any[] = [];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xDomain: any[];\n  yDomain: any[];\n  valueDomain: any[];\n  xScale: any;\n  yScale: any;\n  color: any;\n  colors: ColorHelper;\n  colorScale: any;\n  transform: string;\n  rects: any[];\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  legendOptions: any;\n  scaleType: string = 'linear';\n\n  update(): void {\n    super.update();\n\n    this.formatDates();\n\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.valueDomain = this.getValueDomain();\n\n    this.scaleType = getScaleType(this.valueDomain, false);\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.scaleType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.scaleType === 'linear') {\n      let min = this.min;\n      let max = this.max;\n      if (!this.min) {\n        min = Math.min(0, ...this.valueDomain);\n      }\n      if (!this.max) {\n        max = Math.max(...this.valueDomain);\n      }\n      this.valueDomain = [min, max];\n    }\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.rects = this.getRects();\n  }\n\n  getXDomain(): any {\n    const domain = [];\n    for (const group of this.results) {\n      if (!domain.includes(group.name)) {\n        domain.push(group.name);\n      }\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.name)) {\n          domain.push(d.name);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain(): any[] {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  /**\n   * Converts the input to gap paddingInner in fraction\n   * Supports the following inputs:\n   *    Numbers: 8\n   *    Strings: \"8\", \"8px\", \"8%\"\n   *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n   *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n   *\n   * @memberOf HeatMapComponent\n   */\n  getDimension(value: string | number | Array<string | number>, index = 0, N: number, L: number): number {\n    if (typeof value === 'string') {\n      value = value\n        .replace('[', '')\n        .replace(']', '')\n        .replace('px', '')\n        // tslint:disable-next-line: quotemark\n        .replace(\"'\", '');\n\n      if (value.includes(',')) {\n        value = value.split(',');\n      }\n    }\n    if (Array.isArray(value) && typeof index === 'number') {\n      return this.getDimension(value[index], null, N, L);\n    }\n    if (typeof value === 'string' && value.includes('%')) {\n      return +value.replace('%', '') / 100;\n    }\n    return N / (L / +value + 1);\n  }\n\n  getXScale(): any {\n    const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n    return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\n  }\n\n  getYScale(): any {\n    const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n    return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\n  }\n\n  getRects(): any[] {\n    const rects = [];\n\n    this.xDomain.map(xVal => {\n      this.yDomain.map(yVal => {\n        rects.push({\n          x: this.xScale(xVal),\n          y: this.yScale(yVal),\n          rx: 3,\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: 'rgba(200,200,200,0.03)'\n        });\n      });\n    });\n\n    return rects;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: this.scaleType,\n      domain: this.valueDomain,\n      colors: this.scaleType === 'ordinal' ? this.colors : this.colors.scale,\n      title: this.scaleType === 'ordinal' ? this.legendTitle : undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results\n      .map(g => g.series)\n      .flat()\n      .filter(i => {\n        if (fromLegend) {\n          return i.label === item.name;\n        } else {\n          return i.name === item.name && i.series === item.series;\n        }\n      });\n\n    this.activeEntries = [...items];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { HeatMapCellComponent } from './heat-map-cell.component';\nimport { HeatCellSeriesComponent } from './heat-map-cell-series.component';\nimport { HeatMapComponent } from './heat-map.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n  exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n})\nexport class HeatMapModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ElementRef,\n  ChangeDetectionStrategy,\n  SimpleChanges\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { select } from 'd3-selection';\n\n@Component({\n  selector: 'g[ngx-charts-line]',\n  template: `\n    <svg:path\n      [@animationState]=\"'active'\"\n      class=\"line\"\n      [attr.d]=\"initialPath\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      stroke-width=\"1.5px\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':enter', [\n        style({\n          strokeDasharray: 2000,\n          strokeDashoffset: 2000\n        }),\n        animate(\n          1000,\n          style({\n            strokeDashoffset: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class LineComponent implements OnChanges {\n  @Input() path;\n  @Input() stroke;\n  @Input() data;\n  @Input() fill: string = 'none';\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  initialized: boolean = false;\n  initialPath: string;\n\n  constructor(private element: ElementRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.initialPath = this.path;\n    } else {\n      this.updatePathEl();\n    }\n  }\n\n  updatePathEl(): void {\n    const node = select(this.element.nativeElement).select('.line');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  HostListener,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { curveLinear } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { id } from '../utils/id';\nimport { getUniqueXDomainValues, getScaleType } from '../common/domain.helper';\n\n@Component({\n  selector: 'ngx-charts-line-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-line-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [hasRange]=\"hasRange\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class LineChartComponent extends BaseChartComponent {\n  @Input() legend;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis;\n  @Input() yAxis;\n  @Input() showXAxisLabel;\n  @Input() showYAxisLabel;\n  @Input() xAxisLabel;\n  @Input() yAxisLabel;\n  @Input() autoScale;\n  @Input() timeline;\n  @Input() gradient: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveLinear;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() rangeFillOpacity: number;\n  @Input() trimXAxisTicks: boolean = true;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() rotateXAxisTicks: boolean = true;\n  @Input() maxXAxisTickLength: number = 16;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: any;\n  @Input() yAxisTickFormatting: any;\n  @Input() xAxisTicks: any[];\n  @Input() yAxisTicks: any[];\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() showRefLines: boolean = false;\n  @Input() referenceLines: any;\n  @Input() showRefLabels: boolean = true;\n  @Input() xScaleMin: any;\n  @Input() xScaleMax: any;\n  @Input() yScaleMin: number;\n  @Input() yScaleMax: number;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n  @ContentChild('seriesTooltipTemplate') seriesTooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  xSet: any;\n  xDomain: any;\n  yDomain: any;\n  seriesDomain: any;\n  yScale: any;\n  xScale: any;\n  colors: ColorHelper;\n  scaleType: string;\n  transform: string;\n  clipPath: string;\n  clipPathId: string;\n  series: any;\n  areaPath: any;\n  margin = [10, 20, 10, 20];\n  hoveredVertical: any; // the value of the x axis that is hovered over\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n  hasRange: boolean; // whether the line has a min-max range around it\n  timelineWidth: any;\n  timelineHeight: number = 50;\n  timelineXScale: any;\n  timelineYScale: any;\n  timelineXDomain: any;\n  timelineTransform: any;\n  timelinePadding: number = 10;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    this.updateTimeline();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline(): void {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain(): any[] {\n    let values = getUniqueXDomainValues(this.results);\n\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n    if (this.scaleType === 'time' || this.scaleType === 'linear') {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === 'time') {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === 'linear') {\n      domain = [min, max];\n      // Use compare function to sort numbers numerically\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain(): any[] {\n    const domain = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n        if (d.min !== undefined) {\n          this.hasRange = true;\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n        if (d.max !== undefined) {\n          this.hasRange = true;\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n\n    const values = [...domain];\n    if (!this.autoScale) {\n      values.push(0);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    let scale;\n\n    if (this.scaleType === 'time') {\n      scale = scaleTime().range([0, width]).domain(domain);\n    } else if (this.scaleType === 'linear') {\n      scale = scaleLinear().range([0, width]).domain(domain);\n\n      if (this.roundDomains) {\n        scale = scale.nice();\n      }\n    } else if (this.scaleType === 'ordinal') {\n      scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\n    }\n\n    return scale;\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain): void {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item): void {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  @HostListener('mouseleave')\n  hideCircles(): void {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.name;\n  }\n\n  setColors(): void {\n    let domain;\n    if (this.schemeType === 'ordinal') {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n    return opts;\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    this.deactivateAll();\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { area, line } from 'd3-shape';\n\nimport { id } from '../utils/id';\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\n\n@Component({\n  selector: 'g[ngx-charts-line-series]',\n  template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          orientation=\"vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LineSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() xScale;\n  @Input() yScale;\n  @Input() colors;\n  @Input() scaleType;\n  @Input() curve: any;\n  @Input() activeEntries: any[];\n  @Input() rangeFillOpacity: number;\n  @Input() hasRange: boolean;\n  @Input() animations: boolean = true;\n\n  path: string;\n  outerPath: string;\n  areaPath: string;\n  gradientId: string;\n  gradientUrl: string;\n  hasGradient: boolean;\n  gradientStops: any[];\n  areaGradientStops: any[];\n  stroke: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradients();\n\n    const data = this.sortData(this.data.series);\n\n    const lineGen = this.getLineGenerator();\n    this.path = lineGen(data) || '';\n\n    const areaGen = this.getAreaGenerator();\n    this.areaPath = areaGen(data) || '';\n\n    if (this.hasRange) {\n      const range = this.getRangeGenerator();\n      this.outerPath = range(data) || '';\n    }\n\n    if (this.hasGradient) {\n      this.stroke = this.gradientUrl;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      if (max === min) {\n        this.stroke = this.colors.getColor(max);\n      }\n    } else {\n      this.stroke = this.colors.getColor(this.data.name);\n    }\n  }\n\n  getLineGenerator(): any {\n    return line<any>()\n      .x(d => {\n        const label = d.name;\n        let value;\n        if (this.scaleType === 'time') {\n          value = this.xScale(label);\n        } else if (this.scaleType === 'linear') {\n          value = this.xScale(Number(label));\n        } else {\n          value = this.xScale(label);\n        }\n        return value;\n      })\n      .y(d => this.yScale(d.value))\n      .curve(this.curve);\n  }\n\n  getRangeGenerator(): any {\n    return area<any>()\n      .x(d => {\n        const label = d.name;\n        let value;\n        if (this.scaleType === 'time') {\n          value = this.xScale(label);\n        } else if (this.scaleType === 'linear') {\n          value = this.xScale(Number(label));\n        } else {\n          value = this.xScale(label);\n        }\n        return value;\n      })\n      .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))\n      .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))\n      .curve(this.curve);\n  }\n\n  getAreaGenerator(): any {\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    return area<any>()\n      .x(xProperty)\n      .y0(() => this.yScale.range()[0])\n      .y1(d => this.yScale(d.value))\n      .curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === 'linear') {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === 'time') {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    return data;\n  }\n\n  updateGradients() {\n    if (this.colors.scaleType === 'linear') {\n      this.hasGradient = true;\n      this.gradientId = 'grad' + id().toString();\n      this.gradientUrl = `url(#${this.gradientId})`;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      this.areaGradientStops = this.colors.getLinearGradientStops(max);\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n      this.areaGradientStops = undefined;\n    }\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { LineComponent } from './line.component';\nimport { LineChartComponent } from './line-chart.component';\nimport { LineSeriesComponent } from './line-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n  exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n})\nexport class LineChartModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nimport { scaleLinear, scaleTime, scalePoint } from 'd3-scale';\nimport { curveCardinalClosed } from 'd3-shape';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { getScaleType } from '../common/domain.helper';\nimport { isDate } from '../utils/types';\n\nconst twoPI = 2 * Math.PI;\n\n@Component({\n  selector: 'ngx-charts-polar-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"'bottom'\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: [\n    '../common/base-chart.component.scss',\n    '../pie-chart/pie-chart.component.scss',\n    './polar-chart.component.scss'\n  ],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('animationState', [\n      transition(':leave', [\n        style({\n          opacity: 1\n        }),\n        animate(\n          500,\n          style({\n            opacity: 0\n          })\n        )\n      ])\n    ])\n  ]\n})\nexport class PolarChartComponent extends BaseChartComponent {\n  @Input() legend: boolean;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() xAxis: boolean;\n  @Input() yAxis: boolean;\n  @Input() showXAxisLabel: boolean;\n  @Input() showYAxisLabel: boolean;\n  @Input() xAxisLabel: string;\n  @Input() yAxisLabel: string;\n  @Input() autoScale: boolean;\n  @Input() showGridLines: boolean = true;\n  @Input() curve: any = curveCardinalClosed;\n  @Input() activeEntries: any[] = [];\n  @Input() schemeType: string;\n  @Input() rangeFillOpacity: number = 0.15;\n  @Input() trimYAxisTicks: boolean = true;\n  @Input() maxYAxisTickLength: number = 16;\n  @Input() xAxisTickFormatting: (o: any) => any;\n  @Input() yAxisTickFormatting: (o: any) => any;\n  @Input() roundDomains: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() showSeriesOnHover: boolean = true;\n  @Input() gradient: boolean = false;\n  @Input() yAxisMinScale: number = 0;\n  @Input() labelTrim: boolean = true;\n  @Input() labelTrimSize: number = 10;\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: ViewDimensions;\n  yAxisDims: ViewDimensions;\n  labelOffset: number;\n  xDomain: any;\n  yDomain: any;\n  seriesDomain: any;\n  yScale: any; // -> rScale\n  xScale: any; // -> tScale\n  yAxisScale: any; // -> yScale\n  colors: ColorHelper;\n  scaleType: string;\n  transform: string;\n  transformPlot: string;\n  transformYAxis: string;\n  transformXAxis: string;\n  series: any; // ???\n  margin = [10, 20, 10, 20];\n  xAxisHeight: number = 0;\n  yAxisWidth: number = 0;\n  filteredDomain: any;\n  legendOptions: any;\n  thetaTicks: any[];\n  radiusTicks: number[];\n  outerRadius: number;\n\n  update(): void {\n    super.update();\n\n    this.setDims();\n\n    this.setScales();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    this.setTicks();\n  }\n\n  setDims() {\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    const halfWidth = Math.floor(this.dims.width / 2);\n    const halfHeight = Math.floor(this.dims.height / 2);\n\n    const outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));\n\n    const yOffset = Math.max(0, halfHeight - outerRadius);\n\n    this.yAxisDims = {\n      ...this.dims,\n      width: halfWidth\n    };\n\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n    this.transformYAxis = `translate(0, ${yOffset})`;\n    this.labelOffset = this.dims.height + 40;\n    this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n  }\n\n  setScales() {\n    const xValues = this.getXValues();\n    this.scaleType = getScaleType(xValues);\n    this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n\n    this.xScale = this.getXScale(this.xDomain, twoPI);\n    this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n    this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n  }\n\n  setTicks() {\n    let tickFormat;\n    if (this.xAxisTickFormatting) {\n      tickFormat = this.xAxisTickFormatting;\n    } else if (this.xScale.tickFormat) {\n      tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n    } else {\n      tickFormat = d => {\n        if (isDate(d)) {\n          return d.toLocaleDateString();\n        }\n        return d.toLocaleString();\n      };\n    }\n\n    const outerRadius = this.outerRadius;\n    const s = 1.1;\n\n    this.thetaTicks = this.xDomain.map(d => {\n      const startAngle = this.xScale(d);\n      const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n      const label = tickFormat(d);\n\n      const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n      const pos = [dd, s * startPos[1]];\n      return {\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle: startAngle,\n        value: outerRadius,\n        label,\n        startPos,\n        pos\n      };\n    });\n\n    const minDistance = 10;\n\n    /* from pie chart, abstract out -*/\n    for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n      const a = this.thetaTicks[i];\n\n      for (let j = i + 1; j < this.thetaTicks.length; j++) {\n        const b = this.thetaTicks[j];\n        // if they're on the same side\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n  }\n\n  getXValues(): any[] {\n    const values = [];\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n    return values;\n  }\n\n  getXDomain(values = this.getXValues()): any[] {\n    if (this.scaleType === 'time') {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    } else if (this.scaleType === 'linear') {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    }\n    return values;\n  }\n\n  getYValues(): any[] {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n        if (d.min !== undefined) {\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n        if (d.max !== undefined) {\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n    return domain;\n  }\n\n  getYDomain(domain = this.getYValues()): any[] {\n    let min = Math.min(...domain);\n    const max = Math.max(this.yAxisMinScale, ...domain);\n\n    min = Math.max(0, min);\n    if (!this.autoScale) {\n      min = Math.min(0, min);\n    }\n\n    return [min, max];\n  }\n\n  getSeriesDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width): any {\n    switch (this.scaleType) {\n      case 'time':\n        return scaleTime().range([0, width]).domain(domain);\n      case 'linear':\n        const scale = scaleLinear().range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n      default:\n        return scalePoint()\n          .range([0, width - twoPI / domain.length])\n          .padding(0)\n          .domain(domain);\n    }\n  }\n\n  getYScale(domain, height): any {\n    const scale = scaleLinear().range([0, height]).domain(domain);\n\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onClick(data, series?): void {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    const domain = this.schemeType === 'ordinal' ? this.seriesDomain : this.yDomain.reverse();\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    if (this.schemeType === 'ordinal') {\n      return {\n        scaleType: this.schemeType,\n        colors: this.colors,\n        domain: this.seriesDomain,\n        title: this.legendTitle,\n        position: this.legendPosition\n      };\n    }\n    return {\n      scaleType: this.schemeType,\n      colors: this.colors.scale,\n      domain: this.yDomain,\n      title: undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({ width }): void {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({ height }): void {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n    this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({ value: entry, entries: [] });\n    }\n    this.activeEntries = [];\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n}\n","export function isDate(value) {\n  return toString.call(value) === '[object Date]';\n}\n\nexport function isNumber(value) {\n  return typeof value === 'number';\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { lineRadial } from 'd3-shape';\n\nimport { id } from '../utils/id';\nimport { sortLinear, sortByTime, sortByDomain } from '../utils/sort';\nimport { escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-polar-series]',\n  template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          orientation=\"vertical\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        tooltipType=\"tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PolarSeriesComponent implements OnChanges {\n  @Input() name;\n  @Input() data;\n  @Input() xScale; // Theta\n  @Input() yScale; // R\n  @Input() colors;\n  @Input() scaleType;\n  @Input() curve: any;\n  @Input() activeEntries: any[];\n  @Input() rangeFillOpacity: number;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: (o: any) => string;\n  @Input() gradient: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  path: string;\n  circles: any[];\n  circleRadius: number = 3;\n\n  outerPath: string;\n  areaPath: string;\n  gradientId: string;\n  gradientUrl: string;\n  hasGradient: boolean;\n  gradientStops: any[];\n  areaGradientStops: any[];\n  seriesColor: string;\n\n  active: boolean;\n  inactive: boolean;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.updateGradients();\n\n    const line = this.getLineGenerator();\n\n    const data = this.sortData(this.data.series);\n\n    const seriesName = this.data.name;\n    const linearScaleType = this.colors.scaleType === 'linear';\n    const min = this.yScale.domain()[0];\n    this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n\n    this.path = line(data) || '';\n\n    this.circles = data.map(d => {\n      const a = this.getAngle(d);\n      const r = this.getRadius(d);\n      const value = d.value;\n\n      const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n\n      const cData = Object.assign({}, d, {\n        series: seriesName,\n        value,\n        name: d.name\n      });\n\n      return {\n        data: cData,\n        cx: r * Math.sin(a),\n        cy: -r * Math.cos(a),\n        value,\n        color,\n        label: d.name\n      };\n    });\n\n    this.active = this.isActive(this.data);\n    this.inactive = this.isInactive(this.data);\n    this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n  }\n\n  getAngle(d) {\n    const label = d.name;\n    if (this.scaleType === 'time') {\n      return this.xScale(label);\n    } else if (this.scaleType === 'linear') {\n      return this.xScale(Number(label));\n    }\n    return this.xScale(label);\n  }\n\n  getRadius(d) {\n    return this.yScale(d.value);\n  }\n\n  getLineGenerator(): any {\n    return lineRadial<any>()\n      .angle(d => this.getAngle(d))\n      .radius(d => this.getRadius(d))\n      .curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === 'linear') {\n      return sortLinear(data, 'name');\n    } else if (this.scaleType === 'time') {\n      return sortByTime(data, 'name');\n    }\n    return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry): boolean {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n\n  defaultTooltipText({ label, value }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  updateGradients() {\n    this.hasGradient = this.gradient || this.colors.scaleType === 'linear';\n\n    if (!this.hasGradient) {\n      return;\n    }\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n\n    if (this.colors.scaleType === 'linear') {\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n    } else {\n      this.gradientStops = undefined;\n    }\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-advanced-pie-chart',\n  template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './advanced-pie-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AdvancedPieChartComponent extends BaseChartComponent {\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[] = [];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: any;\n  @Input() label: string = 'Total';\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  data: any;\n  dims: ViewDimensions;\n  domain: any[];\n  outerRadius: number;\n  innerRadius: number;\n  transform: string;\n  colors: ColorHelper;\n  legendWidth: number;\n  margin = [20, 20, 20, 20];\n\n  @Input() valueFormatting: (value: number) => any;\n  @Input() nameFormatting: (value: string) => any;\n  @Input() percentageFormatting: (value: number) => any;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: (this.width * 4) / 12.0,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n    this.setColors();\n\n    const xOffset = this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.legendWidth = this.width - this.dims.width - this.margin[1];\n\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n    this.innerRadius = this.outerRadius * 0.75;\n\n    this.transform = `translate(${xOffset} , ${yOffset})`;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data: DataItem) {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { arc } from 'd3-shape';\n\nimport { trimLabel } from '../common/trim-label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-pie-label]',\n  template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieLabelComponent implements OnChanges {\n  @Input() data;\n  @Input() radius;\n  @Input() label;\n  @Input() color;\n  @Input() max;\n  @Input() value;\n  @Input() explodeSlices;\n  @Input() animations: boolean = true;\n  @Input() labelTrim: boolean = true;\n  @Input() labelTrimSize: number = 10;\n\n  trimLabel: (label: string, max?: number) => string;\n  line: string;\n  styleTransform: string;\n  attrTransform: string;\n  textTransition: string;\n\n  constructor(@Inject(PLATFORM_ID) public platformId: any) {\n    this.trimLabel = trimLabel;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.setTransforms();\n    this.update();\n  }\n\n  setTransforms() {\n    if (isPlatformServer(this.platformId)) {\n      this.styleTransform = `translate3d(${this.textX}px,${this.textY}px, 0)`;\n      this.attrTransform = `translate(${this.textX},${this.textY})`;\n      this.textTransition = !this.animations ? null : 'transform 0.75s';\n    } else {\n      const isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n      this.styleTransform = isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n      this.attrTransform = !isIE ? null : `translate(${this.textX},${this.textY})`;\n      this.textTransition = isIE || !this.animations ? null : 'transform 0.75s';\n    }\n  }\n\n  update(): void {\n    let startRadius = this.radius;\n    if (this.explodeSlices) {\n      startRadius = (this.radius * this.value) / this.max;\n    }\n\n    const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius);\n\n    // Calculate innerPos then scale outer position to match label position\n    const innerPos = innerArc.centroid(this.data);\n\n    let scale = this.data.pos[1] / innerPos[1];\n    if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n      scale = 1;\n    }\n    const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n\n    this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n  }\n\n  get textX(): number {\n    return this.data.pos[0];\n  }\n\n  get textY(): number {\n    return this.data.pos[1];\n  }\n\n  textAnchor(): any {\n    return this.midAngle(this.data) < Math.PI ? 'start' : 'end';\n  }\n\n  midAngle(d): number {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { interpolate } from 'd3-interpolate';\nimport { select } from 'd3-selection';\nimport { arc } from 'd3-shape';\n\nimport { id } from '../utils/id';\n/* tslint:disable */\nimport { MouseEvent } from '../events';\n\n@Component({\n  selector: 'g[ngx-charts-pie-arc]',\n  template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          [color]=\"fill\"\n          orientation=\"vertical\"\n          [name]=\"radialGradientId\"\n          [startOpacity]=\"startOpacity\"\n        />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieArcComponent implements OnChanges {\n  @Input() fill;\n  @Input() startAngle: number = 0;\n  @Input() endAngle: number = Math.PI * 2;\n  @Input() innerRadius;\n  @Input() outerRadius;\n  @Input() cornerRadius: number = 0;\n  @Input() value;\n  @Input() max;\n  @Input() data;\n  @Input() explodeSlices: boolean = false;\n  @Input() gradient: boolean = false;\n  @Input() animate: boolean = true;\n  @Input() pointerEvents: boolean = true;\n  @Input() isActive: boolean = false;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dblclick = new EventEmitter();\n\n  element: HTMLElement;\n  path: any;\n  startOpacity: number;\n  radialGradientId: string;\n  linearGradientId: string;\n  gradientFill: string;\n  initialized: boolean = false;\n  private _timeout;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  getGradient() {\n    return this.gradient ? this.gradientFill : this.fill;\n  }\n\n  getPointerEvents() {\n    return this.pointerEvents ? 'auto' : 'none';\n  }\n\n  update(): void {\n    const calc = this.calculateArc();\n    this.startOpacity = 0.5;\n    this.radialGradientId = 'linearGrad' + id().toString();\n    this.gradientFill = `url(#${this.radialGradientId})`;\n\n    if (this.animate) {\n      if (this.initialized) {\n        this.updateAnimation();\n      } else {\n        this.loadAnimation();\n        this.initialized = true;\n      }\n    } else {\n      this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n    }\n  }\n\n  calculateArc(): any {\n    let outerRadius = this.outerRadius;\n    if (this.explodeSlices && this.innerRadius === 0) {\n      outerRadius = (this.outerRadius * this.value) / this.max;\n    }\n\n    return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element)\n      .selectAll('.arc')\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n\n    const calc = this.calculateArc();\n\n    node\n      .transition()\n      .attrTween('d', function (d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const copyOfD = Object.assign({}, d);\n        copyOfD.endAngle = copyOfD.startAngle;\n        const interpolater = interpolate(copyOfD, copyOfD);\n        (<any>this)._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      })\n      .transition()\n      .duration(750)\n      .attrTween('d', function (d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const interpolater = interpolate((<any>this)._current, d);\n        (<any>this)._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      });\n  }\n\n  updateAnimation(): void {\n    const node = select(this.element)\n      .selectAll('.arc')\n      .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n\n    const calc = this.calculateArc();\n\n    node\n      .transition()\n      .duration(750)\n      .attrTween('d', function (d) {\n        (<any>this)._current = (<any>this)._current || d;\n        const interpolater = interpolate((<any>this)._current, d);\n        (<any>this)._current = interpolater(0);\n        return function (t) {\n          return calc(interpolater(t));\n        };\n      });\n  }\n\n  onClick(): void {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n  }\n\n  onDblClick(event: MouseEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    clearTimeout(this._timeout);\n\n    this.dblclick.emit({\n      data: this.data,\n      nativeEvent: event\n    });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  ViewEncapsulation,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-pie-chart',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './pie-chart.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieChartComponent extends BaseChartComponent {\n  @Input() labels = false;\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() explodeSlices = false;\n  @Input() doughnut = false;\n  @Input() arcWidth = 0.25;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[] = [];\n  @Input() tooltipDisabled: boolean = false;\n  @Input() labelFormatting: any;\n  @Input() trimLabels: boolean = true;\n  @Input() maxLabelLength: number = 10;\n  @Input() tooltipText: any;\n  @Output() dblclick = new EventEmitter();\n  // optional margins\n  @Input() margins: number[];\n  @Output() select = new EventEmitter();\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  translation: string;\n  outerRadius: number;\n  innerRadius: number;\n  data: any;\n  colors: ColorHelper;\n  domain: any;\n  dims: any;\n  legendOptions: any;\n\n  update(): void {\n    super.update();\n\n    if (this.labels && this.hasNoOptionalMarginsSet()) {\n      this.margins = [30, 80, 30, 80];\n    } else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n      // default value for margins\n      this.margins = [20, 20, 20, 20];\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margins,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n\n    this.formatDates();\n\n    const xOffset = this.margins[3] + this.dims.width / 2;\n    const yOffset = this.margins[0] + this.dims.height / 2;\n    this.translation = `translate(${xOffset}, ${yOffset})`;\n    this.outerRadius = Math.min(this.dims.width, this.dims.height);\n    if (this.labels) {\n      // make room for labels\n      this.outerRadius /= 3;\n    } else {\n      this.outerRadius /= 2;\n    }\n    this.innerRadius = 0;\n    if (this.doughnut) {\n      this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n    }\n\n    this.domain = this.getDomain();\n\n    // sort data according to domain\n    this.data = this.results.sort((a, b) => {\n      return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n    });\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: 'ordinal',\n      domain: this.domain,\n      colors: this.colors,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  private hasNoOptionalMarginsSet(): boolean {\n    return !this.margins || this.margins.length <= 0;\n  }\n}\n","import { scaleBand } from 'd3-scale';\n\nexport function gridSize(dims, len, minWidth) {\n  let rows = 1;\n  let cols = len;\n  const width = dims.width;\n\n  if (width > minWidth) {\n    while (width / cols < minWidth) {\n      rows += 1;\n      cols = Math.ceil(len / rows);\n    }\n  }\n\n  return [cols, rows];\n}\n\nexport function gridLayout(dims, data, minWidth, designatedTotal) {\n  const xScale: any = scaleBand<number>();\n  const yScale: any = scaleBand<number>();\n  const width = dims.width;\n  const height = dims.height;\n\n  const [columns, rows] = gridSize(dims, data.length, minWidth);\n\n  const xDomain = [];\n  const yDomain = [];\n  for (let i = 0; i < rows; i++) {\n    yDomain.push(i);\n  }\n  for (let i = 0; i < columns; i++) {\n    xDomain.push(i);\n  }\n  xScale.domain(xDomain);\n  yScale.domain(yDomain);\n\n  xScale.rangeRound([0, width], 0.1);\n  yScale.rangeRound([0, height], 0.1);\n\n  const res = [];\n  const total = designatedTotal ? designatedTotal : getTotal(data);\n  const cardWidth = xScale.bandwidth();\n  const cardHeight = yScale.bandwidth();\n\n  for (let i = 0; i < data.length; i++) {\n    res[i] = {};\n    res[i].data = {\n      name: data[i] ? data[i].name : '',\n      value: data[i] ? data[i].value : undefined,\n      extra: data[i] ? data[i].extra : undefined,\n      label: data[i] ? data[i].label : ''\n    };\n    res[i].x = xScale(i % columns);\n    res[i].y = yScale(Math.floor(i / columns));\n    res[i].width = cardWidth;\n    res[i].height = cardHeight;\n    res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n    res[i].data.total = total;\n  }\n\n  return res;\n}\n\nfunction getTotal(results) {\n  return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);\n}\n","import {\n  Component,\n  Input,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef,\n  Output,\n  EventEmitter\n} from '@angular/core';\nimport { min } from 'd3-array';\nimport { format } from 'd3-format';\n\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { gridLayout } from '../common/grid-layout.helper';\nimport { formatLabel } from '../common/label.helper';\nimport { DataItem } from '../models/chart-data.model';\n\n@Component({\n  selector: 'ngx-charts-pie-grid',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"'top'\"\n            [tooltipType]=\"'tooltip'\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './pie-grid.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieGridComponent extends BaseChartComponent {\n  @Input() designatedTotal: number;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipText: (o: any) => any;\n  @Input() label: string = 'Total';\n  @Input() minWidth: number = 150;\n  @Input() activeEntries: any[] = [];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  dims: ViewDimensions;\n  data: any[];\n  transform: string;\n  series: any[];\n  domain: any[];\n  colorScale: ColorHelper;\n  margin = [20, 20, 20, 20];\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n\n    this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n    this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n\n    this.series = this.getSeries();\n    this.setColors();\n\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  defaultTooltipText({ data }): string {\n    const label = trimLabel(formatLabel(data.name));\n    const val = data.value.toLocaleString();\n    return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  getSeries(): any[] {\n    const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n\n    return this.data.map(d => {\n      const baselineLabelHeight = 20;\n      const padding = 10;\n      const name = d.data.name;\n      const label = formatLabel(name);\n      const value = d.data.value;\n      const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n      const innerRadius = radius * 0.9;\n\n      let count = 0;\n      const colors = () => {\n        count += 1;\n        if (count === 1) {\n          return 'rgba(100,100,100,0.3)';\n        } else {\n          return this.colorScale.getColor(label);\n        }\n      };\n\n      const xPos = d.x + (d.width - padding) / 2;\n      const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n\n      return {\n        transform: `translate(${xPos}, ${yPos})`,\n        colors,\n        innerRadius,\n        outerRadius: radius,\n        name,\n        label: trimLabel(label),\n        total: value,\n        value,\n        percent: format('.1%')(d.data.percent),\n        data: [\n          d,\n          {\n            data: {\n              other: true,\n              value: total - value,\n              name: d.data.name\n            }\n          }\n        ]\n      };\n    });\n  }\n\n  getTotal(): any {\n    return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n  }\n\n  onClick(data: DataItem): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colorScale = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { pie } from 'd3-shape';\n\n@Component({\n  selector: 'g[ngx-charts-pie-grid-series]',\n  template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieGridSeriesComponent implements OnChanges {\n  @Input() colors;\n  @Input() data;\n  @Input() innerRadius = 70;\n  @Input() outerRadius = 80;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  element: HTMLElement;\n  layout: any;\n  arcs: any;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    this.layout = pie<any, any>()\n      .value(d => d.data.value)\n      .sort(null);\n\n    this.arcs = this.getArcs();\n  }\n\n  getArcs(): any[] {\n    return this.layout(this.data).map((arc, index) => {\n      const label = arc.data.data.name;\n      const other = arc.data.data.other;\n\n      if (index === 0) {\n        arc.startAngle = 0;\n      }\n\n      const color = this.colors(label);\n      return {\n        data: arc.data.data,\n        class: 'arc ' + 'arc' + index,\n        fill: color,\n        startAngle: other ? 0 : arc.startAngle,\n        endAngle: arc.endAngle,\n        animate: this.animations && !other,\n        pointerEvents: !other\n      };\n    });\n  }\n\n  onClick(data): void {\n    this.select.emit(this.data[0].data);\n  }\n\n  trackBy(index, item): string {\n    return item.data.name;\n  }\n\n  label(arc): string {\n    return arc.data.name;\n  }\n\n  color(arc): any {\n    return this.colors(this.label(arc));\n  }\n}\n","import {\n  Component,\n  SimpleChanges,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { max } from 'd3-array';\nimport { arc, pie } from 'd3-shape';\n\nimport { formatLabel, escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-pie-series]',\n  template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PieSeriesComponent implements OnChanges {\n  @Input() colors;\n  @Input() series: any = [];\n  @Input() dims;\n  @Input() innerRadius = 60;\n  @Input() outerRadius = 80;\n  @Input() explodeSlices;\n  @Input() showLabels;\n  @Input() gradient: boolean;\n  @Input() activeEntries: any[];\n  @Input() labelFormatting: any;\n  @Input() trimLabels: boolean = true;\n  @Input() maxLabelLength: number = 10;\n  @Input() tooltipText: (o: any) => any;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n  @Output() dblclick = new EventEmitter();\n\n  max: number;\n  data: any;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    const pieGenerator = pie<any, any>()\n      .value(d => d.value)\n      .sort(null);\n\n    const arcData = pieGenerator(this.series);\n\n    this.max = max(arcData, d => {\n      return d.value;\n    });\n\n    this.data = this.calculateLabelPositions(arcData);\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  midAngle(d): number {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n\n  outerArc(): any {\n    const factor = 1.5;\n\n    return arc()\n      .innerRadius(this.outerRadius * factor)\n      .outerRadius(this.outerRadius * factor);\n  }\n\n  calculateLabelPositions(pieData): any {\n    const factor = 1.5;\n    const minDistance = 10;\n    const labelPositions = pieData;\n\n    labelPositions.forEach(d => {\n      d.pos = this.outerArc().centroid(d);\n      d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n    });\n\n    for (let i = 0; i < labelPositions.length - 1; i++) {\n      const a = labelPositions[i];\n      if (!this.labelVisible(a)) {\n        continue;\n      }\n\n      for (let j = i + 1; j < labelPositions.length; j++) {\n        const b = labelPositions[j];\n        if (!this.labelVisible(b)) {\n          continue;\n        }\n        // if they're on the same side\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    return labelPositions;\n  }\n\n  labelVisible(myArc): boolean {\n    return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n  }\n\n  getTooltipTitle(a) {\n    return this.tooltipTemplate ? undefined : this.tooltipText(a);\n  }\n\n  labelText(myArc): string {\n    if (this.labelFormatting) {\n      return this.labelFormatting(myArc.data.name);\n    }\n    return this.label(myArc);\n  }\n\n  label(myArc): string {\n    return formatLabel(myArc.data.name);\n  }\n\n  defaultTooltipText(myArc): string {\n    const label = this.label(myArc);\n    const val = formatLabel(myArc.data.value);\n\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  color(myArc): any {\n    return this.colors.getColor(this.label(myArc));\n  }\n\n  trackBy(index, item): string {\n    return item.data.name;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { AdvancedPieChartComponent } from './advanced-pie-chart.component';\nimport { PieLabelComponent } from './pie-label.component';\nimport { PieArcComponent } from './pie-arc.component';\nimport { PieChartComponent } from './pie-chart.component';\nimport { PieGridComponent } from './pie-grid.component';\nimport { PieGridSeriesComponent } from './pie-grid-series.component';\nimport { PieSeriesComponent } from './pie-series.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [\n    AdvancedPieChartComponent,\n    PieLabelComponent,\n    PieArcComponent,\n    PieChartComponent,\n    PieGridComponent,\n    PieGridSeriesComponent,\n    PieSeriesComponent\n  ],\n  exports: [\n    AdvancedPieChartComponent,\n    PieLabelComponent,\n    PieArcComponent,\n    PieChartComponent,\n    PieGridComponent,\n    PieGridSeriesComponent,\n    PieSeriesComponent\n  ]\n})\nexport class PieChartModule {}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { PolarChartComponent } from './polar-chart.component';\nimport { PolarSeriesComponent } from './polar-series.component';\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\nimport { LineChartModule } from '../line-chart/line-chart.module';\n\n@NgModule({\n  imports: [ChartCommonModule, PieChartModule, LineChartModule],\n  declarations: [PolarChartComponent, PolarSeriesComponent],\n  exports: [PolarChartComponent, PolarSeriesComponent]\n})\nexport class PolarChartModule {}\n","export function calculateTextWidth(fontFamilyKey: {}, text: string, defaultWidth = 8) {\n  return text.split('').reduce((acc, curr) => {\n    const width = fontFamilyKey[curr] || defaultWidth;\n    return acc + width;\n  }, 0);\n}\n","export const VERDANA_FONT_WIDTHS_16_PX = {\n  '0': 10,\n  '1': 10,\n  '2': 10,\n  '3': 10,\n  '4': 10,\n  '5': 10,\n  '6': 10,\n  '7': 10,\n  '8': 10,\n  '9': 10,\n  A: 11,\n  B: 11,\n  C: 11,\n  D: 12,\n  E: 10,\n  F: 9,\n  G: 12,\n  H: 12,\n  I: 7,\n  J: 7,\n  K: 11,\n  L: 9,\n  M: 13,\n  N: 12,\n  O: 13,\n  P: 10,\n  Q: 13,\n  R: 11,\n  S: 11,\n  T: 10,\n  U: 12,\n  V: 11,\n  W: 16,\n  X: 11,\n  Y: 10,\n  Z: 11,\n  a: 10,\n  b: 10,\n  c: 8,\n  d: 10,\n  e: 10,\n  f: 6,\n  g: 10,\n  h: 10,\n  i: 4,\n  j: 6,\n  k: 9,\n  l: 4,\n  m: 16,\n  n: 10,\n  o: 10,\n  p: 10,\n  q: 10,\n  r: 7,\n  s: 8,\n  t: 6,\n  u: 10,\n  v: 9,\n  w: 13,\n  x: 9,\n  y: 9,\n  z: 8,\n  '!': 6,\n  '@': 16,\n  '#': 13,\n  $: 10,\n  '%': 17,\n  '^': 13,\n  '&': 12,\n  '*': 10,\n  '(': 7,\n  ')': 7,\n  _: 10,\n  '-': 7,\n  '+': 13,\n  '=': 13,\n  ',': 6,\n  '.': 6,\n  '/': 7,\n  \"'\": 4,\n  ':': 7,\n  '|': 7,\n  '?': 9,\n  ';': 7,\n  '<': 13,\n  '>': 13\n};\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  SimpleChanges,\n  OnChanges,\n  ViewChild,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  NgZone,\n  OnDestroy,\n  PLATFORM_ID,\n  Inject\n} from '@angular/core';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { roundedRect } from '../common/shape.helper';\nimport { escapeLabel } from '../common/label.helper';\nimport { decimalChecker, count } from '../common/count/count.helper';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { calculateTextWidth } from '../utils/calculate-width';\nimport { VERDANA_FONT_WIDTHS_16_PX } from '../common/constants/font-widths';\n\n@Component({\n  selector: 'g[ngx-charts-card]',\n  template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardComponent implements OnChanges, OnDestroy {\n  @Input() color;\n  @Input() bandColor;\n  @Input() textColor;\n\n  @Input() x;\n  @Input() y;\n  @Input() width;\n  @Input() height;\n  @Input() label;\n  @Input() data;\n  @Input() medianSize: number;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  @ViewChild('textEl', { static: false }) textEl: ElementRef;\n\n  element: HTMLElement;\n  value: string = '';\n  transform: string;\n  formattedLabel: string;\n  cardWidth: number;\n  cardHeight: number;\n  textWidth: number;\n  textFontSize: number = 12;\n  textTransform: string = '';\n  initialized: boolean = false;\n  animationReq: any;\n\n  bandHeight: number = 10;\n  transformBand: string;\n  textPadding = [10, 20, 5, 20];\n  labelFontSize = 15;\n\n  bandPath: string;\n\n  constructor(\n    element: ElementRef,\n    private cd: ChangeDetectorRef,\n    private zone: NgZone,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.scaleTextSSR();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      cancelAnimationFrame(this.animationReq);\n    }\n  }\n\n  update(): void {\n    this.zone.run(() => {\n      const hasValue = this.data && typeof this.data.value !== 'undefined';\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n      const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n\n      this.transform = `translate(${this.x} , ${this.y})`;\n\n      this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n      this.cardWidth = Math.max(0, this.width);\n      this.cardHeight = Math.max(0, this.height);\n\n      this.label = this.label ? this.label : this.data.name;\n\n      const cardData = {\n        label: this.label,\n        data: this.data,\n        value: this.data.value\n      };\n\n      this.formattedLabel = labelFormatting(cardData);\n      this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n\n      const value = hasValue ? valueFormatting(cardData) : '';\n\n      this.value = this.paddedValue(value);\n      this.setPadding();\n\n      this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n\n      setTimeout(() => {\n        if (isPlatformBrowser(this.platformId)) {\n          this.scaleText();\n        }\n        this.value = value;\n        if (hasValue && !this.initialized) {\n          setTimeout(() => this.startCount(), 20);\n        }\n      }, 8);\n    });\n  }\n\n  paddedValue(value: string) {\n    if (this.medianSize && this.medianSize > value.length) {\n      value += '\\u2007'.repeat(this.medianSize - value.length);\n    }\n    return value;\n  }\n\n  startCount(): void {\n    if (!this.initialized && this.animations) {\n      cancelAnimationFrame(this.animationReq);\n\n      const val = this.data.value;\n      const decs = decimalChecker(val);\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const callback = ({ value, finished }) => {\n        this.zone.run(() => {\n          value = finished ? val : value;\n          this.value = valueFormatting({ label: this.label, data: this.data, value });\n          if (!finished) {\n            this.value = this.paddedValue(this.value);\n          }\n          this.cd.markForCheck();\n        });\n      };\n\n      this.animationReq = count(0, val, decs, 1, callback);\n      this.initialized = true;\n    }\n  }\n\n  scaleText(): void {\n    this.zone.run(() => {\n      const { width, height } = this.textEl.nativeElement.getBoundingClientRect();\n      if (width === 0 || height === 0) {\n        return;\n      }\n\n      const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n      const availableWidth = this.cardWidth - 2 * textPadding;\n      const availableHeight = this.cardHeight / 3;\n\n      const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n      this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n      this.labelFontSize = Math.min(this.textFontSize, 15);\n\n      this.setPadding();\n      this.cd.markForCheck();\n    });\n  }\n\n  scaleTextSSR() {\n    const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, this.value, 10);\n    const height = 18;\n    const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n    const availableWidth = this.cardWidth - 2 * textPadding;\n    const availableHeight = this.cardHeight / 3;\n\n    const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n\n    this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n    this.labelFontSize = Math.min(this.textFontSize, 15);\n\n    this.setPadding();\n  }\n\n  setPadding() {\n    this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n    const padding = this.cardHeight / 2;\n    this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n    this.textPadding[2] = padding - this.labelFontSize;\n  }\n\n  onClick(): void {\n    this.select.emit(this.data);\n  }\n}\n","import * as d3_color from 'd3-color';\n\n/**\n * Converts a hex to RGB\n *\n * @export\n */\nexport function hexToRgb(value: string): any {\n  // deprecated, use d3.color()\n  return d3_color.rgb(value);\n}\n\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\nexport function invertColor(value: string): string {\n  const color = d3_color.rgb(value);\n  const { r, g, b, opacity } = color;\n  if (opacity === 0) {\n    return color.toString();\n  }\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  const depth = yiq >= 128 ? -0.8 : 0.8;\n\n  return shadeRGBColor(color, depth);\n}\n\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\nexport function shadeRGBColor({ r, g, b }, percent) {\n  const t = percent < 0 ? 0 : 255;\n  const p = percent < 0 ? percent * -1 : percent;\n\n  r = Math.round((t - r) * p) + r;\n  g = Math.round((t - g) * p) + g;\n  b = Math.round((t - b) * p) + b;\n\n  return `rgb(${r}, ${g}, ${b})`;\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { invertColor } from '../utils/color-utils';\n\nexport interface CardModel {\n  x;\n  y;\n  width: number;\n  height: number;\n  color: string;\n  label: string;\n  data;\n  tooltipText: string;\n}\n\n@Component({\n  selector: 'g[ngx-charts-card-series]',\n  template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CardSeriesComponent implements OnChanges {\n  @Input() data: any[];\n  @Input() slots: any[];\n  @Input() dims;\n  @Input() colors;\n  @Input() innerPadding = 15;\n\n  @Input() cardColor;\n  @Input() bandColor;\n  @Input() emptyColor = 'rgba(0, 0, 0, 0)';\n  @Input() textColor;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  cards: CardModel[];\n  emptySlots: any[];\n  medianSize: number;\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  update(): void {\n    if (this.data.length > 2) {\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const sortedLengths = this.data\n        .map(d => {\n          const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n          return hasValue\n            ? valueFormatting({\n                data: d.data,\n                label: d ? d.data.name : '',\n                value: d && d.data ? d.data.value : ''\n              }).length\n            : 0;\n        })\n        .sort((a, b) => b - a);\n      const idx = Math.ceil(this.data.length / 2);\n      this.medianSize = sortedLengths[idx];\n    }\n\n    const cards = this.getCards();\n    this.cards = cards.filter(d => d.data.value !== null);\n    this.emptySlots = cards.filter(d => d.data.value === null);\n  }\n\n  getCards(): any[] {\n    const yPadding =\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n    const xPadding =\n      typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n\n    return this.data.map((d, index) => {\n      let label = d.data.name;\n      if (label && label.constructor.name === 'Date') {\n        label = label.toLocaleDateString();\n      } else {\n        label = label ? label.toLocaleString() : label;\n      }\n\n      const value = d.data.value;\n      const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n      const color = this.cardColor || valueColor || '#000';\n      return {\n        x: d.x,\n        y: d.y,\n        width: d.width - xPadding,\n        height: d.height - yPadding,\n        color,\n        bandColor: this.bandColor || valueColor,\n        textColor: this.textColor || invertColor(color),\n        label,\n        data: d.data,\n        tooltipText: `${label}: ${value}`\n      };\n    });\n  }\n\n  trackBy(index, card): string {\n    return card.label;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n}\n","import { Component, ViewEncapsulation, ChangeDetectionStrategy, Input } from '@angular/core';\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { gridLayout, gridSize } from '../common/grid-layout.helper';\n\n@Component({\n  selector: 'ngx-charts-number-card',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './card.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NumberCardComponent extends BaseChartComponent {\n  @Input() cardColor: string;\n  @Input() bandColor: string;\n  @Input() emptyColor: string = 'rgba(0, 0, 0, 0)';\n  @Input() innerPadding = 15;\n  @Input() textColor: string;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() designatedTotal: number;\n\n  dims: ViewDimensions;\n  data: any[];\n  slots: any[];\n  colors: ColorHelper;\n  transform: string;\n  domain: any[];\n  margin = [10, 10, 10, 10];\n\n  backgroundCards: any[];\n\n  get clickable() {\n    return !!this.select.observers.length;\n  }\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.formatDates();\n\n    this.domain = this.getDomain();\n\n    this.setColors();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n\n    const size = gridSize(this.dims, this.results.length, 150);\n    const N = size[0] * size[1];\n\n    const data = this.results.slice();\n\n    while (data.length < N) {\n      data.push({ value: null });\n    }\n\n    this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { CardComponent } from './card.component';\nimport { CardSeriesComponent } from './card-series.component';\nimport { NumberCardComponent } from './number-card.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n  exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n})\nexport class NumberCardModule {}\n","import { Component, Input, Output, EventEmitter, ElementRef, OnChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { select } from 'd3-selection';\n\nimport { invertColor } from '../utils/color-utils';\nimport { trimLabel } from '../common/trim-label.helper';\nimport { escapeLabel } from '../common/label.helper';\nimport { id } from '../utils/id';\n\n@Component({\n  selector: 'g[ngx-charts-tree-map-cell]',\n  template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-linear-gradient orientation=\"vertical\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [style.cursor]=\"'pointer'\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapCellComponent implements OnChanges {\n  @Input() data;\n  @Input() fill;\n  @Input() x;\n  @Input() y;\n  @Input() width;\n  @Input() height;\n  @Input() label;\n  @Input() value;\n  @Input() valueType;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  gradientStops: any[];\n  gradientId: string;\n  gradientUrl: string;\n\n  element: HTMLElement;\n  transform: string;\n  formattedLabel: string;\n  formattedValue: string;\n  initialized: boolean = false;\n\n  constructor(element: ElementRef) {\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(): void {\n    this.update();\n\n    this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n    const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n\n    const cellData = {\n      data: this.data,\n      label: this.label,\n      value: this.value\n    };\n\n    this.formattedValue = this.valueFormatting(cellData.value);\n    this.formattedLabel = labelFormatting(cellData);\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n  }\n\n  update(): void {\n    if (this.initialized) {\n      this.animateToCurrentForm();\n    } else {\n      if (this.animations) {\n        this.loadAnimation();\n      }\n      this.initialized = true;\n    }\n  }\n\n  loadAnimation(): void {\n    const node = select(this.element).select('.cell');\n\n    node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\n\n    this.animateToCurrentForm();\n  }\n\n  getTextColor(): string {\n    return invertColor(this.fill);\n  }\n\n  animateToCurrentForm(): void {\n    const node = select(this.element).select('.cell');\n\n    if (this.animations) {\n      node\n        .transition()\n        .duration(750)\n        .attr('opacity', 1)\n        .attr('x', this.x)\n        .attr('y', this.y)\n        .attr('width', this.width)\n        .attr('height', this.height);\n    } else {\n      node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n    }\n  }\n\n  onClick(): void {\n    this.select.emit(this.data);\n  }\n\n  getGradientStops() {\n    return [\n      {\n        offset: 0,\n        color: this.fill,\n        opacity: 0.3\n      },\n      {\n        offset: 100,\n        color: this.fill,\n        opacity: 1\n      }\n    ];\n  }\n}\n","import {\n  Component,\n  OnChanges,\n  Input,\n  Output,\n  SimpleChanges,\n  EventEmitter,\n  ChangeDetectionStrategy,\n  TemplateRef\n} from '@angular/core';\nimport { escapeLabel } from '../common/label.helper';\n\n@Component({\n  selector: 'g[ngx-charts-tree-map-cell-series]',\n  template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueType]=\"c.valueType\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapCellSeriesComponent implements OnChanges {\n  @Input() data;\n  @Input() dims;\n  @Input() colors;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n\n  cells: any[];\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.cells = this.getCells();\n  }\n\n  getCells(): any[] {\n    return this.data.children\n      .filter(d => {\n        return d.depth === 1;\n      })\n      .map((d, index) => {\n        const label = d.id;\n\n        return {\n          data: d.data,\n          x: d.x0,\n          y: d.y0,\n          width: d.x1 - d.x0,\n          height: d.y1 - d.y0,\n          fill: this.colors.getColor(label),\n          label,\n          value: d.value,\n          valueType: d.valueType\n        };\n      });\n  }\n\n  getTooltipText({ label, value }): string {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item): string {\n    return item.label;\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { treemap, stratify } from 'd3-hierarchy';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'ngx-charts-tree-map',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['./tree-map.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class TreeMapComponent extends BaseChartComponent {\n  @Input() results;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: any;\n  @Input() labelFormatting: any;\n  @Input() gradient: boolean = false;\n\n  @Output() select = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  dims: any;\n  domain: any;\n  transform: any;\n  colors: ColorHelper;\n  treemap: any;\n  data: any;\n  margin = [10, 10, 10, 10];\n\n  update(): void {\n    super.update();\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.domain = this.getDomain();\n\n    this.treemap = treemap<any>().size([this.dims.width, this.dims.height]);\n\n    const rootNode = {\n      name: 'root',\n      value: 0,\n      isRoot: true\n    };\n\n    const root = stratify<any>()\n      .id(d => {\n        let label = d.name;\n\n        if (label.constructor.name === 'Date') {\n          label = label.toLocaleDateString();\n        } else {\n          label = label.toLocaleString();\n        }\n        return label;\n      })\n      .parentId(d => (d.isRoot ? null : 'root'))([rootNode, ...this.results])\n      .sum(d => d.value);\n\n    this.data = this.treemap(root);\n\n    this.setColors();\n\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { TreeMapCellComponent } from './tree-map-cell.component';\nimport { TreeMapCellSeriesComponent } from './tree-map-cell-series.component';\nimport { TreeMapComponent } from './tree-map.component';\n\n@NgModule({\n  imports: [ChartCommonModule],\n  declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n  exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n})\nexport class TreeMapModule {}\n","import {\n  Component,\n  Input,\n  ElementRef,\n  ViewChild,\n  AfterViewInit,\n  ViewEncapsulation,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\nimport { calculateTextWidth } from '../utils/calculate-width';\nimport { VERDANA_FONT_WIDTHS_16_PX } from '../common/constants/font-widths';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\n\n@Component({\n  selector: 'ngx-charts-linear-gauge',\n  template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"'horizontal'\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"'horizontal'\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './linear-gauge.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class LinearGaugeComponent extends BaseChartComponent implements AfterViewInit {\n  @Input() min: number = 0;\n  @Input() max: number = 100;\n  @Input() value: number = 0;\n  @Input() units: string;\n  @Input() previousValue;\n  @Input() valueFormatting: any;\n\n  @ViewChild('valueTextEl') valueTextEl: ElementRef;\n  @ViewChild('unitsTextEl') unitsTextEl: ElementRef;\n\n  dims: ViewDimensions;\n  valueDomain: any;\n  valueScale: any;\n\n  colors: ColorHelper;\n  transform: string;\n  margin: any[] = [10, 20, 10, 20];\n  transformLine: string;\n\n  valueResizeScale: number = 1;\n  unitsResizeScale: number = 1;\n  valueTextTransform: string = '';\n  valueTranslate: string = '';\n  unitsTextTransform: string = '';\n  unitsTranslate: string = '';\n  displayValue: string;\n  hasPreviousValue: boolean;\n\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    if (isPlatformBrowser(this.platformId)) {\n      setTimeout(() => {\n        this.scaleText('value');\n        this.scaleText('units');\n      });\n    }\n  }\n\n  update(): void {\n    super.update();\n\n    this.hasPreviousValue = this.previousValue !== undefined;\n    this.max = Math.max(this.max, this.value);\n    this.min = Math.min(this.min, this.value);\n    if (this.hasPreviousValue) {\n      this.max = Math.max(this.max, this.previousValue);\n      this.min = Math.min(this.min, this.previousValue);\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n\n    this.setColors();\n\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n    this.valueTranslate = `translate(0, -15)`;\n    this.unitsTranslate = `translate(0, 15)`;\n\n    if (isPlatformServer(this.platformId)) {\n      this.scaleTextSSR('value');\n      this.scaleTextSSR('units');\n    } else {\n      setTimeout(() => this.scaleText('value'), 50);\n      setTimeout(() => this.scaleText('units'), 50);\n    }\n  }\n\n  getValueDomain(): any[] {\n    return [this.min, this.max];\n  }\n\n  getValueScale(): any {\n    return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n  }\n\n  getDisplayValue(): string {\n    if (this.valueFormatting) {\n      return this.valueFormatting(this.value);\n    }\n    return this.value.toLocaleString();\n  }\n\n  scaleText(element, repeat: boolean = true): void {\n    let el;\n    let resizeScale;\n    if (element === 'value') {\n      el = this.valueTextEl;\n      resizeScale = this.valueResizeScale;\n    } else {\n      el = this.unitsTextEl;\n      resizeScale = this.unitsResizeScale;\n    }\n\n    const { width, height } = el.nativeElement.getBoundingClientRect();\n    if (width === 0 || height === 0) return;\n    const oldScale = resizeScale;\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n    const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n    if (resizeScale !== oldScale) {\n      if (element === 'value') {\n        this.valueResizeScale = resizeScale;\n        this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      } else {\n        this.unitsResizeScale = resizeScale;\n        this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      }\n      this.cd.markForCheck();\n      if (repeat && isPlatformBrowser(this.platformId)) {\n        setTimeout(() => {\n          this.scaleText(element, false);\n        }, 50);\n      }\n    }\n  }\n\n  scaleTextSSR(element) {\n    let resizeScale = 1;\n\n    const value = element === 'value' ? this.displayValue : this.units;\n    const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, value, 10);\n    const height = 25;\n\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n    const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n    if (element === 'value') {\n      this.valueResizeScale = resizeScale;\n      this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n    } else {\n      this.unitsResizeScale = resizeScale;\n      this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n    }\n\n    this.cd.markForCheck();\n  }\n\n  onClick(): void {\n    this.select.emit({\n      name: 'Value',\n      value: this.value\n    });\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', [this.value], this.customColors);\n  }\n}\n","import {\n  Component,\n  Input,\n  ElementRef,\n  ViewChild,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Output,\n  EventEmitter,\n  ViewEncapsulation,\n  ContentChild,\n  TemplateRef\n} from '@angular/core';\nimport { scaleLinear } from 'd3-scale';\n\nimport { BaseChartComponent } from '../common/base-chart.component';\nimport { calculateViewDimensions, ViewDimensions } from '../common/view-dimensions.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'ngx-charts-gauge',\n  template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n  styleUrls: ['../common/base-chart.component.scss', './gauge.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeComponent extends BaseChartComponent implements AfterViewInit {\n  @Input() legend = false;\n  @Input() legendTitle: string = 'Legend';\n  @Input() legendPosition: string = 'right';\n  @Input() min: number = 0;\n  @Input() max: number = 100;\n  @Input() textValue: string;\n  @Input() units: string;\n  @Input() bigSegments: number = 10;\n  @Input() smallSegments: number = 5;\n  @Input() results: any[];\n  @Input() showAxis: boolean = true;\n  @Input() startAngle: number = -120;\n  @Input() angleSpan: number = 240;\n  @Input() activeEntries: any[] = [];\n  @Input() axisTickFormatting: any;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: (value: any) => string;\n  @Input() showText: boolean = true;\n\n  // Specify margins\n  @Input() margin: any[];\n\n  @Output() activate: EventEmitter<any> = new EventEmitter();\n  @Output() deactivate: EventEmitter<any> = new EventEmitter();\n\n  @ContentChild('tooltipTemplate') tooltipTemplate: TemplateRef<any>;\n\n  @ViewChild('textEl') textEl: ElementRef;\n\n  dims: ViewDimensions;\n  domain: any[];\n  valueDomain: any;\n  valueScale: any;\n\n  colors: ColorHelper;\n  transform: string;\n\n  outerRadius: number;\n  textRadius: number; // max available radius for the text\n  resizeScale: number = 1;\n  rotation: string = '';\n  textTransform: string = 'scale(1, 1)';\n  cornerRadius: number = 10;\n  arcs: any[];\n  displayValue: string;\n  legendOptions: any;\n\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    setTimeout(() => this.scaleText());\n  }\n\n  update(): void {\n    super.update();\n\n    if (!this.showAxis) {\n      if (!this.margin) {\n        this.margin = [10, 20, 10, 20];\n      }\n    } else {\n      if (!this.margin) {\n        this.margin = [60, 100, 60, 100];\n      }\n    }\n\n    // make the starting angle positive\n    if (this.startAngle < 0) {\n      this.startAngle = (this.startAngle % 360) + 360;\n    }\n\n    this.angleSpan = Math.min(this.angleSpan, 360);\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n\n    this.domain = this.getDomain();\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n\n    this.arcs = this.getArcs();\n\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.rotation = `rotate(${this.startAngle})`;\n    setTimeout(() => this.scaleText(), 50);\n  }\n\n  getArcs(): any[] {\n    const arcs = [];\n\n    const availableRadius = this.outerRadius * 0.7;\n\n    const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n    const arcWidth = radiusPerArc * 0.7;\n    this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n    this.cornerRadius = Math.floor(arcWidth / 2);\n\n    let i = 0;\n    for (const d of this.results) {\n      const outerRadius = this.outerRadius - i * radiusPerArc;\n      const innerRadius = outerRadius - arcWidth;\n\n      const backgroundArc = {\n        endAngle: (this.angleSpan * Math.PI) / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: this.max,\n          name: d.name\n        }\n      };\n\n      const valueArc = {\n        endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: d.value,\n          name: d.name\n        }\n      };\n\n      const arc = {\n        backgroundArc,\n        valueArc\n      };\n\n      arcs.push(arc);\n      i++;\n    }\n\n    return arcs;\n  }\n\n  getDomain(): any[] {\n    return this.results.map(d => d.name);\n  }\n\n  getValueDomain(): any[] {\n    const values = this.results.map(d => d.value);\n    const dataMin = Math.min(...values);\n    const dataMax = Math.max(...values);\n\n    if (this.min !== undefined) {\n      this.min = Math.min(this.min, dataMin);\n    } else {\n      this.min = dataMin;\n    }\n\n    if (this.max !== undefined) {\n      this.max = Math.max(this.max, dataMax);\n    } else {\n      this.max = dataMax;\n    }\n\n    return [this.min, this.max];\n  }\n\n  getValueScale(): any {\n    return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\n  }\n\n  getDisplayValue(): string {\n    const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n\n    if (this.textValue && 0 !== this.textValue.length) {\n      return this.textValue.toLocaleString();\n    }\n\n    if (this.valueFormatting) {\n      return this.valueFormatting(value);\n    }\n\n    return value.toLocaleString();\n  }\n\n  scaleText(repeat: boolean = true): void {\n    if (!this.showText) {\n      return;\n    }\n    const { width } = this.textEl.nativeElement.getBoundingClientRect();\n    const oldScale = this.resizeScale;\n\n    if (width === 0) {\n      this.resizeScale = 1;\n    } else {\n      const availableSpace = this.textRadius;\n      this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;\n    }\n\n    if (this.resizeScale !== oldScale) {\n      this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n      this.cd.markForCheck();\n      if (repeat) {\n        setTimeout(() => this.scaleText(false), 50);\n      }\n    }\n  }\n\n  onClick(data): void {\n    this.select.emit(data);\n  }\n\n  getLegendOptions(): any {\n    return {\n      scaleType: 'ordinal',\n      colors: this.colors,\n      domain: this.domain,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  setColors(): void {\n    this.colors = new ColorHelper(this.scheme, 'ordinal', this.domain, this.customColors);\n  }\n\n  onActivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  onDeactivate(item): void {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n\n    this.deactivate.emit({ value: item, entries: this.activeEntries });\n  }\n\n  isActive(entry): boolean {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  trackBy(index, item): string {\n    return item.valueArc.data.name;\n  }\n}\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, TemplateRef } from '@angular/core';\nimport { formatLabel, escapeLabel } from '../common/label.helper';\nimport { ColorHelper } from '../common/color.helper';\n\n@Component({\n  selector: 'g[ngx-charts-gauge-arc]',\n  template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"'top'\"\n      [tooltipType]=\"'tooltip'\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeArcComponent {\n  @Input() backgroundArc: any;\n  @Input() valueArc: any;\n  @Input() cornerRadius: any;\n  @Input() colors: ColorHelper;\n  @Input() isActive: boolean = false;\n  @Input() tooltipDisabled: boolean = false;\n  @Input() valueFormatting: (value: any) => string;\n  @Input() tooltipTemplate: TemplateRef<any>;\n  @Input() animations: boolean = true;\n\n  @Output() select = new EventEmitter();\n  @Output() activate = new EventEmitter();\n  @Output() deactivate = new EventEmitter();\n\n  tooltipText(arc): string {\n    const label = formatLabel(arc.data.name);\n    let val;\n\n    if (this.valueFormatting) {\n      val = this.valueFormatting(arc.data.value);\n    } else {\n      val = formatLabel(arc.data.value);\n    }\n\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n}\n","import { Component, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy } from '@angular/core';\nimport { line } from 'd3-shape';\n\n@Component({\n  selector: 'g[ngx-charts-gauge-axis]',\n  template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GaugeAxisComponent implements OnChanges {\n  @Input() bigSegments: any;\n  @Input() smallSegments: any;\n  @Input() min: any;\n  @Input() max: any;\n  @Input() angleSpan: number;\n  @Input() startAngle: number;\n  @Input() radius: any;\n  @Input() valueScale: any;\n  @Input() tickFormatting: any;\n\n  ticks: any;\n  rotationAngle: number;\n  rotate: string = '';\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.update();\n  }\n\n  update(): void {\n    this.rotationAngle = -90 + this.startAngle;\n    this.rotate = `rotate(${this.rotationAngle})`;\n    this.ticks = this.getTicks();\n  }\n\n  getTicks(): any {\n    const bigTickSegment = this.angleSpan / this.bigSegments;\n    const smallTickSegment = bigTickSegment / this.smallSegments;\n    const tickLength = 20;\n    const ticks = {\n      big: [],\n      small: []\n    };\n\n    const startDistance = this.radius + 10;\n    const textDist = startDistance + tickLength + 10;\n\n    for (let i = 0; i <= this.bigSegments; i++) {\n      const angleDeg = i * bigTickSegment;\n      const angle = (angleDeg * Math.PI) / 180;\n\n      const textAnchor = this.getTextAnchor(angleDeg);\n\n      let skip = false;\n      if (i === 0 && this.angleSpan === 360) {\n        skip = true;\n      }\n\n      if (!skip) {\n        let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n        if (this.tickFormatting) {\n          text = this.tickFormatting(text);\n        }\n        ticks.big.push({\n          line: this.getTickPath(startDistance, tickLength, angle),\n          textAnchor,\n          text,\n          textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n        });\n      }\n\n      if (i === this.bigSegments) {\n        continue;\n      }\n\n      for (let j = 1; j <= this.smallSegments; j++) {\n        const smallAngleDeg = angleDeg + j * smallTickSegment;\n        const smallAngle = (smallAngleDeg * Math.PI) / 180;\n\n        ticks.small.push({\n          line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n        });\n      }\n    }\n\n    return ticks;\n  }\n\n  getTextAnchor(angle) {\n    // [0, 45] = 'middle';\n    // [46, 135] = 'start';\n    // [136, 225] = 'middle';\n    // [226, 315] = 'end';\n\n    angle = (this.startAngle + angle) % 360;\n    let textAnchor = 'middle';\n    if (angle > 45 && angle <= 135) {\n      textAnchor = 'start';\n    } else if (angle > 225 && angle <= 315) {\n      textAnchor = 'end';\n    }\n    return textAnchor;\n  }\n\n  getTickPath(startDistance, tickLength, angle): any {\n    const y1 = startDistance * Math.sin(angle);\n    const y2 = (startDistance + tickLength) * Math.sin(angle);\n    const x1 = startDistance * Math.cos(angle);\n    const x2 = (startDistance + tickLength) * Math.cos(angle);\n\n    const points = [\n      { x: x1, y: y1 },\n      { x: x2, y: y2 }\n    ];\n    const lineGenerator = line<any>()\n      .x(d => d.x)\n      .y(d => d.y);\n    return lineGenerator(points);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from '../common/chart-common.module';\nimport { LinearGaugeComponent } from './linear-gauge.component';\nimport { GaugeComponent } from './gauge.component';\nimport { GaugeArcComponent } from './gauge-arc.component';\nimport { GaugeAxisComponent } from './gauge-axis.component';\nimport { PieChartModule } from '../pie-chart/pie-chart.module';\nimport { BarChartModule } from '../bar-chart/bar-chart.module';\n\n@NgModule({\n  imports: [ChartCommonModule, PieChartModule, BarChartModule],\n  declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n  exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n})\nexport class GaugeModule {}\n","import { NgModule } from '@angular/core';\nimport { ChartCommonModule } from './common/chart-common.module';\nimport { AreaChartModule } from './area-chart/area-chart.module';\nimport { BarChartModule } from './bar-chart/bar-chart.module';\nimport { BubbleChartModule } from './bubble-chart/bubble-chart.module';\nimport { HeatMapModule } from './heat-map/heat-map.module';\nimport { LineChartModule } from './line-chart/line-chart.module';\nimport { PolarChartModule } from './polar-chart/polar-chart.module';\nimport { NumberCardModule } from './number-card/number-card.module';\nimport { PieChartModule } from './pie-chart/pie-chart.module';\nimport { TreeMapModule } from './tree-map/tree-map.module';\nimport { GaugeModule } from './gauge/gauge.module';\nimport { ngxChartsPolyfills } from './polyfills';\n\n@NgModule({\n  exports: [\n    ChartCommonModule,\n    AreaChartModule,\n    BarChartModule,\n    BubbleChartModule,\n    HeatMapModule,\n    LineChartModule,\n    PolarChartModule,\n    NumberCardModule,\n    PieChartModule,\n    TreeMapModule,\n    GaugeModule\n  ]\n})\nexport class NgxChartsModule {\n  constructor() {\n    ngxChartsPolyfills();\n  }\n}\n","// The export is needed here to generate a valid polyfills.metadata.json file\nexport function ngxChartsPolyfills() {\n  // IE11 fix\n  // Ref: https://github.com/swimlane/ngx-charts/issues/386\n  if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n    SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n  }\n}\n","import { timeFormat } from 'd3-time-format';\n\nexport function tickFormat(fieldType, groupByType): (label: string) => string {\n  return function (label: string): string {\n    if (label === 'No Value' || label === 'Other') {\n      return label;\n    }\n    if (fieldType === 'date' && groupByType === 'groupBy') {\n      const formatter = timeFormat('MM/DD/YYYY');\n      return formatter(<any>label);\n    }\n\n    return label.toString();\n  };\n}\n"]}