{"version":3,"file":"mat-progress-buttons.js","sources":["../esm2015/projects/mat-progress-buttons/src/lib/component/spinner-button/spinner-button.component.ts","../esm2015/projects/mat-progress-buttons/src/lib/component/bar-button/bar-button.component.ts","../../projects/mat-progress-buttons/src/lib/mat-progress-buttons.module.ts","../../../projects/mat-progress-buttons/src/mat-progress-buttons.ts"],"sourcesContent":["import { Component, Input, Output, HostListener, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { MatProgressButtonOptions } from '../../mat-progress-buttons.interface';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'mat-spinner-button',\n  templateUrl: './spinner-button.component.html',\n  styleUrls: ['./spinner-button.component.scss']\n})\nexport class MatSpinnerButtonComponent implements OnChanges {\n  @Input() options: MatProgressButtonOptions;\n  @Input() active: boolean;\n  @Input() disabled: boolean;\n\n  @Output() btnClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  @HostListener('click', ['$event'])\n  public onClick(event: MouseEvent) {\n    if (!this.options.disabled && !this.options.active) {\n      this.btnClick.emit(event);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.active) {\n      this.options.active = changes.active.currentValue;\n    }\n    if (changes.disabled) {\n      this.options.disabled = changes.disabled.currentValue;\n    }\n  }\n}\n","import { Component, Input, Output, EventEmitter, HostListener, OnChanges, SimpleChanges } from '@angular/core';\nimport { MatProgressButtonOptions } from '../../mat-progress-buttons.interface';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'mat-bar-button',\n  templateUrl: './bar-button.component.html',\n  styleUrls: ['./bar-button.component.scss']\n})\nexport class MatBarButtonComponent implements OnChanges {\n  @Input() options: MatProgressButtonOptions;\n  @Input() active: boolean;\n  @Input() disabled: boolean;\n  @Output() btnClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  @HostListener('click', ['$event'])\n  public onClick(event: MouseEvent) {\n    if (!this.options.disabled && !this.options.active) {\n      this.btnClick.emit(event);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.active) {\n      this.options.active = changes.active.currentValue;\n    }\n    if (changes.disabled) {\n      this.options.disabled = changes.disabled.currentValue;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { MatSpinnerButtonComponent } from './component/spinner-button/spinner-button.component';\nimport { MatBarButtonComponent } from './component/bar-button/bar-button.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\n\n// Export module's public API\nexport { MatSpinnerButtonComponent } from './component/spinner-button/spinner-button.component';\nexport { MatBarButtonComponent } from './component/bar-button/bar-button.component';\nexport { MatProgressButtonOptions } from './mat-progress-buttons.interface';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRippleModule,\n    MatIconModule\n  ],\n  exports: [\n    MatSpinnerButtonComponent,\n    MatBarButtonComponent\n  ],\n  declarations: [\n    MatSpinnerButtonComponent,\n    MatBarButtonComponent\n  ]\n})\nexport class MatProgressButtonsModule {\n  static forRoot(): ModuleWithProviders<MatProgressButtonsModule> {\n    return {\n      ngModule: MatProgressButtonsModule\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;;;;MASa,yBAAyB;IANtC;QAWY,aAAQ,GAA6B,IAAI,YAAY,EAAc,CAAC;KAgB/E;IAdQ,OAAO,CAAC,KAAiB;QAC9B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YAClD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC3B;KACF;IAED,WAAW,CAAC,OAAsB;QAChC,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC;SACnD;QACD,IAAI,OAAO,CAAC,QAAQ,EAAE;YACpB,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC;SACvD;KACF;;;YA1BF,SAAS,SAAC;;gBAET,QAAQ,EAAE,oBAAoB;gBAC9B,65DAA8C;;aAE/C;;;sBAEE,KAAK;qBACL,KAAK;uBACL,KAAK;uBAEL,MAAM;sBACN,YAAY,SAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;;;MCNtB,qBAAqB;IANlC;QAUY,aAAQ,GAA6B,IAAI,YAAY,EAAc,CAAC;KAgB/E;IAdQ,OAAO,CAAC,KAAiB;QAC9B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YAClD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC3B;KACF;IAED,WAAW,CAAC,OAAsB;QAChC,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC;SACnD;QACD,IAAI,OAAO,CAAC,QAAQ,EAAE;YACpB,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC;SACvD;KACF;;;YAzBF,SAAS,SAAC;;gBAET,QAAQ,EAAE,gBAAgB;gBAC1B,0qCAA0C;;aAE3C;;;sBAEE,KAAK;qBACL,KAAK;uBACL,KAAK;uBACL,MAAM;sBACN,YAAY,SAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;;;MCoBtB,wBAAwB;IACnC,OAAO,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,wBAAwB;SACnC,CAAC;KACH;;;YAvBF,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,YAAY;oBACZ,eAAe;oBACf,oBAAoB;oBACpB,wBAAwB;oBACxB,eAAe;oBACf,aAAa;iBACd;gBACD,OAAO,EAAE;oBACP,yBAAyB;oBACzB,qBAAqB;iBACtB;gBACD,YAAY,EAAE;oBACZ,yBAAyB;oBACzB,qBAAqB;iBACtB;aACF;;;ACjCD;;;;;;"}