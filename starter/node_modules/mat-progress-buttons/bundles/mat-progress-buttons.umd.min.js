!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@angular/common"),require("@angular/core"),require("@angular/material/button"),require("@angular/material/progress-bar"),require("@angular/material/progress-spinner"),require("@angular/material/core"),require("@angular/material/icon")):"function"==typeof define&&define.amd?define("mat-progress-buttons",["exports","@angular/common","@angular/core","@angular/material/button","@angular/material/progress-bar","@angular/material/progress-spinner","@angular/material/core","@angular/material/icon"],n):n((t="undefined"!=typeof globalThis?globalThis:t||self)["mat-progress-buttons"]={},t.ng.common,t.ng.core,t.ng.material.button,t.ng.material.progressBar,t.ng.material.progressSpinner,t.ng.material.core,t.ng.material.icon)}(this,(function(t,n,o,i,s,e,a,r){"use strict";var c=function(){function t(){this.btnClick=new o.EventEmitter}return t.prototype.onClick=function(t){this.options.disabled||this.options.active||this.btnClick.emit(t)},t.prototype.ngOnChanges=function(t){t.active&&(this.options.active=t.active.currentValue),t.disabled&&(this.options.disabled=t.disabled.currentValue)},t}();c.decorators=[{type:o.Component,args:[{selector:"mat-spinner-button",template:'<button mat-button\n  [type]="options.type"\n  [color]="options.buttonColor"\n  [class.active]="options.active"\n  [class.fullWidth]="options.fullWidth"\n  [class.mat-raised-button]="options.raised"\n  [class.mat-stroked-button]="options.stroked"\n  [class.mat-flat-button]="options.flat"\n  [class.mat-fab]="options.fab"\n  [ngClass]="options.customClass"\n  [disabled]="options.active || options.disabled">\n\n  <ng-container\n    *ngIf="options.buttonIcon">\n    <mat-icon\n      class="mat-button-icon"\n      [class.is-mat-icon]="!options.buttonIcon.fontSet"\n      [class.active]="options.active && !options.disabled"\n      [ngClass]="options.buttonIcon.customClass"\n      [fontSet]="options.buttonIcon.fontSet"\n      [fontIcon]="options.buttonIcon.fontIcon"\n      [color]="options.buttonIcon.color"\n      [svgIcon]="options.buttonIcon.svgIcon"\n      [inline]="options.buttonIcon.inline">\n      {{ options.buttonIcon.fontSet ? \'\' : options.buttonIcon.fontIcon }}\n    </mat-icon>\n  </ng-container>\n\n  <span\n    class="button-text"\n    *ngIf="!options.fab"\n    [class.active]="options.active && !options.disabled">\n      {{ options.text }}\n  </span>\n\n  <ng-container\n    *ngIf="options.fab && options.icon">\n    <mat-icon\n      [fontSet]="options.icon.fontSet"\n      [fontIcon]="options.icon.fontIcon"\n      [color]="options.icon.color"\n      [svgIcon]="options.icon.svgIcon"\n      [inline]="options.icon.inline">\n        {{ options.icon.fontSet ? \'\' : options.icon.fontIcon }}\n    </mat-icon>\n  </ng-container>\n\n  <mat-spinner class="spinner"\n    *ngIf="options.active && !options.disabled"\n    [diameter]="options.fab ? 58 : options.spinnerSize"\n    [color]="options.spinnerColor"\n    [mode]="options.mode"\n    [value]="options.value"\n    [class.active]="options.active && !options.disabled">\n  </mat-spinner>\n</button>\n',styles:[":host button{outline:none}:host button.active{cursor:not-allowed}:host button ::ng-deep .mat-button-wrapper{align-items:center;display:flex;justify-content:center}:host button.fullWidth{width:100%}:host button.mat-fab .spinner{margin-top:-15px}:host button .spinner{opacity:0;position:absolute;top:25%;transition:opacity .3s ease-in-out}:host button .spinner.active{opacity:1}:host button .button-text{opacity:1;transition:opacity .3s ease-in-out}:host button .button-text.active{opacity:0}:host button mat-icon.mat-button-icon{padding-right:5px;transition:opacity .3s ease-in-out}:host button mat-icon.mat-button-icon.is-mat-icon{font-size:18px;position:relative;top:3px}:host button mat-icon.mat-button-icon.active{opacity:0}"]}]}],c.propDecorators={options:[{type:o.Input}],active:[{type:o.Input}],disabled:[{type:o.Input}],btnClick:[{type:o.Output}],onClick:[{type:o.HostListener,args:["click",["$event"]]}]};var p=function(){function t(){this.btnClick=new o.EventEmitter}return t.prototype.onClick=function(t){this.options.disabled||this.options.active||this.btnClick.emit(t)},t.prototype.ngOnChanges=function(t){t.active&&(this.options.active=t.active.currentValue),t.disabled&&(this.options.disabled=t.disabled.currentValue)},t}();p.decorators=[{type:o.Component,args:[{selector:"mat-bar-button",template:'<button mat-button\n  [type]="options.type"\n  [color]="options.buttonColor"\n  [class.active]="options.active"\n  [class.mat-raised-button]="options.raised"\n  [class.mat-stroked-button]="options.stroked"\n  [class.mat-flat-button]="options.flat"\n  [class.fullWidth]="options.fullWidth"\n  [ngClass]="options.customClass"\n  [disabled]="options.active || options.disabled">\n\n  <ng-container\n    *ngIf="options.buttonIcon">\n    <mat-icon\n      [class.is-mat-icon]="!options.buttonIcon.fontSet"\n      [ngClass]="options.buttonIcon.customClass"\n      [fontSet]="options.buttonIcon.fontSet"\n      [fontIcon]="options.buttonIcon.fontIcon"\n      [color]="options.buttonIcon.color"\n      [svgIcon]="options.buttonIcon.svgIcon"\n      [inline]="options.buttonIcon.inline">\n      {{ options.buttonIcon.fontSet ? \'\' : options.buttonIcon.fontIcon }}\n    </mat-icon>\n  </ng-container>\n\n  <span>{{ options.text }}</span>\n\n  <mat-progress-bar\n    class="bar"\n    *ngIf="options.active && !options.disabled"\n    [color]="options.barColor"\n    [mode]="options.mode"\n    [value]="options.value">\n  </mat-progress-bar>\n</button>\n',styles:[":host button.active{cursor:not-allowed}:host button.fullWidth{width:100%}:host button .bar{left:0;position:absolute;top:0}:host button mat-icon{padding-right:5px}:host button mat-icon.is-mat-icon{font-size:18px;position:relative;top:3px}"]}]}],p.propDecorators={options:[{type:o.Input}],active:[{type:o.Input}],disabled:[{type:o.Input}],btnClick:[{type:o.Output}],onClick:[{type:o.HostListener,args:["click",["$event"]]}]};var l=function(){function t(){}return t.forRoot=function(){return{ngModule:t}},t}();l.decorators=[{type:o.NgModule,args:[{imports:[n.CommonModule,i.MatButtonModule,s.MatProgressBarModule,e.MatProgressSpinnerModule,a.MatRippleModule,r.MatIconModule],exports:[c,p],declarations:[c,p]}]}],t.MatBarButtonComponent=p,t.MatProgressButtonsModule=l,t.MatSpinnerButtonComponent=c,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=mat-progress-buttons.umd.min.js.map